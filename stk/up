#! /bin/bash

. `dirname ${0}`/'dbank' || { echo "dbank err" && exit; }
. /etc/common.rc

#
# ------  common part over -----------
#

function fn_cap()
{
    if [ "$1" = "--keep.FIN" ] || [ "$1" = "-k" ]; then
        echo "keep $p_sbin/full.FIN"
    else
        read -p "
        Make sure U have down full.FIN?
        ln -sf /dzh2/Download/FIN/full.FIN $p_sbin"
        ( cd $p_sbin && ln -sf /dzh2/Download/FIN/full.FIN )
        xt_ret $? "" || return $?
    fi

    $cdpath/sina
    xt_ret $? "sina fail" || return $?

   #sed -i 's/恒顺众.*/恒顺众昇/' ${flash}.cap
    sed -i 's/N/昇/' ${flash}.cap

    lines=`cat ${flash}.cap | wc -l`
    [ $lines -gt 2000 ] && [ $lines -lt 3000 ]
    xt_ret $? "${flash}.cap lines $lines not in [2000,3000]" || return $?

    echo "
    DROP TABLE IF EXISTS cap;
    CREATE TABLE cap (
        id      int(4) ZEROFILL PRIMARY key AUTO_INCREMENT NOT NULL,
        code    INT(6)  ZEROFILL,
        date    DATE NOT NULL,
        close   DECIMAL(6,2) NOT NULL,
        cap     INT(14),
        nmc     INT(14),
        shares  DECIMAL(12,2) DEFAULT 0,
        name    CHAR(16),
        INDEX(code,date)
    );

    LOAD DATA LOCAL INFILE '${flash}.cap' INTO
    TABLE cap(code, date, close, cap, nmc, name);
    " | mysql kts

    echo "
    INFILE '${flash}.cap'
    update shares from dzh2 full.FIN...
    UPDATE cap SET nmc=close*shares WHERE nmc/close<shares;
    为兼容旧代码，最后的shares=nmc/close（只更新nmc，不更新shares）
    "

    # 修正 nmc & shares
    cd ${cdpath}/bin
    ./fin > /dev/shm/fin
    mysql kts < /dev/shm/fin

    echo "
    UPDATE cap SET nmc=close*shares WHERE nmc/close<shares;
    " | mysql kts

    # update .codelist
    cd ${cdpath}
    sqls="SELECT code,name FROM cap order by code asc"
    mysql -N kts<<<"${sqls}" > .codelist

    if [ `wc -l<.codelist` -gt 3000 ]; then
        fn_echo_fail "more than 3000 codes, please check it!"
        exit 1
    fi

    ./dbank 1

    # 修正top10
    sqls="INSERT INTO top10 SELECT code,0,name FROM cap WHERE code NOT in (SELECT code FROM top10)"
    mysql kts <<< "${sqls}"
}

function fn_add_yesclose()
{
    local p_znz="$warehs/znz_day"
    local p_sql="$warehs/mysql"
    local day_del='2013-10-08'

    mkdir -p $p_sql
    cd $p_znz

    local i=
    for i in *; do
        sort -k2 -g $i | awk '{
            printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n" ,
            $1,$2, yesc, $3, $4, $5, $6, $7, $8;
            yesc=$6
        }' | sed "/$day_del/d" > $p_sql/$i
    done
}

# min/2013-09-30/14.59.01
#         TRADE           昨收    今开    最高 最低
# 000002  9.13    0.77    9.06    9.08    9.18 9.03 633756.30   576146571
#         $2                      $5      $6   $7
#
# day/000002
# 日期        开盘价  最高价  最低价  收盘价      成交量（万股）  成交额（万元）
# 2013-09-30  9.08    9.18    9.03    9.13        6337.56     57614.66

function fn_hexun_day()
{
    {
        echo "    try flock 19..."
        flock 19
        echo "    got flock 19..."
        fn_hexun_day0
        xt_ret $? "fail: day0" || return $?
    } 19<>'/dev/shm/up2'
}

function fn_hexun_day0()
{
    unarm_close_forbid=true \
    fn_timestamp_market
    xt_ret $? "${FUNCNAME}" || return $?

    echo "    add hexun_day ${DATE}..."

    if [ "${FINA:-1}" -eq 1 ] ; then
        ./sina
        xt_ret $? "sina" || return $?
        cp ${flash}.sn $dayclose
    else
        $cdpath/hexun || {
            echo "try again..."
            sleep 2; $cdpath/hexun || { fn_echo_fail "try 2 times fail"; return 1 ; }
        }

        awk '{
            printf "%06d\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n",
                      $1, $13, $4, $5,  $6,  $7,  $2, ($8/100), ($9/10000)
        }'  $flash > $dayclose
    fi


    $W3M -dump ${url_sh000001} | awk -F',' '{
        printf "%06d\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n",
            '900001', $31, $3, $2, $5, $6, $4, ($9/100), ($10/10000);
    }' >> $dayclose
    xt_ret $? "NETWORK" || return $?

    hx_lines=`wc -l < $dayclose`
    if [ $hx_lines -lt ${baselines:=1300} ]; then
        fn_echo_pts0 "${date_T}.fn_hexun_day0.lines [ $hx_lines -lt ${baselines} ] & FINA=${FINA:-0}"
        return 1
    fi

    grep -q 900001 $dayclose || { echo "Error: 900001" && return 1 ;}

    mysql<<<"INSERT INTO kts.stamp_day values(DEFAULT, '$OPENDATE', '$OPENTIME')"
    xt_ret $? "" || return $?

    p_hx_day="$warehs/hx_day"
    mkdir -p $p_hx_day
    cp $dayclose $p_hx_day/$DATE

    echo "
    DELETE FROM day WHERE date='${DATE}';
    LOAD DATA LOCAL INFILE '${dayclose}' INTO TABLE day;
    " | mysql kts
}

function fn_trace()
{
    frog='/root/bin/stk/sql/trace.md'
    colA="date,curr_asset,frozen"       # ,sh,cyb"
    colA="A.${colA//,/,A.}"

    grep -v '^#' ${frog} | sed 's/  */\t/g'> ${buffer}

    echo "
        -- trace不可是TEMPORARY, 因为INNER-JOIN不允许
        DROP TABLE IF EXISTS trace;
        CREATE TABLE trace (
            id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
            date        date,
            curr_asset  DECIMAL(9,1) DEFAULT 0,
            frozen      DECIMAL(9,1) DEFAULT 0,
            sh          DECIMAL(9,2) DEFAULT 0,
            cyb         DECIMAL(9,2) DEFAULT 0
        );

        LOAD DATA LOCAL INFILE '${buffer}' INTO TABLE trace(date,curr_asset,frozen,sh,cyb);

           SELECT ${colA},
               (A.curr_asset-B.curr_asset) as earning,
               round(100*(A.curr_asset-B.curr_asset)/B.curr_asset, 2) as RoE,
            -- round(100*(A.curr_asset-B.curr_asset)/(B.curr_asset-A.frozen), 2) as RoE_real,
            -- (A.sh-B.sh) as earning_sh,
            -- (A.cyb-B.cyb) as earning_cyb,
               round(100*(A.sh-B.sh)/B.sh, 2) as RoE_sh,
               round(100*(A.cyb-B.cyb)/B.cyb, 2) as RoE_cyb,
               round(100*(A.curr_asset-B.curr_asset)/B.curr_asset, 2)-round(100*(A.cyb-B.cyb)/B.cyb, 2) as RoE_leading
               FROM trace A INNER JOIN
                    trace B on(A.id=B.id+1) GROUP BY A.id 
               HAVING 1 ${COND} ORDER by date DESC LIMIT ${LIMIT:-40};
    " | mysql -t kts

    return $?
}

function fn_del_hexun_day()
{
    unarm_close_forbid=true \
    is_del_routine=true \
    fn_timestamp_market
    xt_ret $? "${FUNCNAME}" || return $?

    echo "
    del hexun_day ${DATE}...
    "

    mysql<<<"DELETE FROM kts.day WHERE date = '${OPENDATE}';"
    xt_ret $? "${FUNCNAME}" || return $?
}

function fn_redo_hexun_day()
{
    fn_hexun_day
    xt_ret $? "fail: day" || return $?

    sql="SELECT count(code) FROM day WHERE date='${OPENDATE}' and ((close-yesc)/yesc > .101)"
    num_gt10=`mysql kts -N <<<"${sql}"`
    if [ "${num_gt10}" -ge 30 ]; then
        fn_echo_warn "${sql}"           # 超过30支票涨幅大于10%
        fn_beep
    fi

    if [ "$?" -eq 0 ]; then
        echo "    redo hexun_day succ ^_^ @`date +%T`
        "
    else
        echo "    redo hexun_day fail #_#
        "
    fi
}

function fn_load_directory()
{
    local tbl_name='day'
    local f_sql="$warehs/znz.xRD"
    # 做成一个大文件会快得多
    cd ${znzday}
    cat * > $f_sql
    echo "
    LOAD DATA LOCAL INFILE '$f_sql' INTO TABLE $tbl_name
    " | mysql kts

    return $?
}

function fn_file_to_table_quick()
{
    f_yist='/tmp/kts/yist'
    cat ${YIST}|awk '/^[036]/{print $1}' > $f_yist
    echo "
    DROP TABLE IF EXISTS yist;
    CREATE TABLE yist (
        id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
        code        INT(6) ZEROFILL NOT NULL DEFAULT 0
        ,INDEX(code)
    );
    LOAD DATA LOCAL INFILE '$f_yist' INTO TABLE yist(code);
    " | mysql kts
}

function fn_file_to_table()
{
    if [ -f "${1}" ]; then
        [ ! -s "${1}" ] && fn_echo_fail "Error: file ${$1} is empty" && exit 1
        lst=(`awk '/^[036]/{print $1}' ${*}`)
        file_fr="from $1"
    elif [ -n "${1}" ]; then
        lst=(${@})
    else
        fn_echo_fail "Usage: file_to_table {file|code...}" && exit 1
    fi

    echo "
        DROP TABLE IF EXISTS ${TBL:=zxg};
        CREATE TABLE ${TBL} (
            id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
            code        INT(6) ZEROFILL NOT NULL DEFAULT 0
            ,INDEX(code)
        );
        INSERT INTO ${TBL} (code) VALUES
        `sed -e 's/^/(/' -e 's/ /),(/g' -e 's/$/);/' <<< "${lst[@]}"`
    " > ${flash}.sql

    mysql kts < ${flash}.sql
    xt_ret $? "${FUNCNAME}" || return $?
}

function fn_table_to_file()
{
    mysql -N -B kts <<< "SELECT code FROM ${1:-chao} ORDER by code asc;" > /tmp/zxg
    echo "    add `wc -l /tmp/zxg` code to /tmp/zxg over."
}

function fn_xRDdb()
{
    if [ "$1" = "--keep.PWR" ] || [ "$1" = "-k" ]; then
        echo "keep $p_sbin/full.PWR"
    else
        echo "ln -sf /dzh2/Download/PWR/full.PWR $p_sbin"
        ( cd $p_sbin && ln -sf /dzh2/Download/PWR/full.PWR )
        xt_ret $? "" || return $?
    fi

    [ ! -f "$p_sbin/xRD" ] && echo "xRD not exist" && exit
    cd $p_sbin
    ./xRD | sort -r -k2 > ${chao}.xRD.list

    echo "
    DROP TABLE IF EXISTS xRD;
    CREATE TABLE xRD (
        code        INT(6)  ZEROFILL,
        date        DATE NOT NULL,
        song_ratio  DECIMAL(8,5) NOT NULL,
        pei_ratio   DECIMAL(8,5) NOT NULL,
        pei_price   DECIMAL(8,5) NOT NULL,
        div_ratio   DECIMAL(8,5) NOT NULL,
        INDEX(code,date)
    );

    LOAD DATA LOCAL INFILE '${chao}.xRD.list' INTO TABLE xRD;
    " | mysql kts


    if [ "$?" -eq 0 ] ; then
        echo "Update TABLE xRD SUCCESS" && return 0
    else
        echo "Update TABLE xRD FAILURE" && return 1
    fi
}

function fn_dump_day_2_tmp()
{
    # 对 /tmp 有写权限，其它的则需要设置
    chmod 777 ${daydump%/*}
    rm -f ${daydump}
    echo "
    SELECT * FROM day WHERE date>='${1:-$END}' and date<='${2:-$END}' INTO OUTFILE '${daydump}';
    " | mysql kts
}

function fn_trs_min_2_day()
{
    # 指南针数据是经过除权的数据，每次使用znz后要记住除权时间.

    [ -z "$1" ] && echo "Usage: $FUNCNAME date" && exit
    DATE=2013-12-12

    # SELECT code,date,yesc,open,high,low,close,volume,amount
    # SELECT code,date,open,high,low,close,volume,amount
    echo "
    SELECT code,date,yesc,open,high,low,trade,volume/100,amount/10000
        FROM min WHERE date='$DATE' and time='15:09:00';
	" | mysql -N kts > $buffer

    ## LOAD时数据自动会进行四舍5入
    echo "
    LOAD DATA LOCAL INFILE '$buffer' INTO TABLE day
	" | mysql kts

    return 0
}

function fn_redo_hexun_day_fr_min()
{
    #
    echo "    redo hexun_day fr min..."

    DATE=`mysql -N kts <<< "SELECT date FROM stamp_min WHERE id = (SELECT max(id) FROM stamp_min);"`
    TIME=`mysql -N kts <<< "SELECT time FROM stamp_min WHERE id = (SELECT max(id) FROM stamp_min);"`

    OPENDATE=`$W3M -dump ${url_sh000001} |awk -F',' '{print $(NF-2)}'`

    [ -z "$OPENDATE" ] && fn_echo_fail "    FINA UNREACHABLE!" && return 1
    [ "$DATE" != "$OPENDATE" ] && echo "Error: market is close" && return 1


    fn_del_hexun_day
    xt_ret $? "del error" || return $?

    echo "
    SELECT code,date,yesc,open,high,low,trade,volume/100,amount/10000
        FROM min WHERE date='$DATE' and time='${TIME}';
	" | mysql -N kts > $buffer
    xt_ret $? "mysql > $buffer" || return $?

    ## LOAD时数据自动会进行四舍5入
    echo "
    LOAD DATA LOCAL INFILE '$buffer' INTO TABLE day
	" | mysql kts
    xt_ret $? "load data $buffer" || return $?

    echo "    end of redo hexun_day fr min..."

    return 0
}

function fn_rzrq()
{
    > ${buffer}
    url0='http://datainterface.eastmoney.com/EM_DataCenter/JS.aspx?type=FD&sty=SHSZHSSUM'

    pages=4
    for (( i=1; i<=${pages}; i+=1 )); do
        url="${url0}&st=0&sr=1&p=${i}&ps=100&js=var%20EJcawWJn={pages:(pc),data:[(x)]}"
        w3m -dump "${url}" > ${cache}
        xt_ret $? "" || return $?

        cat ${cache} | tr -d '\n' |
            sed -e '1s/^.*data:.//' -e '$s/]}/\n/' |
            sed 's/","/\n/g'  | tr -d '"' >> ${buffer}
    done
    awk -F',' '{printf "%s\t%.2f\n", $1,$4/100000000}' ${buffer} > ${cache}

    echo "
    DROP TABLE IF EXISTS rzrq;
    CREATE TABLE rzrq (
        id      INT PRIMARY key AUTO_INCREMENT NOT NULL,
        date    DATE NOT NULL,
        net     DECIMAL(10,2) NOT NULL,
        INDEX(date)
    );

    LOAD DATA LOCAL INFILE '${cache}' INTO TABLE rzrq(date,net);
    " | mysql kts
    xt_ret $? "" || return $?

    fn_echo_succ "up rzrq succ"
}

function fn_copy_table_2_table()
{
    fn_cp_tbl ${1:-zxg} ${2:-ipo}
    echo fn_cp_tbl ${1:-zxg} ${2:-ipo} over!!!
}

function fn_html()
{
    if [ "${FINA:-1}" -eq 1 ] ; then
        timeout 10 ./soptter > ${cache}
    else
        timeout 10 ./xunner > ${cache}
    fi
    xt_ret $? "timeout" || return $?

    names=(`awk '!/name/ {print $NF}' ${cache}`)
    codes=(`awk '!/name/ {print $1}' ${cache}| sed -e 's/^[03]/sz&/g' -e 's/^6/sh&/g'`)
    codes[0]=sh000001
    # echo ${names[@]}; echo ${codes[@]}; exit

    [ ${#names[@]} -eq ${#codes[@]} ]
    xt_ret $? "fail: ${#names[@]} -eq ${#codes[@]}" || return $?

    cp .template/KiTas.html /winc/relay/KiTas.html
    xt_ret $? "cp error" || return $?

    cat <<-"HERE_head" > /winc/relay/KiList.html
    <html>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>KiTas</title>
    <body>
    <p align="center">follow your heart!</p>
    <table align="center" width="100%" border="1">
	HERE_head

    local align='align="center" width="20%"'
    local chart='http://image.sinajs.cn/newchart'
    local target='TARGET="show"'
    local i
    for (( i=0; i<${#names[@]}; i+=1 )); do
    cat <<-HERE_mid >> /winc/relay/KiList.html
  <tr>
    <td align="center" width="40%">${names[$i]}</td>
    <td ${align}> <a HREF="${chart}/min/n/${codes[$i]}.gif"    ${target}>min</a> </td>
    <td ${align}> <a HREF="${chart}/daily/n/${codes[$i]}.gif"  ${target}>day</a> </td>
    <td ${align}> <a HREF="${chart}/weekly/n/${codes[$i]}.gif" ${target}>wek</a> </td>
  </tr>
	HERE_mid
    done
    cat <<-"HERE_tail" >> /winc/relay/KiList.html
    </table>
    </body>
    </html>
	HERE_tail
}

function fn_checkcode()
{
    if [ ! -f "${1}" ]; then
        echo "Usage: $FUNCNAME file"
        exit
    fi

    codes=(`cat ${1}|awk '/^[^#]/{print $1}' | xargs`)

    local i=
    for i in ${codes[@]}; do
        [[ ${i} =~ ^[036].* ]] || { echo "ignore code ${i}"; continue ;}
        grep -q ${i} .codelist
        xt_ret $? "${i} is a bad code" || return $?
    done

    fn_echo_succ "${1} is good code file"
}

function fn_day()
{
    bin/znz.yahoo $@
}


function fn_ipo()
{
    > ${memory}.ipo

    local i
    for (( i=1; i<=10; i+=1 )); do
        url="http://datainterface.eastmoney.com/EM_DataCenter/JS.aspx?type=NS&sty=NSST&st=12&sr=-1&p=${i}&ps=50"

        echo dump ${url}
        w3m -dump "${url}" > ${cache}

        # 's/,AN//g' 剔除申购准备中的票
        cat ${cache} |sed -e '1s/(\[//' -e '$s/])//' -e 's/,AN//g' -e 's/"//g' | tr -d '\n' |
                     sed -e 's/AN201/\n&/g' -e 's/AN//g' |
                     awk -F',' '/^201/{printf "%d\t%s\t%s\n", $1/1000000000000,$5,$4}'  > ${buffer}

        cat ${buffer} >> ${memory}.ipo
    done

    fn_echo_succ "
    日期为审批公告发布日期
    未申购的公司不在列表之内
    列表文件: ${rip}
    "
}

function fn_lhb()
{
    sql="SELECT max(date) FROM lhb"
    max_dt=`mysql -N kts <<< "${sql}"`
    max_dt=${max_dt/NULL/2015-07-08}
    sql="SELECT date from day WHERE code=900001 and date>'${max_dt}' ORDER by date ASC"
    dates=(`mysql -N kts <<<"${sql}"`)
    #dates=(2015-08-12 2015-08-14 2015-08-07)
    #echo ${dates[@]}

    if [ "${#dates[@]}" -eq 0 ]; then
        echo "It's latest" ; exit
    fi
    local i=
    for i in ${dates[@]}; do
        echo to up ${i}...
        fn_lhb0 ${i} || exit
        # exit  # debug
    done
    return $?
}

function fn_lhb0()
{
    url="http://datainterface3.eastmoney.com//EM_DataCenter_V3/api/LHBGGDRTJ/GetLHBGGDRTJ?tkn=eastmoney&mkt=0&dateNum=&"
    url="${url}startDateTime=${1}&endDateTime=${1}&sortRule=1&sortColumn=&pageNum=1&pageSize=200&cfg=lhbggdrtj"
  # url="http://data.eastmoney.com/stock/lhb/$1.html"
    w3m -cols 999 -dump "${url}" > ${cache}
    cat ${cache} | \
        sed -e 's/.*:\["//' -e 's/"\]\}\]\}//g' | \
        sed -e 's/","/\n/g' | tr '|' ' ' | sed 's/    .*$//g' > ${cache}.2

    cat ${cache}.2 | awk '{printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n",
    # $1      $2      $3      $4              $5   $6         $7          $8      $9          $10      $11
    # 序号  代码    名称      相关链接    涨跌幅  龙虎榜成  买入额(万)  占总成交  卖出额(万)  占总成交 上榜原因
      NR,     $1,      $2,     NR,           $4,   $13,    $12/10000, 100*$12/$7, $11/10000, 100*$11/$7,  NR }' | \
    awk -v v_date=$1 '{
        printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%s\n", \
                v_date, $2,$5,$6,$7,$8,$9,$10,$11;
    }' > ${flash}
#   # ' N' 恒顺众日升 乱码
#   cat ${cache} | grep -A1000 '^1\>' |
#       sed -e 's/^           /999 1 2 3 4/' -e 's/ N\>//g' |
#       grep '^[0-9]' > ${buffer}
#   #           12345678901
#   awk -v v_date=$1 '
#   BEGIN{ nr=0 } {
#       if ($1==999) {
#           printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%s\t\n", \
#                   v_date, code,chng,$6,$7,$8,$9,$10,$11;
#       } else if ($1<nr) {
#           exit
#       } else if ($2<700000) {
#           printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%s\t\n", \
#                   v_date, $2,$5,$6,$7,$8,$9,$10,$11;
#           nr=$1;
#           code=$2;
#           chng=$5;
#       }
#   }' ${buffer} |
#   sed \
#   -e 's/退市整理的证券/fired/g'                                       \
#   -e 's/无价格涨跌幅限制的证券/unlimited/g'                           \
#   -e 's/当日融资买入数量占该证券总交易量50%以上/rzrq50/g'             \
#   -e 's/日均换手率与前五个交易日的.*/ratio30/g'                       \
#   -e 's/当日价格振幅达到15%的证券/hilo15/g'                           \
#   -e 's/当日换手率达到20%的证券/tov20/g'                              \
#   -e 's/当日涨幅偏离值达7%的证券/up7/g'                               \
#   -e 's/当日跌幅偏离值达7%的证券/dn7/g'                               \
#   -e 's/S、ST、.ST连续三个交易日.*跌幅.*/s3dn12/g'                    \
#   -e 's/S、ST、.ST连续三个交易日.*涨幅.*/s3up12/g'                    \
#   -e 's/连续三个交易日.*涨幅偏离值累计20%/3up20/g'                    \
#   -e 's/连续三个交易日.*跌幅偏离值累计20%/3dn20/g'  > ${flash}

    awk '{print $2}' ${flash} | grep -q '^6'
    xt_ret $? "Error: sh_sec lhb is not released" || return $?

    lines=`wc -l<${flash}`
    if [ "${lines}" -lt 5 ]; then
        echo "Bad lhb data: ${url}"
        exit
    fi

    echo "
    -- DROP TABLE IF EXISTS lhb;
    CREATE TABLE IF NOT EXISTS lhb (
        id      int(4) ZEROFILL PRIMARY key AUTO_INCREMENT NOT NULL,
        date    DATE NOT NULL,
        code    INT(6)  ZEROFILL,
        chng    DECIMAL(6,2) NOT NULL,
        amount  DECIMAL(10,2) NOT NULL,     -- 万
        buy     DECIMAL(10,2) NOT NULL,
        bloo    DECIMAL(10,2) NOT NULL,
        sell    DECIMAL(10,2) NOT NULL,
        sloo    DECIMAL(10,2) NOT NULL,
        cause   CHAR(20),
        INDEX(date,code)
    );

    DELETE FROM lhb WHERE date='$1';
    LOAD DATA LOCAL INFILE '${flash}' INTO
    TABLE lhb(date,code,chng,amount,buy,bloo,sell,sloo,cause);
    " | mysql kts

    return $?
}

function fn_morningcall()       
{
    # __NTP同步__@09:20:00 FROM cron
    timeout 30 ntpdate cn.pool.ntp.org || \
    fn_beep "------ NTP sync failure ------"
    fn_bell 'msg.wav'

    # clean log of [up dorat loop]
    >       /tmp/kts/chao.loop
    >       /tmp/kts/chao.eThrd
    cp      /tmp/kts/chao.u /tmp/kts/chao.u2            # 归档昨日记录
    cp      .src/ugly.10.u  /tmp/kts/chao.u             # 初始化今日记录

    # enable BEEP
    echo 1 > /tmp/kts/chao.beep

    SELECT ma120 || fn_bell 'duang.wav'                 # ma120
    SELECT ddd d3                                       # 连续3天缩量

    # check-matov5 
    max_date=`mysql -N kts <<< "SELECT max(date) FROM matov5"`
    if [ "${max_date}" != "${END}" ]; then
        fn_beep "------ LAST homework is not done ------"
        fn_bell 'msg.wav duang.wav'
    fi
    
    return $?
}

function fn_db201()
{
    fn_isholiday ${date_F} && return
    # 开市&有dorat 1st数据更新(09:34:00)后才有效
    db_date=`mysql -N kts<<<"SELECT date FROM stamp_day ORDER by id DESC LIMIT 1"`
    [ "${date_F}" = "${db_date}" ] && fn_bell 'wolf'
}

function fn_ld_dorat()
{
    if [ -z "${sec_date}" ]; then
        sec_dt=(`mysql -N kts<<<"SELECT date,time FROM stamp_day ORDER by id DESC LIMIT 1"`)
        sec_date=${sec_dt[0]}
        sec_time=${sec_dt[1]}
    fi

    columns="code,yesc,open,high,low,close,volume,amount"

    echo "
    -- DROP TABLE dorat;
    CREATE TABLE IF NOT EXISTS dorat (
        date        date NOT NULL,
        time        time NOT NULL,
        code        INT(6) ZEROFILL NOT NULL DEFAULT 0,
        yesc        DECIMAL(6,2) NOT NULL,
        open        DECIMAL(6,2) NOT NULL,
        high        DECIMAL(6,2) NOT NULL,
        low         DECIMAL(6,2) NOT NULL,
        close       DECIMAL(6,2) NOT NULL,
        volume      DECIMAL(12,2) NOT NULL,
        amount      DECIMAL(12,2) NOT NULL,
        INDEX(date,time,code)
    );
    DELETE from dorat WHERE date='${sec_date}' && time='${sec_time}';
    INSERT INTO dorat SELECT date,'${sec_time}',${columns} FROM ${TBL:-day} WHERE date='${sec_date}';
    " | mysql kts
    
    return $?
}

function fn_am925_bell()
{
    fn_isholiday ${date_F} && return
    /root/bin/bell am925
}

function fn_am925()
{
    #fn_echo_succ "test"; exit

    fn_get_export_file
    xt_ret $? "" || return $?

    # umcomment
    # efile='/tmp/kts/chao.Table'
    iconv -f cp936 -t utf8 ${efile} | tail -n+2 > ${cache}
    if ! grep -q '^S[HZ]' ${cache}; then
        fn_echo_fail "not a wolf file"
        return 1
    fi

    tag_blank='--.--.--.--'
    sed -e 's///g' -e 's/S.//g' -e 's/ //g'               \
        -e 's/%//g' -e 's/\t$//g' -e 's/\t\t*/\t/g'         \
        -e "/${tag_blank}/d" -e '/^$/d' ${cache} > ${buffer}

    awk -v vdate=${YYMMDD} '{
        printf "%s\t%s\t %.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n",
        $1,vdate, $3,$4,$5,$6,$7, $8/10000,$9/10000
    }' ${buffer} > ${flash}

    printf "900001\t${YYMMDD}\n"  >> ${flash}

    fn_echo_succ "re-build day @${YYMMDD}.${HHMMSS}"

    #exit # un-comment to debug

    echo "
    DELETE FROM day WHERE date='${YYMMDD}';
    LOAD DATA LOCAL INFILE '${flash}' INTO TABLE day;
    " | mysql kts
    xt_ret $? "" || return $?

    fn_echo_succ "re-build dorat @${YYMMDD}.${HHMMSS}"
    sec_date=${YYMMDD} sec_time=${HHMMSS} fn_ld_dorat
    xt_ret $? "" || return $?

    # 重新init.END
    END=${YYMMDD} fn_chk_rank
}

function fn_dorat()
{
    fn_isholiday ${date_F} && return

    case $1 in
    l|loop) # 午休时段不更新数据
        is_del_routine=true fn_timestamp_market
        xt_ret $? "unarm_close_forbid=true TO RERUN WHEN MARKET CLOSED" || return $?
        fn_isresting && { echo "is reseting"; exit 0; }
        ;;
    esac

    hhmm=`date +%H%M | sed 's/^0//'`;

    fn_redo_hexun_day || FINA=1 up 4
    xt_ret $? "" || { BEEPS=10 fn_beep __dorat_fail__; return 1 ;}

    fn_ld_dorat
    xt_ret $? "" || return $?

    fn_echo_succ "    succ: insert dorat ${sec_dt[@]}"

    fn_chk_rank
}

function fn_break_in()
{
    # 刷新DZH
    WIT=2 PARTS=f YIST=/tmp/kts/chao.120 PPLUS=G SELECT lsds ${icurr} || exit
    WIT=1 PARTS=f PPLUS=K kCOND="rise+space>5"   SELECT lsds ${icurr} || exit

    # 
    if [ "${bans}" -ge 18 ]; then
        SUFFIX="Tops[${bans}]Dive[${thrx}% ${dive}].{${invt}$left~$right} eThrd:${eThrd}" \
        fn_beep "__More_than_16_birds__\n"; return
    fi

    let layer1s=bans+3                  # 6=3+3 提供1防护
    let layer2s=bans+6                  # 6=3+3 提供2防护

    # process
    let iprev=icurr-1
    fn_echo_succ "layer2s=bans+6=${bans}+6..."
    CHAO=1 PPLUS=K kCOND="rise+space>5" LIMIT=${layer2s} chao2='L2.prev' SELECT lsds ${iprev}
    xt_ret $? "$BLK $YIST:  CHAO=1 PPLUS=V LIMIT=${layer2s} chao2='L2.prev' SELECT lsd ${iprev}" || return $?

    head -${layer2s} /tmp/kts/chao.lsd      > /tmp/kts/chao.L2.curr
    head -${layer1s} /tmp/kts/chao.lsd      > /tmp/kts/chao.L1.curr
    head -${layer1s} /tmp/kts/chao.L2.prev  > /tmp/kts/chao.L1.prev

    # 防护=layer+1，有新手闯入
    union=`head  -${layer1s} -q /tmp/kts/chao.L1.* | sort -u | wc -l`
    [ "${union}" -ne ${layer1s} ] && { match=1; BEEPS=5 ;}  && \
    birds1=$(fn_name `grep -v -f /tmp/kts/chao.L1.prev /tmp/kts/chao.L1.curr` 2>&1)

    # 防护=layer+2，有新手闯入
    union=`head  -${layer2s} -q /tmp/kts/chao.L2.* | sort -u | wc -l`
    [ "${union}" -ne ${layer2s} ] && { match=1 ;}           && \
    birds2=$(fn_name `grep -v -f /tmp/kts/chao.L2.prev /tmp/kts/chao.L2.curr` 2>&1)

    #echo L2:${layer2s} m:${match} B1:${birds1} B2:${birds2} # ;exit
    # 检查是否禁用beep，有闯入者，告警
    [ "`cat /tmp/kts/chao.beep`" = 0 ] && BEEPS=0
    [ "${match:-0}" -eq 0 ] && BEEPS=0
    [ -z "${birds2}" ] && iNL="\n"

    SUFFIX="Tops[${bans}]Dive[${thrx}% ${dive}].${invt}{$left~$right} eThrd:${eThrd}" \
    BEEPS=${BEEPS} fn_beep "L1:${birds1}L2:${birds2}${iNL}"
    
    return $?
}

function fn_chk_rank()
{
    # OUTPUT__DZH__
    [ -z "${icurr:=$1}" ] && icurr=`fn_get_nr_time`
    hhmm=${hhmm:-$(date +%H%M --date="`fn_get_time $icurr`")}

    if [ "${hhmm}" -lt 920 ]; then              # 复牌检查
        return
    elif [ "${hhmm}" -lt 930 ]; then
        mysql kts <<< "DELETE FROM dorat WHERE date='${END}' and time<'09:24:00'";
        ./blk 10jqka
        fn_echo_blue "昨日涨停->自选股3.BLK"
        WIT=3 END= iEND=2 COND="rise>=9.93" PARTS=f PPLUS=G SELECT lsds || fn_bell
        fn_bell; return
    fi

    # 设置阈值、上限、下限，!取反
    vbi3=.48
    thrx=-5
    invt=!
    left=15
    right=35
    sqls="WHERE date='${END}' ORDER by rise ASC"
    sqls="(SELECT code, ROUND(100*(d.close-d.yesc)/d.yesc, 2) as rise FROM day d ${sqls})"
    dive=`mysql -N kts <<< "SELECT SUM(rise<${thrx}) FROM ${sqls} as t"`

    fn_issqltrue "${invt}(${dive}>${left} && ${dive}<${right})" && fn_bell duang.wav

    # 兔子筛选
    CHK_RANK=1 FIELD=rise lowDOOR=4 OP= vbi3=${vbi3} SELECT volvo bang $1 && {  # gen ${cache}.bang
        eThrd=`cat ${chao}.eThrd`
        awk '/^[036]/ {print $1}' /tmp/kts/chao.u> ${patt}.1
        cat ${cache}.bang | grep -v -f ${patt}.1 > ${buffer}.bang
        awk '{print $4}' ${buffer}.bang | grep '^[036]' > ${buffer}.bang.c
        grep -f ${buffer}.bang.c .codelist > /tmp/kts/chao.raw
        if [ `wc -l <${buffer}.bang` -gt 4 ]; then
            cat ${buffer}.bang > /dev/pts/0
            fn_echo_fail `grep -f /tmp/kts/chao.d3 --color /tmp/kts/chao.raw` >& /dev/pts/0
            MSG=f4_is_Rocking fn_bell online.wav
        fi
    }


    # 涨停计算
    fn_echo_succ "bans=rise>=9.93..."
    bans=`OPT='-N' CHAO=0 WIT= PARTS= COND="rise>=9.93" PPLUS=G SELECT lsd $1 | wc -l`
    lower=18
    upper=20
    fn_issqltrue "${bans}>=${lower}&&${bans}<=${upper}" && MSG=bans.${bans} fn_bell system.wav 

    #
    [ -z "${birds2}" ] && iNL="\n"
    SUFFIX="Tops[${bans}]Dive[${thrx}% ${dive}].${invt}{$left~$right} eThrd:${eThrd}" \
    BEEPS=${BEEPS} fn_beep "L1:${birds1}L2:${birds2}${iNL}"
}

function fn_ma20f15()
{
    function fn_creat_db_ma20f15()
    {
        # fn_echo_fail "db DT is ${DT[@]}" > /dev/stderr
        # TEMPORARY=TEMPORARY
        echo "
        DROP   $TEMPORARY TABLE IF EXISTS dorat2;
        CREATE $TEMPORARY TABLE IF NOT EXISTS dorat2 (
            code        INT(6) ZEROFILL NOT NULL DEFAULT 0,
            close       DECIMAL(6,2) NOT NULL,
            date        date,
            time        time,
            INDEX(code)
        );"
        while read date time; do
            echo "INSERT INTO dorat2 SELECT code,close,date,time FROM dorat WHERE date='${date}' and time='${time}';"
        done <<<"`DT="${DT[@]}" ./SELECT dorat | tac | head -60 | sed -n '1~3p'`"
    }

    DT=(${DT})
    iEND=${DT[0]}
    END=${iEND:-$END}
    PREV=`fn_get_prev`
    fn_creat_db_ma20f15 > ${mps_ma20f15}

    echo "
delimiter //

DROP PROCEDURE IF EXISTS sp_ma20f15 //
CREATE PROCEDURE sp_ma20f15() tag_ma20f15:BEGIN
    DROP   TABLE IF EXISTS ma20f15;
    CREATE TABLE ma20f15(
        id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
        code        INT(6) ZEROFILL NOT NULL DEFAULT 0,
        ma20f15      DECIMAL(8,2) NOT NULL DEFAULT 0
    );
    INSERT INTO ma20f15(code,ma20f15)
        SELECT t.code,ma20f15 FROM ( SELECT code,sum(close)/20 as ma20f15 FROM dorat2 GROUP by code ) as t,
        (SELECT A.code FROM
          (SELECT code FROM day WHERE date='${END}') as A,
          (SELECT code FROM day WHERE date='${PREV}') as B WHERE A.code=B.code
        ) as code2015
        WHERE t.code=code2015.code;
    -- NOT IN 比较慢
    -- SELECT code,sum(close)/20 as ma20f15 FROM dorat2 GROUP by code;
    -- DELETE FROM ma20f15 WHERE code NOT IN(SELECT code FROM code2015);
END tag_ma20f15 //

call sp_ma20f15();
    " >> ${mps_ma20f15}
    mysql kts < ${mps_ma20f15}
    xt_ret $? "" || return $?
    fn_echo_succ "    succ: up ma20f15@${DT[@]}!"
    return $?
}

function fn_sipf()
{
    w3m -cols 999 -dump 'http://data.eastmoney.com/cjsj/bankTransfer.html' > ${chao}.sipf
    grep '^201[3-9]' ${chao}.sipf | sed -e 's/[年月]/-/g' -e 's/日//g' -e 's/  */\t/g' | \
        sed 's/\t[0-9.]*\t[0-9.%-]*$//g' | sort -k1 | grep -A1000 '2014-03-31' > ${chao}.ssss

    fn_echo_succ "succ and 使用sina数据后自动返回!"

    return

    fn_echo_succ "余额期末数\t日平均数\t银证转账+\t银证转账-\t银证转账net
    "
    url="
http://www.sipf.com.cn/NewCH/zt/11/101752.shtml
    "
    w3m -dump $url | grep 证券交易结算资金 | sed 's/,//g' | \
        awk '{printf "%s\t%s\t%s\t%s\t%s\n", $4,$6,$8,$10,$12}'

    # 两部分数据格式不一样，所以分的两部分
    exit
    host='http://www.sipf.com.cn'
    dates=(
    "/NewCH/zt/01/94402.shtml"    201501
    "/NewCH/zt/12/93151.shtml"    201412
    "/NewCH/zt/11/92201.shtml"    201411
    "/NewCH/zt/10/90801.shtml"    201410
    "/NewCH/zt/09/89104.shtml"    201409
    "/NewCH/zt/08/88352.shtml"    201408
    "/NewCH/zt/07/87752.shtml"    201407
    "/NewCH/zt/06/87102.shtml"    201406
    "/NewCH/zt/05/86303.shtml"    201405
    "/NewCH/zt/04/85854.shtml"    201404
    )
    for (( i=${#dates[@]}-1; i>0; i-=2 )); do
        let j=i-1
        echo -e "month: \t${dates[$i]}"
        w3m -dump "${host}/${dates[$j]}" | grep '201.\.' | sed 's/,//g' | \
            awk '{printf "%s\t%s\t%s\t%s\t%s\n", $2,$3,$4,$5,$6}'
    done

    dates=(
    "/NewCH/zt/09/100802.shtml"   201509
    "/NewCH/zt/08/100352.shtml"   201508
    "/NewCH/zt/07/99752.shtml"    201507
    "/NewCH/zt/06/98652.shtml"    201506
    "/NewCH/zt/05/97802.shtml"    201505
    "/NewCH/zt/04/97002.shtml"    201504
    "/NewCH/zt/03/96352.shtml"    201503
    "/NewCH/zt/02/95209.shtml"    201502
    )
    local i
    for (( i=${#dates[@]}-1; i>0; i-=2 )); do
        let j=i-1
        echo -e "month: \t${dates[$i]}"
        w3m -dump "${host}/${dates[$j]}" | grep 证券交易结算资金 | sed 's/,//g' | \
            awk '{printf "%s\t%s\t%s\t%s\t%s\n", $4,$6,$8,$10,$12}'
    done
}

function fn_nets()
{
    # 2014-04 free0=5755
    awk '
    BEGIN { sum=0; free0=5755; net=0; }
    {
        net=net+$7;
        sum=(free0-$3)+$7+sum;
        printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", $1,$2,$3,$4,$5,$6,$7,sum,net
        free0=$3;
    }'  ${chao}.ssss > ~/bin/stk/sql/money.clean
    fn_echo_succ "Done gen ~/bin/stk/sql/money.clean"
}


function fn_bala()
{
    cp sql/money.clean ${chao}.clean
    xt_ret $? "" || return $?

    head -n -5 $mps_org > $mps_nbm

    echo "
    DROP TABLE IF EXISTS balance;
    CREATE TABLE balance(
        id      int PRIMARY key AUTO_INCREMENT NOT NULL,
        mon     DATE NOT NULL,
        fri     DATE NOT NULL,
        close   INT DEFAULT 0,
        avrg    INT DEFAULT 0,
        kin     INT DEFAULT 0,
        kout    INT DEFAULT 0,
        net     INT DEFAULT 0,
        balance INT DEFAULT 0,
        INDEX(mon)
    );

    LOAD DATA LOCAL INFILE '${chao}.clean' INTO
    TABLE balance(mon,fri,close,avrg,kin,kout,net);
    " | mysql kts

    echo "
DROP PROCEDURE IF EXISTS sp_mamacd //
CREATE PROCEDURE sp_mamacd() BEGIN
    DECLARE v_i INT DEFAULT 1;
    SET @v_len = 0;
    SELECT max(id) FROM balance INTO @v_len;
    loop_visit: REPEAT
        SELECT sum(net) FROM balance WHERE id<=v_i INTO @sumofnet;
        UPDATE balance SET balance=@sumofnet WHERE id=v_i;
        SET v_i = v_i + 1;
    UNTIL v_i > @v_len END REPEAT;

END //
call sp_mamacd();
    " >> $mps_nbm
    mysql $OPT -t kts <"$mps_nbm"

    fn_echo_succ "TABLE balance done..."
    return $?
}

function fn_wklist()
{
    echo "
    SELECT date,wkday FROM zzlt;
    " |  mysql -N kts  > ${chao}.wkday

    date_prev=NULL
    wkday_prev=6

    while read date wkday; do
        if [ "${date_prev}" != NULL ]; then
            dif=$(( ($(date -d "${date}" +%s) - $(date -d "${date_prev}" +%s))/(24*60*60) ))
        else
            dif=0
        fi
        fn_echo_warn haha: "${wkday}" -lt ${wkday_prev}
        if [ "${wkday}" -lt ${wkday_prev} ] || [ ${dif} -gt 7 ]; then
            wknew=${wkday}
            echo -e -n "${date_prev}\n${date}\t"
        fi
        date_prev=${date}
        wkday_prev=$wkday
    done < ${chao}.wkday > ${chao}.wklist
    fn_echo_succ "save to ${chao}.wklist"

    return $?
}

function fn_money()
{
    usage="
    券商经纪资金一周只更新一次。步骤如下：
    s|sipf      0 downLoad from sina 更新数据 并且 >> sql/money
    n|nets      1 计算叠加的.净流入 >> sql/money.clean
    z|zzlt      2 从同花顺获取数据，更新到表.中证流通.zzlt
    b|bala      3 从money.clean，生成表balance
    r|rzrq      4 更新RZRQ数据
    l|list      5 联合查讯
    u|usage     * 打印Usage
    "
    case $1 in
    s|sipf)
        fn_sipf
        ;;
    n|nets)
        fn_nets
        ;;
    z|zzlt)
        fn_zzlt
        ;;
    w|wklist)
        fn_wklist
        ;;
    r|rzrq)
        fn_rzrq
        ;;
    b|bala)
        fn_bala
        echo
        ;;
    l|listbana)
        fn_listbana
        ;;
    u|*)
        echo "${usage}"
        ;;
    esac

}
function fn_listbana()
{
    fn_echo_warn "
    cat /Export/Table.txt | awk 'BEGIN{sum=0; } { sum+=$3; } END{print sum}' ==> 37.1965万亿  5746.20
    net             当周银证增量
    balance         自2014.4银证增量资金和
    bala_rzrq       rzrq绝对资金
    bala_sum        (银证+rzrq)资金
    LT              流通总市值
    Dif_bala        自2014.4的增量资金
    Dif_LT_55
    "
    echo "
    SELECT b.*,r.net as bala_rzrq,(b.balance+r.net)as bala_sum,z.close as zzltC,
        round(371965*z.close/5746.20,2) as LT,
        round(b.balance+r.net-4234.66)as Dif_bala,
        round((371965*z.close/5746.20-193466.21)/5.5,2) as Dif_LT_55
    FROM balance as b, rzrq as r, zzlt as z
    WHERE b.fri=r.date && b.fri=z.date
    ORDER by fri ${ASC:-DESC} LIMIT ${LIMIT:-40}
    " | mysql ${OPT:--t} kts
}

function fn_fenbi()
{
    code=$1
    date=${2:-${END//-/}}
    #code=399006
    fn_iscode ${code} || fn_isindex ${code}
    xt_ret $? "arg1 not code" || return $?

    [ "${#date}" -eq 8 ]
    xt_ret $? "date format 2015mmdd" || return $?

    sql="SELECT round(datetime/1000000) as dt, TRUNCATE(datetime%1000000/100,0) as time FROM fenbi"
    mysql -N kts <<< "${sql} WHERE code=${code} HAVING dt=${date}" | awk '{print $2}' > /tmp/kts/fenbi.up1

    close=`mysql -N kts <<< "SELECT max(trade) FROM fenbi WHERE code=${code} and datetime>${date}000000"`
    # echo ${close};exit
    grep -v -f /tmp/kts/fenbi.up1 sql/min.table > /tmp/kts/fenbi.up2
    rows=`wc -l < /tmp/kts/fenbi.up2`

    if [ "${rows}" -eq 0 ]; then
        echo rows is 0, exit
        exit
    else
        echo rows: ${rows}
    fi

    awk -v v_code=${code} -v v_date=${date} -v v_close=${close} '{
        printf "%s\t%s%06d\t%.2f\t%d\t%d\n", v_code, v_date,$1*100+55, v_close, 0,0
    }' /tmp/kts/fenbi.up2 > ${buffer}

    echo "
    LOAD DATA LOCAL INFILE '${buffer}' INTO TABLE fenbi(code, datetime, trade, volume, amount)
    " | mysql kts
}

function fn_merge()
{
    [ -f "${1}" ]
    xt_ret $? "${1} not exist" || return $?

    cat ${@} > ${chao}.merge
    xt_ret $? "merge ${@}" || return $?
    PLAIN=
    fn_chao ${chao}.merge
    return $?
}

function fn_zzlt()
{
    echo "
    -- DROP TABLE IF EXISTS zzlt;
    CREATE TABLE IF NOT EXISTS zzlt(
        id      int(4) PRIMARY key AUTO_INCREMENT NOT NULL,
        date    DATE NOT NULL,
        wkday   INT,
        close   DECIMAL(6,2) NOT NULL,
        INDEX(date)
    );"| mysql kts

    maxdate=`mysql -N kts <<< "SELECT max(date) FROM zzlt"`
    fn_echo_succ "maxdate is ${maxdate}"

    if [ "${maxdate}" != NULL ]; then
        iconv -f cp936 -t utf8 /Export/Table.txt | grep -A200 "${maxdate}"  > "${chao}.zzlt"
        xt_ret $? "bad Table.txt" || return $?

        sed -i "/${maxdate}/d" ${chao}.zzlt
        xt_ret $? "" || return $?
    else
        iconv -f cp936 -t utf8 /Export/Table.txt > "${chao}.zzlt"
        fn_echo_warn "first do zzlt"
    fi

    [ -f "${chao}.zzlt" ]
    xt_ret $? "" || return $?

    sed -i -e '/时间/d' -e 's/,/\t/g' -e 's/  */\t/g' \
        -e 's/\t\t/\t/g'\
        -e 's/一/1/g'   \
        -e 's/二/2/g'   \
        -e 's/三/3/g'   \
        -e 's/四/4/g'   \
        -e 's/五/5/g'   \
        -e 's///g'    \
        -e '/^$/d'      ${chao}.zzlt

    fn_echo_succ "content to load:"
    cat ${chao}.zzlt

    echo "
    LOAD DATA LOCAL INFILE '${chao}.zzlt' INTO
    TABLE zzlt(date,wkday,@dummy,@dummy,@dummy,close);
    " | mysql kts

    fn_echo_succ "up zzlt OK"
}

function fn_dig()
{
    if [ ! -f "${chao}.dig" ]; then
        fn_echo_fail "${chao}.dig not exist!"
        exit
    fi

    sed 's/[036][0-9][0-9][0-9][0-9][0-9]/\n&\n/g' ${chao}.dig | grep '^[036][0-9][0-9][0-9][0-9][0-9]' | \
        grep .codelist -f - | \
        tee ${chao}.drip
    sed -i 's/$/\r/' ${chao}.drip
    fn_echo_succ "dig succ to ${chao}.drip"
    fn_chao ${chao}.drip
}


function fn_market()
{
    url0="http://data.eastmoney.com/Notice/Noticelist.aspx?type=0&market=${market}&"

    w3m -cols 1000 -dump "${url0}date=${date}" > ${temp}
    pages=`cat ${temp} | grep '下一页' | sed 's/下一页.*//g' | awk '{print $NF}'`
    # echo "${url0}date=${date}"
    NL="\t" fn_echo_warn "market=${market}&date=${date}&pages=$pages"

    local i
    for (( i=2; i<=${pages:-0}; i+=1 )); do
        echo -n " $i"
        # echo "market=${market}&date=${date}&page=$i ..."
        url="${url0}date=${date}&page=$i"
        w3m -cols 1000 -dump "${url}" >> ${temp}
    done
    echo

    return $?
}

function fn_notice0()
{
    local market=
    for market in sh_a sz_a zxb cyb sh_b sz_b; do
        temp=${chao}.notice.${market}
        fn_market
       #grep '更多公告股吧研报' ${temp} | grep '^[036]' >> ${notice}/${date}
        grep '更多公告股吧研报' ${temp} >> ${notice}/${date}
    done

    fn_echo_succ "@succ ${notice}/${date}"

    return $?
}

function fn_notice()
{
    notice=${chao}.notice
    ln -sfT /opt/notice ${chao}.notice

    start=`ls -r /opt/notice | head -1`

    hhmm=`date +%H%M | sed 's/^0//'`;
    [ "${hhmm}" -gt 1530 ] && news=1 || news=0
    newest=`date --date="${news} days" +'%F'`

    NUM=${NUM:-${1:-7}}
    fn_echo_succ "NUM=${NUM} will be updated!"

    local i
    for (( i=0; i<${NUM}; i+=1 )); do
        date=`date --date="${start} ${i} days" +'%F'`
        #echo ${date};continue
        >${notice}/${date}
        fn_notice0
        [ "${date}" = "${newest}" ] && break
    done
}

function fn_seat_rank0()
{
#  1       2   3   4                          5             6    7        8<不是每个营业部都有此证券公司代号>
# 80154611,1,321,222,财信发展|劲胜精密|万润科技,4444003271.91,广东,80000073,
#  9      10              11            12, 13
# 440000,148,9472124712.645,5028121440.735,华泰证券股份有限公司深圳益田路荣超商务中心证券营业部,000838.SZ|300083.SZ|002654.SZ
    cat ${1} | tr -d '\n' | sed -e 's/^(\["//' -e 's/"\])$//' | sed -e 's/","/\n/g' -e 's/分公司/分部/g' | \
        awk -v mon=${i:-6} -F',' '{printf "%s\t%.2f\t%s\t%s\t%s\t%s\n", $1,$11/mon,$3,$4,$10,$13}'   |\
        sed -e 's/证券.*公司//g' -e 's/中国//g' -e 's/国泰君安/国君/g' -e 's/申万宏源/申万/g' | \
        sed "s/^/$i\t/"

    return $?
}

#fn_seat_rank0 ${chao}.seat.raw;exit

function fn_seat_rank()
{
    function fn_url()
    {
        case $1 in
        1|3|6)
            echo "http://datainterface.eastmoney.com/EM_DataCenter/JS.aspx?type=LHB&sty=YYTJ&stat=${1}&sr=0&st=1&p=1&ps=30" ;;
        *)
            fn_echo_fail "stat should be 1|3|6"; exit ;;
        esac
    }

    > ${chao}.seat.rip

    local i=
    for i in 1 3 6; do
        url=`fn_url $i`
        > ${chao}.seat.raw
        w3m -cols 1000 -dump "${url}" > ${chao}.seat.raw
        fn_seat_rank0 ${chao}.seat.raw >> ${chao}.seat.rip
    done

    echo "
    TRUNCATE seat_rank;
    LOAD DATA LOCAL INFILE '$chao.seat.rip' INTO TABLE seat_rank;
    " | mysql kts

    return $?
}

function fn_seat_detail0()
{
    function fn_url() {
        url="http://datainterface.eastmoney.com/EM_DataCenter/JS.aspx?type=LHB&sty=YYHSIU&code=${seat}&p=${page}&ps=50"
    }

    #                    $1            $2       $3      $4       $5        $6
    # 当日涨幅偏离值达7%的证券,2831186.41,002088.SZ,27029003.02,鲁阳节能,2016-02-29

    > ${chao}.seat.rip
    local i
    for (( i=1; i<12; i+=1 )); do
        fn_echo_succ "do page=$i of seat:$1"
        seat=$1 page=$i fn_url
        w3m -dump "${url}" > ${chao}.seat.raw
        xt_ret $? "" || return $?
        cat ${chao}.seat.raw | tr -d '\n' | sed -e 's/^(\["//' -e 's/"\])$//' | sed -e 's/","/\n/g' -e 's/\.S.//g' | \
            awk -v seat=$1 -F',' '{printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\n", seat,$6,$3,$4,$2,$5,$1}' | \
            sed 's/，.*$//g' >> ${chao}.seat.rip

        min_date=`tail -1 ${chao}.seat.rip | awk '{print $2}'`
        fn_issqltrue "'$min_date'<='${sta_date}'" && break
    done

    fn_echo_succ "done of seat:$1"

    echo "
    CREATE TEMPORARY TABLE seat_detail0 LIKE seat_detail;
    CREATE           TABLE IF NOT EXISTS seat_zhao LIKE seat_detail;
    LOAD DATA LOCAL INFILE '${chao}.seat.rip' INTO TABLE seat_detail0;
    DELETE FROM seat_detail0 WHERE date<='${sta_date}';
    INSERT INTO ${stbl:-seat_detail} SELECT * FROM seat_detail0;
    " | mysql kts
    xt_ret $? "" || return $?
}

function fn_seat_zhao()
{
    seats=(80033815 80422837 80161167)
    d80=`fn_get_date 20`

    local i=
    for (( i=0; i<${#seats[@]}; i++ )); do
        seat=${seats[$i]}
        sql_date="SELECT max(date) FROM ${stbl:-seat_zhao} WHERE seat=${seat}"
        sta_date=`mysql -N kts <<<"${sql_date}"`
        if [ -z "${sta_date/NULL/}" ]; then
            fn_echo_warn "replace null-date of seat[${i}]:$seat with d80:${d80}"
            sta_date=$d80
        fi
        fn_echo_warn "start seat[${i}]:$seat"
        stbl=seat_zhao fn_seat_detail0 ${seat}
    done
    
    return $?
}

function fn_seat_detail()
{
    sqls="
    SELECT code FROM (SELECT code, name, count(code) as num, sum(month) as mon, sum(amount) as eWan
        FROM seat_rank GROUP by code HAVING num>1 ORDER by eWan DESC ) as t
    "

    seats=(`mysql -N kts <<<"${sqls}"`)

    #echo ${codes}
    d80=`fn_get_date 80`

    local i=
    for (( i=0; i<${#seats[@]}; i++ )); do
        seat=${seats[$i]}
        sql_date="SELECT max(date) FROM ${stbl:-seat_detail} WHERE seat=${seat}"
        sta_date=`mysql -N kts <<<"${sql_date}"`
        if [ -z "${sta_date/NULL/}" ]; then
            fn_echo_warn "replace null-date of seat[${i}]:$seat with d80:${d80}"
            sta_date=$d80
        fi
        fn_echo_warn "start seat[${i}]:$seat"
        fn_seat_detail0 ${seat}
    done
    return $?
}

function fn_bigbid()
{
    # keywords：3月 大宗交易
    # link获取：点下一页，从firebug获取

    PREV5=`fn_get_date ${NUM:-8}`

    url="http://data.eastmoney.com/dzjy/default.html"
    w3m -dump "${url}" > ${cache}

    if [ ${PREV5%-*} != ${END%-*} ]; then
        fn_echo_warn dif mon ${PREV5%-*} ${END%-*}
        mon=${PREV5%-*}
        url=http://data.eastmoney.com/dzjy/${mon//-/}.html
        w3m -dump "${url}" >> ${cache}
    fi

    grep -B10000 "${PREV5}" ${cache} > ${chao}.dig

    sed 's/[036][0-9][0-9][0-9][0-9][0-9]/\n&\n/g' ${chao}.dig | \
        grep '^[036][0-9][0-9][0-9][0-9][0-9]' | sort -u > ${chao}.dzjy

    fn_echo_succ "up bigbid succ@${END}"
}

function fn_xbb()
{
    if [ "${1}" = l ]; then
        sqls="
        SELECT x.*, ${nmcYi}, c.name FROM xbb as x, cap as c WHERE x.code=c.code
        ORDER by ${FIELD:-xbb} ${ASC:-DESC} LIMIT ${LIMIT:-40}
        "
        mysql ${OPT:--t} kts <<<"${sqls}"; exit
    fi

    d30=`END=$PREV fn_get_date 30`
    d37=`END=$PREV fn_get_date 37`
    d44=`END=$PREV fn_get_date 44`
    d50=`END=$PREV fn_get_date 50`
    sqls="
    TRUNCATE yist;
    $DROP xbb;
    $CREATE xbb (
    date        date,
    code        INT(6) ZEROFILL NOT NULL DEFAULT 0,
    num         int,
    xbb         DECIMAL(6,2) NOT NULL DEFAULT 0,
    INDEX(code)
    );

    INSERT INTO yist(code) SELECT DISTINCT code FROM day WHERE date='${END}' && code<888888;

    INSERT INTO xbb
    SELECT '${PREV}', code, count(code) as num, max(amount)/(sum(amount)/count(code)) as prop
    FROM day as d WHERE date>='${d30}' && date<='${PREV}' GROUP by code HAVING num>25;
    DELETE FROM yist WHERE code in (SELECT code FROM xbb);

    INSERT INTO xbb
    SELECT '${PREV}', d.code,count(d.code) as num, max(amount)/(sum(amount)/count(d.code)) as prop
    FROM day as d,yist as y
    WHERE d.code=y.code && date>='${d37}' && date<='${PREV}' GROUP by code HAVING num>25;
    DELETE FROM yist WHERE code in (SELECT code FROM xbb);

    INSERT INTO xbb
    SELECT '${PREV}', d.code,count(d.code) as num, max(amount)/(sum(amount)/count(d.code)) as prop
    FROM day as d,yist as y
    WHERE d.code=y.code && date>='${d44}' && date<='${PREV}' GROUP by code HAVING num>25;
    DELETE FROM yist WHERE code in (SELECT code FROM xbb);

    INSERT INTO xbb
    SELECT '${PREV}', d.code,count(d.code) as num, max(amount)/(sum(amount)/count(d.code)) as prop
    FROM day as d,yist as y
    WHERE d.code=y.code && date>='${d50}' && date<='${PREV}' GROUP by code HAVING num>20;
    "
    mysql ${OPT:--t} kts <<<"${sqls}"
    fn_echo_succ "Update xbb db @${END} succ!"
}

function fn_hwork()
{
    argv=${1:-e}
    cd /root/bin/stk/ 

    [ -e '/dev/pts/0' ] && STDOUT='/dev/pts/0' || STDOUT='/tmp/kts/chao.hwork'

    {
      # SCREENER lohi   $argv
        SCREENER matov5 $argv && \
        SCREENER ma1020 $argv
        SCREENER ma120  $argv
        up chk_day                  # 检查是否有数据缺失
        up bigbid                   # 8日大宗交易
        nb_index up                 # 指数更新以用于ma5告警
        fn_bell
    } >& ${STDOUT} 
}

function fn_chk_day()
{
    columns="code,date,yesc,open,high,low,close,volume,amount"

    case $1 in
    r)
        t1500=`fn_get_time`
        [ "${t1500//:/}" -ge 150000 ]
        xt_ret $? "Error: timestamp@${t1500}" || return $?

        echo "
        DELETE from day WHERE date='${END}';
        INSERT INTO day SELECT ${columns} FROM dorat WHERE date='${END}' && time='${t1500}';
        " | mysql kts
        ;;
    l)
        grep -v -f ${chao}.chk.less ${chao}.chk.more > /tmp/kts/chao.chk
        num=`wc -l < /tmp/kts/chao.chk`
        fn_echo_succ "There r ${num} lines: /tmp/kts/chao.chk"
        ;;
    *)
        END=`fn_get_date $1`
        # dde
        stamp_T=`mysql -N kts <<< "SELECT DISTINCT time FROM dde WHERE date='${END}'"`
        [ "${stamp_T}" = "15:00:00" ]
        xt_ret $? "DDE stamp error@${stamp_T}" || return $?
        fn_echo_succ "DDE stamp succ@${stamp_T}"

        # day AND dorat
        t1500=`fn_get_time`
        [ "${t1500//:/}" -ge 150000 ]
        xt_ret $? "Error: timestamp@${t1500}" || return $?

        sqls="SELECT DISTINCT code FROM dorat WHERE date='$END' and time='${t1500}' && code < 888888"
        mysql -N kts <<< "${sqls}" > ${chao}.chk.dorat

        sqls="SELECT DISTINCT code FROM day WHERE date='$END' and code < 888888"
        mysql -N kts <<< "${sqls}" > ${chao}.chk.day

        sqls="SELECT DISTINCT code FROM dde WHERE date='$END' and code < 888888"
        mysql -N kts <<< "${sqls}" > ${chao}.chk.dde
        
        dor=`wc -l < ${chao}.chk.dorat` 
        day=`wc -l < ${chao}.chk.day` 
        dde=`wc -l < ${chao}.chk.dde` 

        fn_echo_succ "${END} dor:$dor day:$day dde:$dde"

        [ "${dor}" -ge "${dde}" ] && [ "${day}" -ge "${dde}" ]
        xt_ret $? "something wrong"

        [ "${dor}" -eq "${day}" ] && exit

        if [ "${dor}" -gt "${day}" ]; then
            cp ${chao}.chk.dorat ${chao}.chk.more
            cp ${chao}.chk.day   ${chao}.chk.less
        elif [ "${day}" -gt "${dor}" ]; then
            cp ${chao}.chk.dorat ${chao}.chk.less
            cp ${chao}.chk.day   ${chao}.chk.more
        fi

        fn_chk_day l
        fn_echo_warn "
        _to_del200_: DELETE FROM day WHERE  code>=200000 && code < 300000;
        _to_repare_: up chk_day r"
        exit
        ;;
    esac
}

function fn_holiday()
{
    echo "
    $DROP holiday;
    $CREATE holiday (
        date        date
    );
    INSERT INTO holiday(date) values
        ('2016-06-09'),
        ('2016-06-10'),
        ('2038-01-01');
    " | mysql kts
    
    return $?
}

function fn_xRD0()
{
    sed -e "s/tag0/${1:0:1}/" \
        -e "s/tag1/${1:1:1}/" \
        -e "s/tag2/${1:2:1}/" \
        -e "s/tag3/${1:3:1}/" \
        -e "s/tag4/${1:4:1}/" \
        -e "s/tag5/${1:5:1}/" .src/xRD.q > /10jqka/xRD.q
    xt_ret $? "" || return $?

    > /Export/Table.txt
    fn_bell xRD
    timeout 8 nc -l 2911
    xt_ret $? "xRD@${1} fail!" || return $?

    # iconv & add yesc
    iconv -f cp936 -t utf8 /Export/Table.txt    |
    tail -241                                   |
    sed -e '/时间/d'                            \
        -e 's/[,一二三四五]//g'                 \
        -e 's/  */\t/g'                         \
        -e 's/\t\t/\t/g'                        \
        -e 's///g'                            \
        -e '/^$/d'                              |
    awk -v code=$1 '{
        printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n",
        code,$1, yesc,$2,$3,$4,$5, $8/10000,$9/10000;
        yesc=$5
    }' > /tmp/kts/chao.xRD

    # re-fresh data
    xEND=`tail -1 /tmp/kts/chao.xRD | awk '{print $2}'`

    if [ "${xEND}" != "${END}" ]; then
        sqls="SELECT max(date) FROM day WHERE code=$1"
        rEND=`mysql -N kts <<< "${sqls}"`
        [ "${xEND}" = ${rEND} ]
        xt_ret $? "xRD@${1} data stuck!" || return $?
        fn_echo_warn "halt guy@${1}"
    fi

    echo "
    DELETE FROM day WHERE code=$1;
    LOAD DATA LOCAL INFILE '/tmp/kts/chao.xRD' INTO TABLE day;
    " | mysql kts
    xt_ret $? "" || return $?

    fn_echo_succ "update db@${1} succ!"
}

function fn_autoxRD()
{
    if [ "${1}" = e ]; then
        mysql -N kts <<< "SELECT date FROM xRDdate ORDER by date DESC LIMIT 5" > ${chao}.autoxRD
        SELECT list_date | grep --color -f ${chao}.autoxRD
        exit
    elif [ "${1}" = xRD ]; then
        fn_xRDdb
        xt_ret $? "" || return $?
    fi

    cd ~/bin/stk
    fn_iscode $1 && { fn_xRD0 $1; exit 0 ;}

    [ "${date_T//:/}" -gt 092500 ]
    xt_ret $? "Too early @${date_T}" || return $?

    # 指定iEND时，补充过往除权
    [ "${iEND:-1}" -ne 1 ] && date_F=${END}
    fn_echo_succ  "xRD @${date_F}..."
    sqls="SELECT code FROM xRD WHERE song_ratio>0 AND date='${date_F}' ORDER by date ASC"
    xfile=${chao}.xlist
    mysql -N kts <<< "${sqls}" > ${chao}.xlist

    local i=
    for i in `cat ${xfile}`; do
        fn_iscode ${i}
        xt_ret $? "bad@[${i}]" || continue
        fn_xRD0 ${i}
        xt_ret $? "" || return $?
    done

    echo "
    INSERT INTO xRDdate (date) VALUES('${date_F}');
    " | mysql kts
    xt_ret $? "mysql" || return $?

  # SCREENER ma1020 2
  # xt_ret $? "" || return $?
}

function fn_tp10()
{
    # tp10由3部分组成
    # 1 iwencai top10       , 下载网上粗制版本
    # 2 up cap              , 更新每日新股
    # 3 up tp10             , 手动更正H股杂乱数据
    tp10_rip='/tmp/kts/tp10'
    sed 's/  */\t/g' .src/top10R.list > ${tp10_rip}
    xt_ret $? "" || return $?

    echo "
    DROP TABLE IF EXISTS top10R;
    CREATE TABLE top10R LIKE top10;
    LOAD DATA LOCAL INFILE '${tp10_rip}' INTO TABLE top10R(code,name,top10);
    DELETE t.* FROM top10 t, top10R r WHERE t.code=r.code;
    INSERT INTO top10 SELECT * FROM top10R;
    UPDATE top10 SET top10=.85 WHERE top10>=.85;
    " | mysql kts
    xt_ret $? "" || return $?

    fn_echo_succ "Re-fresh top10 succ!"
}

function fn_am10o_task()
{
    SELECT ma120 20             # 好趋势个股
    fn_bell tweet.wav tweet.wav # 创业板vs.HS300 db201, 每周要重启一次按键精灵防阻塞
    return $?
}

function fn_main()
{
    cmdlist=(
    # fixed sequence
    "cap [--keep.FIN -k]                # (max(中国石油)=2万亿 sum(nmc)=20万亿)"
    "redo_hexun_day_fr_min              # 利用已有分线，重做大盘日线"
    "hexun_day                          # 大盘日线数据 4:00:00 PM"
    "del_hexun_day                      # 删除大盘日线，防止冲突"
    "redo_hexun_day                     # 重做大盘日线数据"
    # --------------------              ABOVE IS FIXED SEQUENCE --------------------
    "xRDdb [--keep.PWR -k]              # --- 使用当前除权数据 --keep.PWR"
    "file_to_table {code...|file}       # 写file到表{TBL:-zxg}，并......ZXG.BLK...."
    "table_to_file {table:-chao}        # 添加表{table:-chao}到/tmp/zxg"
    # --------------------              ABOVE IS FIXED SEQUENCE --------------------
    "copy_table_2_table src dst         # --- 使用 1 1 做为代号"
    "add_yesclose                       # 为yahoo.指南针数据添加yesclose"
    "load_directory                     # load文件夹${znzday}到表day"
    "dump_day_2_tmp START END           # 导出日线到${daydump} \${START:-\$END} \${END:-\${END}}"
    #checkcode file                     # "
    #html                               # flush YIST=.soptter.xxx soptter output into html"
    #trs_min_2_day                      # 最后一笔分线转日线"
    #xbb [l]                            # 生成PREV30成交额峰值测算，加参数l时list数据日期"
    #ma20f15                            # "
    #fenbi  code 2015mmdd               # "
    #money                              # -----资金分析，拟合出增量资金与指数的5倍关系-----"
    #merge  file...                     # 合并多个文件到chao.merge"
    "db201                              # DB wolf from DDE"
    "day    code                        # DL 1year data from znz"
    "ipo                                # DL ipo codes from east"
    "lhb                                # 龙虎榜"
    "dorat  [loop]                      # 量比数据，loop when run@crontab"
    "am925                              # load日线数据FROM.10jqka"
    "am925_bell                         # 触发按键精灵"
    "am10o_task                         # "
    "autoxRD                            # xRD_FROM_10jqka"
    "holiday                            # 检查是否法定假日"
    "morningcall                        # "
    "trace                              # "
    "tp10                               # __LOAD__ top10R.list"
    "dig                                # 从<chao.dig>输入，并输出到<dig.txt>"
    "notice NUM                         # 至多NUM天，更新公告 /opt/notice/"
    "seat_rank                          # 总排名"
    "seat_detail                        # top-30-seat所操作的股票"
    "seat_zhao                          # 赵一万"
    "bigbid                             # 大宗交易"
    "hwork                              # 每日功课"
    "chk_rank [iF5]                     # 有新进成员，[up dorat]定期调用"
    "chk_day                            # day vs. dde"
    )

    # 存储过程函数文件的最后5行都是注释
    cd $cdpath
    head -n -5 $mps_org > $mps_god

    fn_set_END
    fn_execute "$@"
}

fn_main "$@"

