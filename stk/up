#! /bin/bash

. `dirname ${0}`/'dbank' || { echo "dbank err" && exit; }
. /etc/common.rc

#
# ------  common part over -----------
#

function fn_cap()
{
    if [ "$1" = "--keep.FIN" ] || [ "$1" = "-k" ]; then
        echo "keep $p_bin/full.FIN"
    else
        read -p "
        Make sure U have down full.FIN?
        cp /dzh2/Download/FIN/full.FIN $p_bin"
        cp /dzh2/Download/FIN/full.FIN $p_bin
        xt_ret $? "" || return $?
    fi

    $workdir/sina
    xt_ret $? "sina fail" || return $?

    lines=`cat $sn_cap_nmc | wc -l`
    [ $lines -gt 2000 ] && [ $lines -lt 3000 ]
    xt_ret $? "$sn_cap_nmc lines $lines not in [2000,3000]" || return $?

    echo "
    DROP TABLE IF EXISTS cap;
    CREATE TABLE cap (
        id      int(4) ZEROFILL PRIMARY key AUTO_INCREMENT NOT NULL,
        code    INT(6)  ZEROFILL,
        date    DATE NOT NULL,
        close   DECIMAL(6,2) NOT NULL,
        cap     INT(14),
        nmc     INT(14),
        shares  DECIMAL(12,2) DEFAULT 0,
        name    CHAR(16),
        INDEX(code,date)
    );

    LOAD DATA LOCAL INFILE '$sn_cap_nmc' INTO 
    TABLE cap(code, date, close, cap, nmc, name);
    " | mysql -u root kts

    echo "
    INFILE '$sn_cap_nmc'
    update shares from dzh2 full.FIN...
    UPDATE cap SET nmc=close*shares WHERE nmc/close<shares;
    为兼容旧代码，最后的shares=nmc/close（只更新nmc，不更新shares）
    "

    # 修正 nmc & shares
    cd ${workdir}/bin
    ./fin > /dev/shm/fin
    mysql kts < /dev/shm/fin

    echo "
    UPDATE cap SET nmc=close*shares WHERE nmc/close<shares;
    " | mysql -u root kts

    # update .codelist
    cd ${workdir}
    mysql -N -B kts<<<"SELECT code,name FROM cap order by code asc;" > .codelist


    if [ `wc -l<.codelist` -gt 3000 ]; then
        fn_echo_fail "more than 3000 codes, please check it!"
        exit 1
    fi

    ./dbank 1
}

function fn_add_yesclose()
{
    local p_znz="$warehs/znz_day"
    local p_sql="$warehs/mysql"
    local day_del='2013-10-08'

    mkdir -p $p_sql
    cd $p_znz

    local i=
    for i in *; do
        sort -k2 -g $i | awk '{
            printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n" ,
            $1,$2, yesc, $3, $4, $5, $6, $7, $8;
            yesc=$6
        }' | sed "/$day_del/d" > $p_sql/$i
    done
}

# min/2013-09-30/14.59.01
#         TRADE           昨收    今开    最高 最低
# 000002  9.13    0.77    9.06    9.08    9.18 9.03 633756.30   576146571
#         $2                      $5      $6   $7
#
# day/000002
# 日期        开盘价  最高价  最低价  收盘价      成交量（万股）  成交额（万元）
# 2013-09-30  9.08    9.18    9.03    9.13        6337.56     57614.66

function fn_hexun_day()
{
    {
        echo "    get flock 19..."
        flock 19
        echo "    got flock 19..."
        fn_hexun_day0
        xt_ret $? "fail: day0" || return $?
    } 19<>'/dev/shm/up2'
}

function fn_hexun_day0()
{
    mkdir -p ${hx_dayclose%/*}

    unarm_close_forbid=true \
    fn_timestamp_market
    xt_ret $? "${FUNCNAME}" || return $?

    echo "    add hexun_day ${DATE}..."

    if [ "${FINA:-0}" -eq 1 ] ; then
        ./sina 
        xt_ret $? "sina" || return $?
        cp $sn_ripetxt $hx_dayclose
    else
        $workdir/hexun || {
            echo "try again..."
            sleep 2; $workdir/hexun || { fn_echo_fail "try 2 times fail"; return 1 ; }
        }

        awk '{
            printf "%06d\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n",
                      $1, $13, $4, $5,  $6,  $7,  $2, ($8/100), ($9/10000)
        }'  $hx_ripetxt > $hx_dayclose
    fi


    $W3M -dump ${url_sh000001} | awk -F',' '{
        printf "%06d\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\n",
            '900001', $31, $3, $2, $5, $6, $4, ($9/100), ($10/10000);
    }' >> $hx_dayclose
    xt_ret $? "NETWORK" || return $?

    hx_lines=`cat $hx_dayclose | wc -l`
    if [ $hx_lines -lt ${baselines:=1300} ]; then
        wall <<< "up:${BASH_LINENO[0]} $hx_lines less than ${baselines} lines" 
        return 1
    fi

    grep -q 900001 $hx_dayclose || { echo "Error: 900001" && return 1 ;}

    mysql<<<"INSERT INTO kts.stamp_day values(DEFAULT, '$OPENDATE', '$OPENTIME')"
    xt_ret $? "" || return $?

    p_hx_day="$warehs/hx_day"
    mkdir -p $p_hx_day
    cp $hx_dayclose $p_hx_day/$DATE

    echo "
    DELETE FROM day WHERE date='${DATE}';
    LOAD DATA LOCAL INFILE '${hx_dayclose}' INTO TABLE day;
    " | mysql kts
}

function fn_trace()
{
    file='/root/bin/stk/sql/trace'
    colA="date,curr_asset,frozen"   # ,sh,cyb"
    colA="A.${colA//,/,A.}"

    echo "
        DROP TABLE IF EXISTS trace;
        CREATE TABLE trace (
            id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
            date        date,
            curr_asset  DECIMAL(9,1) DEFAULT 0,
            frozen      DECIMAL(9,1) DEFAULT 0,
            sh          DECIMAL(9,2) DEFAULT 0,
            cyb         DECIMAL(9,2) DEFAULT 0
        );

        LOAD DATA LOCAL INFILE '${file}' INTO TABLE trace(date,curr_asset,frozen,sh,cyb);

           SELECT ${colA}, 
               (A.curr_asset-B.curr_asset) as earning, 
               round(100*(A.curr_asset-B.curr_asset)/B.curr_asset, 2) as RoE,
               round(100*(A.curr_asset-B.curr_asset)/(B.curr_asset-B.frozen), 2) as RoE_real,
            -- (A.sh-B.sh) as earning_sh, 
            -- (A.cyb-B.cyb) as earning_cyb, 
               round(100*(A.sh-B.sh)/B.sh, 2) as RoE_sh,
               round(100*(A.cyb-B.cyb)/B.cyb, 2) as RoE_cyb
               FROM trace A INNER JOIN 
                    trace B on(A.id=B.id+1) GROUP BY A.id;

        -- SELECT *,
        --     round(100*(curr_asset-prev_asset)/prev_asset, 2) as RoE,
        --     round(100*(curr_asset-prev_asset)/(prev_asset-frozen), 2) as RoE_real
        --     FROM trace;
    " | mysql -t kts
    
    return $?
}

function fn_power()
{
    file0='/root/bin/stk/.soptter.power10'
    file1='/tmp/kts/power10'
    colA="code,quarter,power10,jigou,jgnewin,sholders,name"
    colA="A.${colA//,/,A.}"

    grep -v '^#' ${file0} > ${file1}
    echo "
        DROP TABLE IF EXISTS power10;
        CREATE TABLE power10 (
            id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
            quarter     INT DEFAULT 0,
            power10     DECIMAL(6,2) DEFAULT 0,
            jigou       INT DEFAULT 0,
            jgnewin     INT DEFAULT 0,
            code        INT(6)  ZEROFILL,
            sholders    INT DEFAULT 0,
            name        CHAR(16),
            INDEX(code)
        );

        LOAD DATA LOCAL INFILE '${file1}' INTO TABLE 
            power10(code,name,quarter,power10,jigou,jgnewin,sholders);
        SELECT ${colA} FROM power10 as A;
    " | mysql -t kts
    
    return $?
}

function fn_del_hexun_day()
{
    unarm_close_forbid=true \
    is_del_routine=true \
    fn_timestamp_market
    xt_ret $? "${FUNCNAME}" || return $?

    echo "
    del hexun_day ${DATE}...
    "

    mysql<<<"DELETE FROM kts.day WHERE date = '${OPENDATE}';"
    xt_ret $? "${FUNCNAME}" || return $?
}

function fn_redo_hexun_day()
{
    fn_hexun_day
    xt_ret $? "fail: day" || return $?

    sql="SELECT ${RISE} as rise FROM day as d WHERE date='${OPENDATE}' ORDER by rise DESC LIMIT 1"
    maxrise=`mysql kts -N <<<"${sql}"`
    if [ "${maxrise%%.*}" -gt 10 ]; then
        # 修正yesc数据
        # iPREV=`END=${OPENDATE} fn_get_prev`
        # echo "
        # UPDATE day as dd,(SELECT * FROM day WHERE date='${iPREV}') as yy SET dd.yesc=yy.close WHERE dd.code=yy.code && dd.date='${OPENDATE}'
        # " | mysql kts
        fn_echo_warn "Bad yesc"
        fn_bell "msg.wav msg.wav"
    fi

    if [ "$?" -eq 0 ]; then
        echo "    redo hexun_day succ ^_^ @`date +%T`
        "
    else
        echo "    redo hexun_day fail #_#
        "
    fi
    return $RET
}

function fn_load_directory()
{
    local tbl_name='day'
    local f_sql="$warehs/znz.xRD"
    # 做成一个大文件会快得多
    cd ${znzday}
    cat * > $f_sql
    echo "
    LOAD DATA LOCAL INFILE '$f_sql' INTO TABLE $tbl_name
    " | mysql kts

    return $?
}

function fn_file_to_table_quick()
{
    f_yist='/tmp/kts/yist'
    cat ${YIST}|awk '/^[036]/{print $1}' > $f_yist
    echo "
    DROP TABLE IF EXISTS yist;
    CREATE TABLE yist (
        id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
        code        INT(6) ZEROFILL NOT NULL DEFAULT 0
    );
    LOAD DATA LOCAL INFILE '$f_yist' INTO TABLE yist(code);
    " | mysql kts
}

function fn_file_to_table()
{
    if [ -f "${1}" ]; then
        [ ! -s "${1}" ] && fn_echo_fail "Error: file ${$1} is empty" && exit 1
        lst=(`awk '/^[036]/{print $1}' ${*}`)
        file_fr="from $1"
    elif [ -n "${1}" ]; then
        lst=(${@})
    else
        fn_echo_fail "Usage: file_to_table {file|code...}" && exit 1
    fi

    echo "
        DROP TABLE IF EXISTS ${TBL:=zxg};
        CREATE TABLE ${TBL} (
            id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
            code        INT(6) ZEROFILL NOT NULL DEFAULT 0
        );
        INSERT INTO ${TBL} (code) VALUES
        `sed -e 's/^/(/' -e 's/ /),(/g' -e 's/$/);/' <<< "${lst[@]}"` 
    " > ${sql_temp}

    mysql kts < ${sql_temp}
    xt_ret $? "${FUNCNAME}" || return $?

    return 0    # no dzh 自选股.BLK TEMPORARY

    # D:\dzh2\USERDATA\block
    # 每个自选股都有自己的独特代码，现以8为实现
    # Linux中的vim ga 不是很准确的，不能完全解码uni-code，到xp中就OK了。
    HEAD="\xa6\x00\x51\xff\x01"     # 带时间排序功能，不带时间: HEAD="\xa5\x00Q\xff"
    DELI="\x00\x20\x66\x01"         # 不带时间: DELI="\x00\x00\x00\x00"

    f_zxg='/dzh2/USERDATA/block/自选股.BLK'
    test -f ${f_zxg}
    xt_ret $? "${f_zxg} not exist" || exit 1

    {
    echo -n -e $HEAD
    local i=
    local index=0
    for i in ${lst[@]}; do
        case $i in
        [67]*)
            echo -n SH$i
            ;;
        [03]*)
            echo -n SZ$i
            ;;
        *)
            fn_echo_fail "    skip invalide code $i" > /dev/stderr && continue # 上面的数据库添加时没有做检查
            ;;
        esac
        TIME="${DELI}\x"$index"\x7c\xfa\x54"  # Byte1是秒数计时，可用于100个排序
        echo -n -e $TIME
        let index++
    done ;
    echo
    } > ${f_zxg}

    echo "    add ${#lst[@]} code ${file_fr} to ${TBL} over." > /dev/stderr
}

function fn_table_to_file()
{
    mysql -N -B kts <<< "SELECT code FROM ${1:-chao} ORDER by code asc;" > /tmp/zxg
    echo "    add `wc -l /tmp/zxg` code to /tmp/zxg over."
}

function fn_up_tbl_xRD()
{
    if [ "$1" = "--keep.PWR" ] || [ "$1" = "-k" ]; then
        echo "keep $p_bin/full.PWR"
    else
        echo "cp /dzh2/Download/PWR/full.PWR $p_bin"
        cp /dzh2/Download/PWR/full.PWR $p_bin
        xt_ret $? "" || return $?
    fi

    [ ! -f "$p_bin/xRD" ] && echo "xRD not exist" && exit
    cd $p_bin
    ./xRD | sort -r -k2 > $p_bin/xRD.list

    echo "
    DROP TABLE IF EXISTS xRD;
    CREATE TABLE xRD (
        code        INT(6)  ZEROFILL,
        date        DATE NOT NULL,
        song_ratio  DECIMAL(8,5) NOT NULL,
        pei_ratio   DECIMAL(8,5) NOT NULL,
        pei_price   DECIMAL(8,5) NOT NULL,
        div_ratio   DECIMAL(8,5) NOT NULL,
        INDEX(code,date)
    );

    LOAD DATA LOCAL INFILE '$p_bin/xRD.list' INTO TABLE xRD;
    " | mysql -u root kts


    if [ "$?" -eq 0 ] ; then
        echo "Update TABLE xRD SUCCESS" && return 0
    else
        echo "Update TABLE xRD FAILURE" && return 1
    fi
}

function fn_dump_day_2_tmp()
{
    # 对 /tmp 有写权限，其它的则需要设置
    chmod 777 ${daydump%/*}
    rm -f ${daydump}
    echo "
    SELECT * FROM day WHERE date>='${1:-$END}' and date<='${2:-$END}' INTO OUTFILE '${daydump}';
    " | mysql kts
}

function fn_trs_min_2_day()
{
    # 指南针数据是经过除权的数据，每次使用znz后要记住除权时间.

    [ -z "$1" ] && echo "Usage: $FUNCNAME date" && exit
    DATE=2013-12-12

    # SELECT code,date,yesc,open,high,low,close,volume,amount
    # SELECT code,date,open,high,low,close,volume,amount
    echo "
    SELECT code,date,yesc,open,high,low,trade,volume/100,amount/10000
        FROM min WHERE date='$DATE' and time='15:09:00';
	" | mysql -N kts > $m2d_temp

    ## LOAD时数据自动会进行四舍5入
    echo "
    LOAD DATA LOCAL INFILE '$m2d_temp' INTO TABLE day
	" | mysql kts

    return 0
}

function fn_redo_hexun_day_fr_min()
{
    #
    echo "    redo hexun_day fr min..."

    DATE=`mysql -N kts <<< "SELECT date FROM stamp_min WHERE id = (SELECT max(id) FROM stamp_min);"`
    TIME=`mysql -N kts <<< "SELECT time FROM stamp_min WHERE id = (SELECT max(id) FROM stamp_min);"`

    OPENDATE=`$W3M -dump ${url_sh000001} |awk -F',' '{print $(NF-2)}'`

    [ -z "$OPENDATE" ] && fn_echo_fail "    FINA UNREACHABLE!" && return 1
    [ "$DATE" != "$OPENDATE" ] && echo "Error: market is close" && return 1


    fn_del_hexun_day
    xt_ret $? "del error" || return $?

    echo "
    SELECT code,date,yesc,open,high,low,trade,volume/100,amount/10000
        FROM min WHERE date='$DATE' and time='${TIME}';
	" | mysql -N kts > $m2d_temp
    xt_ret $? "mysql > $m2d_temp" || return $?

    ## LOAD时数据自动会进行四舍5入
    echo "
    LOAD DATA LOCAL INFILE '$m2d_temp' INTO TABLE day
	" | mysql kts
    xt_ret $? "load data $m2d_temp" || return $?

    echo "    end of redo hexun_day fr min..."

    return 0
}

function fn_up_rzrq_codes_tbl()
{
    echo "
    DROP TABLE IF EXISTS rzrq_codes;
    CREATE TABLE rzrq_codes (
        id      INT(6) PRIMARY key AUTO_INCREMENT NOT NULL,
        code    INT(6)  ZEROFILL
    );

    INSERT INTO rzrq_codes(code) SELECT DISTINCT  code FROM rzrq_day;
    " | mysql kts
    return 0
}


function fn_wind()
{
    echo -n ${CURR} > ${file_wb}
    SCREENER 0
    echo "
    DROP TABLE IF EXISTS wind;
    CREATE TABLE wind (
        id      INT(6) PRIMARY key AUTO_INCREMENT NOT NULL,
        code    INT(6)  ZEROFILL
    );

    INSERT INTO wind(code) SELECT DISTINCT code FROM tbl_9jian WHERE close < avrg;
    " | mysql kts
    
    return $?
}

function fn_copy_table_2_table()
{
    fn_cp_tbl ${1:-zxg} ${2:-ipo}
    echo fn_cp_tbl ${1:-zxg} ${2:-ipo} over!!!
}

function fn_html()
{
    if [ "${FINA:-1}" -eq 1 ] ; then
        timeout 10 ./soptter > ${js_xunner_txt}
    else
        timeout 10 ./xunner > ${js_xunner_txt}
    fi
    xt_ret $? "timeout" || return $?

    names=(`awk '!/name/ {print $NF}' ${js_xunner_txt}`)
    codes=(`awk '!/name/ {print $1}' ${js_xunner_txt}| sed -e 's/^[03]/sz&/g' -e 's/^6/sh&/g'`)
    codes[0]=sh000001
    # echo ${names[@]}; echo ${codes[@]}; exit

    [ ${#names[@]} -eq ${#codes[@]} ]
    xt_ret $? "fail: ${#names[@]} -eq ${#codes[@]}" || return $?

    cp .template/KiTas.html /winc/relay/KiTas.html
    xt_ret $? "cp error" || return $?

    cat <<-"HERE_head" > /winc/relay/KiList.html
    <html>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>KiTas</title>
    <body>
    <p align="center">follow your heart!</p>
    <table align="center" width="100%" border="1">
	HERE_head

    local align='align="center" width="20%"'
    local chart='http://image.sinajs.cn/newchart'
    local target='TARGET="show"'
    local i
    for (( i=0; i<${#names[@]}; i+=1 )); do
    cat <<-HERE_mid >> /winc/relay/KiList.html
  <tr>
    <td align="center" width="40%">${names[$i]}</td>
    <td ${align}> <a HREF="${chart}/min/n/${codes[$i]}.gif"    ${target}>min</a> </td>
    <td ${align}> <a HREF="${chart}/daily/n/${codes[$i]}.gif"  ${target}>day</a> </td>
    <td ${align}> <a HREF="${chart}/weekly/n/${codes[$i]}.gif" ${target}>wek</a> </td>
  </tr>
	HERE_mid
    done
    cat <<-"HERE_tail" >> /winc/relay/KiList.html
    </table>
    </body>
    </html>
	HERE_tail
}

function fn_checkcode()
{
    if [ ! -f "${1}" ]; then
        echo "Usage: $FUNCNAME file"
        exit
    fi
    
    codes=(`cat ${1}|awk '/^[^#]/{print $1}' | xargs`)

    local i=
    for i in ${codes[@]}; do
        [[ ${i} =~ ^[036].* ]] || { echo "ignore code ${i}"; continue ;}
        grep -q ${i} .codelist
        xt_ret $? "${i} is a bad code" || return $?
    done

    fn_echo_succ "${1} is good code file"
}

function fn_day()
{
    bin/znz.yahoo $@
}


function fn_ipo()
{
    tmp='/tmp/kts/.ipo.tmp'
    raw='/tmp/kts/.ipo.raw'
    rip='/tmp/kts/.ipo.rip'

    > ${rip}

    local i
    for (( i=1; i<=2; i+=1 )); do
        url="http://datainterface.eastmoney.com/EM_DataCenter/JS.aspx?type=NS&sty=NSST&st=12&sr=-1&p=${i}&ps=50"

        echo dump ${url}
        w3m -dump "${url}" > ${tmp}

        # 's/,AN//g' 剔除申购准备中的票
        cat ${tmp} |sed -e '1s/(\[//' -e '$s/])//' -e 's/,AN//g' -e 's/"//g' | tr -d '\n' |
                    sed -e 's/AN201/\n&/g' -e 's/AN//g' | 
                    awk -F',' '/^201/{printf "%d\t%s\t%20s\n", $1/1000000000000,$5,$4}'  > ${raw}

        cat ${raw} >> ${rip}
    done

}

function fn_lhb()
{
    sql="SELECT max(date) FROM lhb"
    max_dt=`mysql -N kts <<< "${sql}"`
    max_dt=${max_dt/NULL/2015-07-08}
    sql="SELECT date from day WHERE code=900001 and date>'${max_dt}' ORDER by date ASC"
    dates=(`mysql -N kts <<<"${sql}"`)
    #dates=(2015-08-12 2015-08-14 2015-08-07)
    #echo ${dates[@]}

    if [ "${#dates[@]}" -eq 0 ]; then
        echo "It's latest" ; exit
    fi
    local i=
    for i in ${dates[@]}; do
        echo to up ${i}...
        fn_lhb0 ${i}
    done
    return $?
}

function fn_lhb0()
{
    url="http://data.eastmoney.com/stock/lhb/$1.html"
    w3m -cols 999 -dump "${url}" > ${lhb_raw}

    # $1      $2      $3      $4              $5   $6         $7          $8      $9          $10      $11
    # 序号  代码    名称      相关链接    涨跌幅  龙虎榜成  买入额(万)  占总成交  卖出额(万)  占总成交 上榜原因

    # ' N' 恒顺众日升 乱码
    cat ${lhb_raw} | grep -A1000 '^1\>' |
        sed -e 's/^           /999 1 2 3 4/' -e 's/ N\>//g' |
        grep '^[0-9]' > ${lhb_rip}
    #           12345678901
    awk -v v_date=$1 '
    BEGIN{ nr=0 } {
        if ($1==999) {
            printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%s\t\n", \
                    v_date, code,chng,$6,$7,$8,$9,$10,$11;
        } else if ($1<nr) {
            exit
        } else if ($2<700000) {
            printf "%s\t%s\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%.2f\t%s\t\n", \
                    v_date, $2,$5,$6,$7,$8,$9,$10,$11;
            nr=$1;  
            code=$2;
            chng=$5;
        }
    }' ${lhb_rip} | 
    sed \
    -e 's/退市整理的证券/fired/g'                                       \
    -e 's/无价格涨跌幅限制的证券/unlimited/g'                           \
    -e 's/当日融资买入数量占该证券总交易量50%以上/rzrq50/g'             \
    -e 's/日均换手率与前五个交易日的.*/ratio30/g'                       \
    -e 's/当日价格振幅达到15%的证券/hilo15/g'                           \
    -e 's/当日换手率达到20%的证券/tov20/g'                              \
    -e 's/当日涨幅偏离值达7%的证券/up7/g'                               \
    -e 's/当日跌幅偏离值达7%的证券/dn7/g'                               \
    -e 's/S、ST、.ST连续三个交易日跌幅.*/s3dn12/g'                      \
    -e 's/S、ST、.ST连续三个交易日涨幅.*/s3up12/g'                      \
    -e 's/连续三个交易日收盘价涨幅偏离值累计20%/3up20/g'                \
    -e 's/连续三个交易日收盘价跌幅偏离值累计20%/3dn20/g'  > ${lhb_pro}

    awk '{print $2}' ${lhb_pro} | grep -q '^6'
    xt_ret $? "Error: sh_sec lhb is not released" || return $?

    lines=`wc -l<${lhb_pro}`
    if [ "${lines}" -lt 5 ]; then
        echo "Bad lhb data: ${url}"
        exit
    fi

    echo "
    -- DROP TABLE IF EXISTS lhb;
    CREATE TABLE IF NOT EXISTS lhb (
        id      int(4) ZEROFILL PRIMARY key AUTO_INCREMENT NOT NULL,
        date    DATE NOT NULL,
        code    INT(6)  ZEROFILL,
        chng    DECIMAL(6,2) NOT NULL,
        amount  DECIMAL(10,2) NOT NULL,     -- 万
        buy     DECIMAL(10,2) NOT NULL,
        bloo    DECIMAL(10,2) NOT NULL, 
        sell    DECIMAL(10,2) NOT NULL,
        sloo    DECIMAL(10,2) NOT NULL, 
        cause   CHAR(20),
        INDEX(date,code)
    );

    DELETE FROM lhb WHERE date='$1';
    LOAD DATA LOCAL INFILE '${lhb_pro}' INTO 
    TABLE lhb(date,code,chng,amount,buy,bloo,sell,sloo,cause);
    " | mysql -u root kts

    return $?
}

function fn_dorat()
{
    case $1 in
    l|loop)
        is_del_routine=true fn_timestamp_market
        xt_ret $? "unarm_close_forbid=true TO RERUN WHEN MARKET CLOSED" || return $?
        fn_isresting && { echo "is reseting"; exit 0; }
        ;;
    esac

    if [ -z "${TBL}" ]; then
        fn_redo_hexun_day || FINA=1 up 4
        xt_ret $? "" || return $?
        sec_dt=(`mysql -N kts<<<"SELECT date,time FROM stamp_day ORDER by id DESC LIMIT 1"`)
    else
        # 手动补全5分钟数据，hexun会失败
        # DROP TABLE dorat_temp;
        # CREATE TABLE IF NOT EXISTS dorat_temp LIKE dorat;
        # INSERT INTO dorat_temp SELECT * FROM dorat WHERE date='2015-08-17' and time='11:14:49';
        # UPDATE dorat_temp SET time='11:20:00';
        # INSERT INTO dorat SELECT * FROM dorat_temp;
        sec_dt=${TBL#dorat_}
        sec_dt=(`fn_dt_hyphen_2_normal ${sec_dt}`)

    fi

    sec_date=${sec_dt[0]}
    sec_time=${sec_dt[1]}
    columns="code,yesc,open,high,low,close,volume,amount"
    # COND0="WHERE date='${sec_date}'" fn_cp_tbl day dorat_${sec_date//-/_}_${sec_time//:/_}
    echo "
    -- DROP TABLE dorat;
    CREATE TABLE IF NOT EXISTS dorat (
        date        date NOT NULL, 
        time        time NOT NULL, 
        code        INT(6) ZEROFILL NOT NULL DEFAULT 0,
        yesc        DECIMAL(6,2) NOT NULL,
        open        DECIMAL(6,2) NOT NULL,
        high        DECIMAL(6,2) NOT NULL,
        low         DECIMAL(6,2) NOT NULL,
        close       DECIMAL(6,2) NOT NULL,
        volume      DECIMAL(12,2) NOT NULL,
        amount      DECIMAL(12,2) NOT NULL,
        INDEX(date,time,code)
    );
    DELETE from dorat WHERE date='${sec_date}' && time='${sec_time}';
    INSERT INTO dorat SELECT date,'${sec_time}',${columns} FROM ${TBL:-day} WHERE date='${sec_date}';
    " | mysql kts
    xt_ret $? "" || return $?

    fn_echo_succ "    succ: insert dorat ${sec_dt[@]}"
    
    nb_2015=`cat /tmp/kts/2015 2>/dev/null`
    if [ "${nb_2015:-1}" -eq 1 ]; then
        fn_bell "system.wav"
    fi

    return 0
}

function fn_example_not_work_by_group()
{
    echo "
    SET @v_id = 1; 
    SELECT max(id)   FROM code2015 INTO @v_len;
    WHILE @v_id <= @v_len DO
        SELECT code FROM code2015 WHERE id=(@v_id) INTO @v_code;
        INSERT INTO ma2015(code,ma2015)
            SELECT @v_code, sum(close)/20 FROM (SELECT close FROM dorat2 WHERE code=@v_code) as t;
        SET @v_id = @v_id + 1;
    END WHILE;
    "
}

function fn_ma2015()
{
    function fn_creat_db_ma2015()
    {
        # fn_echo_fail "db DT is ${DT[@]}" > /dev/stderr
        # TEMPORARY=TEMPORARY
        echo "
        DROP   $TEMPORARY TABLE IF EXISTS dorat2;
        CREATE $TEMPORARY TABLE IF NOT EXISTS dorat2 (
            code        INT(6) ZEROFILL NOT NULL DEFAULT 0,
            close       DECIMAL(6,2) NOT NULL,
            date        date,
            time        time,
            INDEX(code)
        );"
        while read date time; do
            echo "INSERT INTO dorat2 SELECT code,close,date,time FROM dorat WHERE date='${date}' and time='${time}';"
        done <<<"`DT="${DT[@]}" ./SELECT dorat | tac | head -60 | sed -n '1~3p'`"
    }

    DT=(${DT})
    iEND=${DT[0]}
    END=${iEND:-$END}
    PREV=`fn_get_prev`
    fn_creat_db_ma2015 > ${mps_ma2015}

    echo "
delimiter //

DROP PROCEDURE IF EXISTS sp_ma2015 //
CREATE PROCEDURE sp_ma2015() tag_ma2015:BEGIN
    DROP   TABLE IF EXISTS ma2015;
    CREATE TABLE ma2015(
        id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
        code        INT(6) ZEROFILL NOT NULL DEFAULT 0,
        ma2015      DECIMAL(8,2) NOT NULL DEFAULT 0
    );
    INSERT INTO ma2015(code,ma2015)
        SELECT t.code,ma2015 FROM ( SELECT code,sum(close)/20 as ma2015 FROM dorat2 GROUP by code ) as t, 
        (SELECT A.code FROM 
          (SELECT code FROM day WHERE date='${END}') as A,
          (SELECT code FROM day WHERE date='${PREV}') as B WHERE A.code=B.code 
        ) as code2015 
        WHERE t.code=code2015.code;
    -- NOT IN 比较慢
    -- SELECT code,sum(close)/20 as ma2015 FROM dorat2 GROUP by code;
    -- DELETE FROM ma2015 WHERE code NOT IN(SELECT code FROM code2015);
END tag_ma2015 //

call sp_ma2015();
    " >> ${mps_ma2015}
    mysql kts < ${mps_ma2015}
    xt_ret $? "" || return $?
    fn_echo_succ "    succ: up ma2015@${DT[@]}!"
    return $?
}

function fn_download_Money()
{
    host='http://www.sipf.com.cn'

    fn_echo_succ "余额期末数\t日平均数\t银证转账+\t银证转账-\t银证转账net
    
    "
    dates=(
    "/NewCH/zt/01/94402.shtml"    201501
    "/NewCH/zt/12/93151.shtml"    201412
    "/NewCH/zt/11/92201.shtml"    201411
    "/NewCH/zt/10/90801.shtml"    201410
    "/NewCH/zt/09/89104.shtml"    201409
    "/NewCH/zt/08/88352.shtml"    201408
    "/NewCH/zt/07/87752.shtml"    201407
    "/NewCH/zt/06/87102.shtml"    201406
    "/NewCH/zt/05/86303.shtml"    201405
    "/NewCH/zt/04/85854.shtml"    201404
    )
    for (( i=${#dates[@]}-1; i>0; i-=2 )); do
        let j=i-1
        echo -e "month: \t${dates[$i]}"
        w3m -dump "${host}/${dates[$j]}" | grep '201.\.' | sed 's/,//g' | \
            awk '{printf "%s\t%s\t%s\t%s\t%s\n", $2,$3,$4,$5,$6}'
    done

    dates=(
    "/NewCH/zt/09/100802.shtml"   201509
    "/NewCH/zt/08/100352.shtml"   201508
    "/NewCH/zt/07/99752.shtml"    201507
    "/NewCH/zt/06/98652.shtml"    201506
    "/NewCH/zt/05/97802.shtml"    201505
    "/NewCH/zt/04/97002.shtml"    201504
    "/NewCH/zt/03/96352.shtml"    201503
    "/NewCH/zt/02/95209.shtml"    201502
    )
    local i
    for (( i=${#dates[@]}-1; i>0; i-=2 )); do
        let j=i-1
        echo -e "month: \t${dates[$i]}"
        w3m -dump "${host}/${dates[$j]}" | grep 证券交易结算资金 | sed 's/,//g' | \
            awk '{printf "%s\t%s\t%s\t%s\t%s\n", $4,$6,$8,$10,$12}'
    done 

}

function fn_parser_Money()
{
    awk '
    BEGIN { sum=0; free0=5755; net=0; }
    {
        if (1 == index($1,"month:")) {
            printf "%s\t%s\n", $1,$2
        } else {
            net=net+$5;
            sum=(free0-$1)+$5+sum;
            printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", free0, $1,$2,$3,$4,$5,sum,net
            free0=$1;
        }
    }' ~/bin/stk/sql/money
}

function fn_money()
{
    # fn_download_Money | tee ~/bin/stk/sql/money
    fn_parser_Money
}

function fn_fenbi()
{
    code=$1
    date=$2
    #code=399006
    fn_iscode ${code}
    xt_ret $? "arg1 not code" || return $?

    [ "${#date}" -eq 8 ]
    xt_ret $? "date format 2015mmdd" || return $?

    sql="SELECT round(datetime/1000000) as dt, TRUNCATE(datetime%1000000/100,0) as time FROM fenbi"
    mysql -N kts <<< "${sql} WHERE code=${code} HAVING dt=${date}" | awk '{print $2}' > /tmp/kts/fenbi.up1

    close=`mysql -N kts <<< "SELECT max(trade) FROM fenbi WHERE code=${code} and datetime>${date}000000"`
    # echo ${close};exit
    grep -v -f /tmp/kts/fenbi.up1 sql/min.table > /tmp/kts/fenbi.up2
    rows=`wc -l < /tmp/kts/fenbi.up2`
    
    if [ "${rows}" -eq 0 ]; then
        echo rows is 0, exit
        exit
    else
        echo rows: ${rows}
    fi

    awk -v v_code=${code} -v v_date=${date} -v v_close=${close} '{
        printf "%s\t%s%06d\t%.2f\t%d\t%d\n", v_code, v_date,$1*100+55, v_close, 0,0
    }' /tmp/kts/fenbi.up2 > ${buffer}

    echo "
    LOAD DATA LOCAL INFILE '${buffer}' INTO TABLE fenbi(code, datetime, trade, volume, amount)
    " | mysql kts
    
}

function fn_main()
{
    CURR=`fn_maxdate`
    END=${END:-${CURR}}
    PREV=`fn_get_prev`

    cmdlist=(
    # fixed sequence
    "cap [--keep.FIN -k]                # (max(中国石油)=2万亿 sum(nmc)=20万亿)"
    "redo_hexun_day_fr_min              # 利用已有分线，重做大盘日线"
    "hexun_day                          # 大盘日线数据 4:00:00 PM"
    "del_hexun_day                      # 删除大盘日线，防止冲突"
    "redo_hexun_day                     # 重做大盘日线数据"
    # --------------------              ABOVE IS FIXED SEQUENCE --------------------
    "up_tbl_xRD [--keep.PWR -k]         # --- 使用当前除权数据 --keep.PWR"
    "file_to_table {code...|file}       # 写file到表{TBL:-zxg}，并........ZXG.BLK........"
    "table_to_file {table:-chao}        # 添加表{table:-chao}到/tmp/zxg"
    "up_rzrq_codes_tbl                  # 更新RZRQ业务数据"
    # --------------------              ABOVE IS FIXED SEQUENCE --------------------
    "checkcode file                     # "
    "html                               # flush YIST=.soptter.xxx soptter result into html"
    "copy_table_2_table src dst         # --- 使用 1 1 做为代号"
    "add_yesclose                       # 为yahoo.指南针数据添加yesclose"
    "load_directory                     # load文件夹${znzday}到表day"
    "dump_day_2_tmp START END           # 导出日线到${daydump} \${START:-\$END} \${END:-\${END}}"
    "trs_min_2_day                      # 最后一笔分线转日线"
    "wind                               # wind(close<avrg)"
    "day code                           # DL 1year data from znz"
    "ipo                                # DL ipo codes from east"
    "lhb                                # 龙虎榜"
    "dorat  [loop]                      # 量比数据，loop when run@crontab"
    "ma2015                             # "
    "trace                              # "
    "fenbi  code 2015mmdd               # "
    "money                              # "
    "power                              # 权重分析"
    )

    # 存储过程函数文件的最后5行都是注释
    cd $workdir
    head -n -5 $mps_org > $mps_god

    fn_execute "$@"
}

fn_main "$@"

