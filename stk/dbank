#! /bin/bash

mod_fb=500
filewb='/tmp/filewb'
p_bin='/root/bin/stk/bin/'
selecap="SELECT code FROM cap"
helpmsg="
    ------------------------------ 环境变量 -----------------------------
    ASC         排序方式，SELECT默认使用asc，SCREENER默认使用desc
    COND        条件过滤表达式，SELECT时使用，默认为空
    CHAO        1时在所有模型上叠加超跌模型
    END         时间范围的右值，默认使用900001的max(date)
    GEM         Growth Enterprise Market, 1 to filter
    LIMIT       limit子句输出记录限制，默认48
    YIST        code列表文件
    START       时间范围的左值
    TBL         操作表，默认使用'tbl_visit'
    NUM         振幅分析周期(60 120 240...)，默认使用240
    XTBL        EXCLEDE表，SELECT时使用，默认为空
    NMC_RATIO   NMC_RATIO*100%成本分析空间
"

[ -n "$END" ] && export END=$END

XTBL=${XTBL:+and code not in (SELECT code FROM $XTBL)}

HAVING=${COND:+HAVING $COND }${XTBL}
HAVING="${HAVING}${GEM:+ and d.code>300000 and d.code<400000}"

COND=${COND:+and $COND }${XTBL}
COND="${COND}${GEM:+ and d.code>300000 and d.code<400000}"

W3M='timeout 34 /usr/bin/w3m'
# round(100*vol5/(c.nmc/c.close),2) as tov5, 
RISE='TRUNCATE(100*(d.close-yesc)/yesc, 2)'
SWING='TRUNCATE(100*(high-low)/yesc, 2)'
TURNOV='TRUNCATE(100*d.volume*c.close/c.nmc, 2)'
TURNOV0='TRUNCATE(100*d.volume/@shares0, 2)'

url_sh000001='http://hq.sinajs.cn/list=sh000001'

mps_org="sql/xRD.sql"
mps_acc="sql/acc.sql"
mps_acf="sql/acf.sql"
mps_god="/var/God.sql"
sql_temp='/dev/shm/sql.temp'

warehs='/opt0/warehs'
znzday='/opt0/warehs/znzday'
workdir='/root/bin/stk'

m2d_temp='/dev/shm/hexun/min2day'

hx_stderr='/dev/shm/hexun/stderr'
hx_rawxml='/dev/shm/hexun/rawxml'
hx_ripexml='/dev/shm/hexun/ripexml'
hx_ripetxt='/dev/shm/hexun/ripetxt'
hx_dayclose='/dev/shm/hexun/dayclose'

rzrq_stderr='/dev/shm/rzrq/stderr'
rzrq_rawxml='/dev/shm/rzrq/rawxml'
rzrq_ripexml='/dev/shm/rzrq/ripexml'
rzrq_ripetxt='/dev/shm/rzrq/ripetxt'

soptter_zxg='.soptter.zxg'

sn_stderr='/dev/shm/sina/stderr'
sn_rawxml='/dev/shm/sina/rawxml'
sn_ripexml='/dev/shm/sina/ripexml'
sn_ripetxt='/dev/shm/sina/ripetxt'
sn_cap_nmc='/dev/shm/sina/cap_nmc'

go_rawxml='/dev/shm/google/rawxml'
go_ripexml='/dev/shm/google/ripexml'
go_temp='/dev/shm/google/temp'
windout='/dev/shm/windbell/temp'

js_xunner='/dev/shm/xunner.js'
js_xunner_idx='/dev/shm/xunner.idx'
js_xunner_stk='/dev/shm/xunner.stk'
js_xunner_txt='/dev/shm/xunner.txt'

rt_stdout='/dev/shm/realtime/stdout'
rt_ripetxt='/dev/shm/realtime/ripetxt'

mi5_day='/dev/shm/mi5/day'
mi5_min='/dev/shm/mi5/min'
day_temp='/dev/shm/day/temp'
day_ripe='/dev/shm/day/ripe'
day_gether='/dev/shm/day/gether'
yahooask='/dev/shm/day/yahoo.ask'
yahootimeout='/dev/shm/day/yahoo.ask.timeout'

fenbi_raw='/dev/shm/fenbi/raw'
fenbi_raw1='/dev/shm/fenbi/raw1'
fenbi_ripe='/dev/shm/fenbi/ripe'
mkdir -p ${fenbi_raw%/*}

yjbb_raw='/dev/shm/yjbb_raw'
yjbb_rip='/dev/shm/yjbb_rip'

cache='/tmp/cache'
buffer='/tmp/buffer'

function fn_yist()
{
    if [ -f "${YIST}" ]; then
        LIST=`cat ${YIST}|awk '/^[^#]/{print $1}' | xargs | tr ' ' ','`
        [ -z "${LIST}" ] && return
        LIST="and code in (${LIST})"
    fi
    #echo ${LIST}; exit
}

function fn_str_2_date()
{
    dt2=$1
    echo ${dt2:0:4}-${dt2:4:2}-${dt2:6:2}
    # echo ${dt2:8:2}:${dt2:10:2}:${dt2:12:2}
}

function fn_iscode()
{
    # set -x
    local num=`echo -n $1 | wc -c`
    [[ "${1}" =~ ^[0-9]+$ ]] && [ "${1}" -ne 0 ] && [ ${num:-0} -le 6 ]
}

function fn_isdate()
{
    echo -n $1 | grep -q -E '^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$'
}

function fn_isdatetime()
{
    test ${#1} -eq 14
}

function fn_write() 
{
    # wall < /dev/stdin
    mesg y; write root /dev/pts/0 <<< "${1}"
}

function fn_timestamp_market() 
{
    DATETIME=(`$W3M -dump ${url_sh000001} | awk -F',' '{print $(NF-2), $(NF-1)}'`)
    OPENDATE=${DATETIME[0]}
    OPENTIME=${DATETIME[1]}
    if [ -z "$OPENDATE" ]; then
        fn_write "
        FINA UNREACHABLE!
        "  
        return 1
    fi 

    export DATE=`date +%Y-%m-%d`

    if [ "$unarm_close_forbid" = 'true' ] ; then
        export DATE=${OPENDATE}
        return 0
    fi

    if [ "$DATE" != "$OPENDATE" ]; then
        echo "
        Error: market is close
        " && return 1
    fi

    MAXDATE=`mysql -N kts <<< "SELECT max(date) from day WHERE code = 900001"`
    if [ "$MAXDATE" = "${OPENDATE}" ]; then
        if [ "${is_del_routine}" != 'true' ]; then
            echo "
            WARNING: $MAXDATE data exist, try up redo_hexun_day
            " && return 1
        fi
    fi 
}

function fn_get_ratio_close2open() 
{
    # ratio = 4小时/sum(open)，用于预测当日量比
    # 在 ./SELECT 通过变量 ratio=`fn_get_ratio_close2open`
    DATE=`date +%Y-%m-%d`
    sec_0930=$(date +%s -d "${DATE} 09:30:00") 
    sec_1130=$(date +%s -d "${DATE} 11:30:00")
    sec_1300=$(date +%s -d "${DATE} 13:00:00")
    sec_1500=$(date +%s -d "${DATE} 15:00:00")
    sec_curr=`mysql -N kts<<<"SELECT time FROM stamp_day ORDER by id DESC LIMIT 1"`
    sec_curr=$(date +%s -d "${DATE} ${sec_curr}")
    sec_open=0

    [ -n "$sec_curr" ]
    xt_ret $? "Table 'kts.stamp_day1' doesn't exist" || return $?

    if [ "$sec_curr" -lt ${sec_0930} ] ; then
        sec_open=0
    elif  [ "$sec_curr" -lt ${sec_1130} ]; then
        sec_open=$(expr $sec_curr - $sec_0930) 
    elif  [ "$sec_curr" -lt ${sec_1300} ]; then
        sec_open=7200
    elif  [ "$sec_curr" -lt ${sec_1500} ]; then
        sec_open=$(expr $sec_curr - $sec_1300 + 7200) 
    else
        sec_open=14400
    fi

    # echo $sec_open
    # sec_pcnt=$(expr ${sec_open}00 / 14400)
    sec_pcnt=$(bc -l <<<"scale=2; 14400/${sec_open}")
    echo $sec_pcnt
}

function fn_maxdate() 
{
    mysql -N kts <<< "SELECT max(date) from day WHERE code = 900001;"
}

function fn_get_prev()
{
    sqls="SELECT date FROM day WHERE code=900001 and date<='$END'"
    mysql -N kts<<<"${sqls} ORDER by date DESC LIMIT ${STEP:-1},1"
}

function fn_create_tbl_codes()
{
    [ -z "${*}" ] && echo "
    Usage: fn_create_tbl_codes tbl_name...
    " && exit

    local i=
    for i in ${@}; do
        echo "
        DROP TABLE IF EXISTS $i;
        CREATE TABLE ${i} (
            id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
            code        INT(6) ZEROFILL NOT NULL DEFAULT 0
        );
        " | mysql kts
        xt_ret $? "" || return $?
    done
}

function fn_cp_tbl()
{
    [ 2 != "$#" ] && echo "Error: we need 2 table name" && exit

    echo "    cp_tbl $1 $2"

    echo "
    DROP TABLE IF EXISTS $2;
    CREATE TABLE $2 LIKE $1;   
    INSERT INTO $2 SELECT * FROM $1;  
    " | mysql kts
}


function fn_reset_sqlsource() 
{
    # sed Q exclude the match line, sed q include that
    sed '/THIS EXECUTE DELIMITER/q' ${mps_org} > ${mps_god}
}

echo "`date +%F.%T` ${BASH_SOURCE##*/}" >> /var/dbank.trace

[ "${BASH_SOURCE##*/}" != "${0##*/}" ] && return 0

fn_rank_by_nmc() 
{
    echo "
    SELECT * FROM cap ORDER by nmc DESC limit ${1:-48};
	" | mysql -t kts
}

fn_group_nmc_layout() 
{
    # cat $sn_cap_nmc
    mysql -t  kts <<< "SELECT sum(nmc)/(10000*10000) as nmc_WanYi FROM cap;" 
    mysql -N  kts <<< "SELECT * FROM cap;" | awk 'BEGIN {
        list="5000 1000 800 500 200 100 50 20 10 5 0";
        arr_size=split(list, arr_list, " ");
    } {
        count++;
        nmc=$5/10000
        for(k=1; k<=arr_size; k++) {
            if (nmc > arr_list[k]) {
                arr_count[k] = arr_count[k]+1; break;
            }
        }
    } END {
        printf "    %d支股票市值分布\n", count
        for(k=1; k<=arr_size; k++) {
            printf "    大于%s亿:\t %d\n", arr_list[k], arr_count[k]; 
        }

        printf "    分析可见：   市值%%60分布主要在10~100亿\n";
        printf "    mysql -N kts <<<\"SELECT code FROM cap WHERE nmc>100000 and nmc<990000\" | xargs up 7\n";
    }'
}

main() 
{
    list=(
        fn_group_nmc_layout
        fn_rank_by_nmc
    )        

    match_word=(`echo ${list[@]}| xargs -n1 | cat -n | grep  "\<$1\>"`)

    if [ -z "${match_word[0]}" ] ; then
        echo "available list:"
        echo ${list[@]} | xargs -n 1 | cat -n | sed 's/^/   /g'
        exit 0
    fi

    ${match_word[1]}
}

main $@
