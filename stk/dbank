#! /bin/bash

helpmsg="
    ------------------------------ 环境变量 -----------------------------
    ASC         排序方式，SELECT默认使用asc，SCREENER默认使用desc
    COND        条件过滤表达式，默认为空，常置于HAVING CLAUSE 中
   iCOND        不对外开放条件，for子函数差异化，常置于WHERE CLAUSE 中
   xCOND        作为一个临时变量，易于HAVING COND iCOND等的组装
    DOOR        最通用的DOOR
   iDOOR        交叉引用时使用，以免相互干扰
   rDOOR        rise
  HAVING        条件过滤表达式，常置于SELECT嵌套时的最后过滤 e.g. fn_yi_descend
    CHAO        1时在所有模型上叠加超跌模型
    END         时间范围的右值，默认使用900001的max(date)
    LIMIT       limit子句输出记录限制，默认48
    YIST        code列表文件，优先于变量TBL
    START       时间范围的左值
    TBL         操作表，默认使用'tbl_visit'
    NUM         振幅分析周期(60 120 240...)，默认使用240
    XTBL        EXCLEDE表，SELECT时使用，默认为空
    NMC_RATIO   NMC_RATIO*100%成本分析空间
"
nmc_wolf=180.1
nmc_lion=300.1
# _____________________________boundary_of_wolf______________________________
cd ~/bin/stk
export PATH=.:~/bin:$PATH

[ "${DEBUG:-0}" = 1 ] &&
SUBOUT='/dev/stdout' || SUBOUT='/dev/null'

# mySql
XTBL="${XTBL:+and code not in (SELECT code FROM $XTBL)}"
COND="${COND:+and $COND }${XTBL}"
DROP="DROP TABLE IF EXISTS "
WHERE="WHERE"
CREATE="CREATE TABLE IF NOT EXISTS "
IDX='(@idx:=@idx+1) as idx,'
ITB='(select @idx:=0) as itb,'                      # 置于FROM之后

# DL tool
WGET='timeout 34 /usr/bin/wget'
W3M='timeout  60 /usr/bin/w3m'

# FLOOR() and ROUND()
LORI='ROUND(100*(d.low-d.yesc)/d.yesc, 2)'
HIRI='ROUND(100*(d.high-d.yesc)/d.yesc, 2)'
OPRI='ROUND(100*(d.open-d.yesc)/d.yesc, 2)'
RISE='ROUND(100*(d.close-d.yesc)/d.yesc, 2)'
APPLE='ROUND(100*(x.close-x.yesc)/x.yesc, 1)'
nmcTp='ROUND(c.nmc/10000*(1-top10), 1)'
nmcYi='ROUND(c.nmc/10000, 1) as nmcYi'
# ${nmcYi0%as*} 去as
nmcYi0='ROUND(nmc*d.close/c.close/10000, 1) as nmcYi'
nmc0='(c.nmc*d.close/c.close/10000)'
TROUGH='ROUND(100*(d.close-d.low)/yesc, 2)'
TURNOV='ROUND(100*d.volume*c.close/c.nmc, 2)'
TURNOV0='ROUND(100*d.volume/@shares0, 2)'
sql_avrg="ROUND( (100*(d.amount/d.volume-d.yesc)/d.yesc), 1) as avrg,"
sql_tov="ROUND(100*d.volume/(c.nmc/c.close),2) as tov,"
sql_eTranz="ROUND(d.amount/10000, 1) as eTranz,"

url_sh000001='http://hq.sinajs.cn/list=sh000001'

mod_fbi=100
mod_mi5=100

# ____________________temp_files________________________
info='/tmp/kts/info'
chao='/tmp/kts/chao'
error='/tmp/kts/error'
cache='/tmp/kts/cache'
flash='/tmp/kts/flash'
buffer='/tmp/kts/buffer'
memory='/tmp/kts/memory'

warehs='/opt0/warehs'
znzday='/opt0/warehs/znzday'
cdpath='/root/bin/stk'
p_sbin='/root/bin/stk/bin/'

daydump='/tmp/kts/day.dump'
dayclose='/tmp/kts/dayclose'
yahooout='/tmp/kts/yahooout'
yahooask='/tmp/kts/yahoo.ask'

blk_name='/tmp/kts/blk_name'
blk_memb='/tmp/kts/blk_memb'
blk_list='/tmp/kts/blk_list'

wolf_raw='/tmp/kts/wolf.raw'
wolf_rip='/tmp/kts/wolf.rip'

mps_org="sql/xRD.sql"
mps_acc="sql/acc.sql"
mps_acf="sql/acf.sql"
mps_nbm="/tmp/kts/nbm.sql"
mps_god="/tmp/kts/God.sql"

mkdir -p /tmp/kts

touch $cache
touch $buffer
touch $chao

function fn_txttbl()
{
    if [ -n "${NMC_RATIO}" ]; then
        iNUM=`mysql -N <<< "SELECT ROUND(${NUM:-100}*${NMC_RATIO})"`
        NUM=${NUM:-$iNUM}
    fi
    if [ -f "${YIST}" ]; then
        TBL=yist
        TBL=yist up file_to_table ${YIST}
    fi
}

fn_gen_10jqka_sel()
{
    rowx1=`bc <<< "obase=16;${rows}%256"`
    rowx2=`bc <<< "obase=16;${rows}/256"`

    [ "${rows}" -eq 0 ] && fn_echo_fail "BLK shouldn't be NULL" && exit 1
    xargs <${PLAIN} | sed 's/^/ /' | sed  \
        -e 's# 6#6#g' \
        -e 's# 0#!0#g' \
        -e 's# 3#!3#g' > ${buffer}
    echo -ne "\x${rowx1}\x${rowx2}`cat ${buffer}`" > /winc/zxg/自选股.sel
    cp ${PLAIN} /winc/zxg/chao.txt
    fn_echo_warn "$rows rows to /winc/zxg/{自选股.sel,chao.txt}"
}

fn_gen_dzh_blk()
{
    # 每个自选股都有自己的独特代码，现以8为实现
    # Linux中的vim ga 不是很准确的，不能完全解码uni-code，到xp中就OK了。
    HEAD="\xa6\x00\x51\xff\x01"     # 带时间排序功能，不带时间: HEAD="\xa5\x00Q\xff"
    DELI="\x00\x20\x66\x01"         # 不带时间: DELI="\x00\x00\x00\x00"

    touch "${ZXGCFG:=/dzh2/USERDATA/block/自选股${WIT/1/}.BLK}"

    {
    echo -n -e $HEAD
    local index=0
    while read i; do
        case $i in
        [67]*)
            echo -n SH$i
            ;;
        [03]*)
            echo -n SZ$i
            ;;
        esac
        TIME="${DELI}\x"$index"\x7c\xfa\x54"  # Byte1是秒数计时，可用于100个排序
        echo -n -e $TIME
        let index++
    done<<<"`grep ${PATTERN:-'^[/036]'} ${PLAIN}`"
    echo
    } > ${ZXGCFG}
    fn_echo_warn "$index rows to ${ZXGCFG}"
}

function fn_hew_tail()
{
    sed -e 's/    |$/|/g' -e 's/----+$/+/g'
}

function fn_imysql_sqls()
{
    echo "
    ${sqls_pro}
    SELECT $IDX t.* FROM ${ITB} ($sqls) as t
    " | mysql ${OPT:--t} kts
}

function fn_chao()
{
    [ "${CHAO:=0}" -eq 0 ] && [ -z "${WIT}" ] && return

    [ -z "${sqls}" ] && fn_echo_warn "sqls is empty" && exit
    PLAIN=${1:-$chao}
    sql_chao="${PREFIX}SELECT code FROM (${sqls//;/}) as t"
    # echo "${sql_chao}"; exit
    # 最后因没有换行而有重复，uniq -u 只处理连续出现的重复行
    mysql -N kts <<<"${sql_chao}" |grep '^[036]'| tee ${TEE} ${PLAIN} > /dev/null

    # 设置了WIT值就一定要输出dzh
    rows=`wc -l < ${PLAIN}`
    WIT=${WIT//1/${iWIT:-1}}
    case ${WIT} in
    0)                  do_nothing=1         ;;
    [1-9A-Z])           fn_gen_dzh_blk       ;;
    [1-9A-Z][1-9A-Z])   fn_gen_dzh_blk       ;;
    *)                  fn_gen_10jqka_sel    ;;
    esac

    fn_echo_warn "${rows} rows to ${PLAIN}"
}

function fn_check_blk_abbr()
{
    [ ${#BLK} -gt 4 ] && return

    maps=(
     A  FFCD    ADAS+
    B3  B3      生物医药 
    BJ  DAE3    白酒
     C  DF8F    计算机应用
     G  CFF9    高送转
     X  40      新股与次新股
    GX  FFC8    高+新
     V  D77B    虚拟现实
     L  CFEC    锂电+
     H  DB8A    互联网金融
    HP  D527    互联网+
    I4  D957    工业4.0
     M  DADA    新材料概念
     O  D617    OLED
    QH  FFC7    QH360
     R  DBDF    机器人
    RE  CE4E    稀土永磁
     S  DFB9    半导体及元件
     T  FFCC    特斯拉
     Z  DF95    证券
    )

    MATCH=
    for (( i=0,j=1,k=2; i<${#maps[@]}; i+=3,j+=3,k+=3 )); do
        [ "${BLK}" = "${maps[$i]}" ] && MATCH=${maps[$j]} && break
    done

    if [ -n "${MATCH}" ]; then
       iWIT=${BLK}
        BLK=${MATCH}
        #echo ${iWIT} and ${BLK}
        return
    elif ([ ${BLK} != 40 ] && [ ${#BLK} != 4 ]); then
        for (( i=0,j=1,k=2; i<${#maps[@]}; i+=3,j+=3,k+=3 )); do
            echo -e  "${maps[$i]}\t ${maps[$j]} \t${maps[$k]}"
        done
        exit 1
    else
        # 默认使用1
        iWIT=1
    fi
}

function fn_bist()
{
    [ -z "${BLK}" ] && return
    fn_check_blk_abbr
    WIT=0 LIMIT= FIELD= COND= CHAO=1 PARTS=f fn_blk U ${BLK}
    YIST=${chao}.blk
}

function fn_yist()
{
    # WHERE 在最前可备为 reentry-function
    # CID is replaced with fn_imysql_sqls
    CID=
    LIST=
    inLIST=
    WHERE=WHERE
    if [ -f "${YIST}" ]; then
        LIST=(`cat ${YIST}|awk '/^[036]/{print $1}' | xargs`)
        [ -z "${LIST[0]}" ] && return
        TBL=yist up file_to_table ${YIST}

        # scene 1 pause
        # inLIST="and code in (`tr ' ' ','<<<${LIST[@]}`)"

        # scene 2
        CID="y.id,"
        WHERE=",yist as y WHERE ${ABBR:-d}.code=y.code &&"
        return 0
    fi
    return 1
}

function fn_get_export_file()
{
    epath='/Export/'
    efile=${epath}/`ls -t ${epath} | head -1`
    ctime=`ls -lt --time-style=+%s ${efile} | awk '{print $6}'`
    fresh=600
    epoch=`date --date="${fresh} minute ago" +%s`
    t0920=`date --date="${CURR} 09:20:00" +%s`
    t0930=`date --date="${CURR} 09:30:00" +%s`
    t1130=`date --date="${CURR} 11:30:00" +%s`
    t1300=`date --date="${CURR} 13:00:00" +%s`
    t1500=`date --date="${CURR} 15:00:00" +%s`

    if [ "${ctime}" -lt ${epoch} ]; then
        past=`echo "scale=1;${fresh}+(${epoch}-${ctime})/60" | bc -l`
        fn_echo_fail "[fresh:${fresh}] ${efile} is lagged ${past} min"
        return 1
    fi

    let t_next0900=$t1500+18*60*60


    if [ "${ctime}" -gt ${t1500} ] && [ "${ctime}" -lt ${t_next0900} ]; then
        # 收盘后处理
        ctime=${t1500}
    elif [ "${ctime}" -gt ${t1130} ] && [ "${ctime}" -lt ${t1300} ]; then
        # 中午休盘
        ctime=${t1130}
    else
        # 因为CURR的缘故，第一次时间处理将走这个分支
        # 09:15:00 ~ 09:25
        ctime=${ctime}
    fi

    YYMMDD=`date -d @${ctime} +%F`
    HHMMSS=`date -d @${ctime} +%T`

    # echo $YYMMDD $HHMMSS

    return 0
}

function fn_peeloff_blk()
{
    BLK=${BLK:-${1}}
    if [ -z "${BLK}" ]; then
        if [ "${BLK_CAN_NOT_BE_NULL:-0}" = 1 ]; then
            fn_echo_fail "BLK_CAN_NOT_BE_NULL"; exit
        else
            return
        fi
    fi

    BLK=(${BLK//,/ }); BLK=${BLK[@]}              # 去回车
    local hexCOND="blk=0x${BLK// /||blk=0x}"
    #echo ${hexCOND}; exit
    echo "
    $DROP        xblk;
    CREATE TABLE xblk LIKE codes;
    INSERT INTO  xblk(code)
    SELECT DISTINCT code FROM blk_memb WHERE ${hexCOND};
    " | mysql kts
    frBLK=",xblk"
    inBLK="&& ${ABBR:-d}.code=xblk.code"       # 勿用 WHERE ABBR 以免影响 YIST
}

function fn_notin_blk()
{
    xBLK=${1:-$xBLK}
    if [ -z "${xBLK}" ]; then
        if [ "${BLK_CAN_NOT_BE_NULL:-0}" = 1 ]; then
            fn_echo_fail "BLK_CAN_NOT_BE_NULL"; exit
        else
            return
        fi
    fi
    xBLK=(${xBLK//,/ }); xBLK=${xBLK[@]}              # 去回车
    local hexCOND="blk=0x${xBLK// /||blk=0x}"

    notinBLK="&& ${ABBR:-d}.code NOT IN (SELECT code FROM blk_memb WHERE ${hexCOND})"
}

function fn_date_2_str()
{
    echo ${1//-/}
}

function fn_str_2_date()
{
    local dt2=$1
    echo ${dt2:0:4}-${dt2:4:2}-${dt2:6:2}
    # echo ${dt2:8:2}:${dt2:10:2}:${dt2:12:2}
}

function fn_isindex()
{
    [ "${1}" = '000902' ] || [ "${1}" = '000001' ] ||   \
    [ "${1}" = '399005' ] || [ "${1}" = '399006' ] ||   \
    [ "${1}" = '399101' ] || [ "${1}" = '399300' ]
    return $?
}

function fn_iscode()
{
    local num=`echo -n $1 | wc -c`
    [[ "${1}" =~ ^[036][0-9]+$ ]] && [ "${1}" -ne 0 ] && [ ${num:-0} -eq 6 ]
    #echo ${?} is ret code: ${1} num: ${num}
}

function fn_isdate()
{
    echo -n $1 | grep -q -E '^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$'
}

function fn_isholiday()
{
    # 是假日时，COUNT(date)=1为真，COUNT(date)!=1为假，返回0 => BASH的真
    RET=`mysql -N kts <<< "SELECT COUNT(date)!=1 FROM holiday WHERE date='${1:-2038-01-01}'"`
    # [ "${RET}" = 0 ] && fn_echo_pts0 "${date_F}.${date_T} is holiday"

    return $RET
}

function fn_isdatetime()
{
    test ${#1} -eq 14
}

function fn_issqltrue()
{
    RET=`mysql -N kts <<< "SELECT IF(${*}, 0, 1)"`
    return $RET
}

function fn_isresting()
{
    # 只测双数
    # hexun数据延迟，093400才开始更新
    hhmmss=`date +%H%M%S`
    if ([ ${hhmmss} -gt 113100 ] && [ ${hhmmss} -lt 130100 ]) ||
        [ ${hhmmss} -lt 093300 ] ; then
        echo "is resting @${hhmmss}...";
        return 0
    elif [ ${hhmmss} -gt 145500 ]; then
        echo "market closed, eixt!"
        exit 0
    else
        echo tick @${hhmmss}...
        return 1
    fi
}

function fn_name()
{
    fn_iscode ${code:=${1}}
    xt_ret $? "Usage: name code" || exit $?

    argv="${@}"
    argv="${argv// /,}"
    sqls="SELECT code, name, CONCAT((round(nmc/10000)),'Yi') as nmcYi FROM cap WHERE code IN (${argv})"
    #echo "${sqls}">/dev/stderr;exit
    fn_echo_succ `mysql -N kts <<< "${sqls}"`

    xt_ret $? "" || return $?
}

function fn_carbon()
{
    case $1 in
    get) mysql -N kts <<<"SELECT $2 FROM carbon"   || RET=1 ;;
    set) mysql -N kts <<<"UPDATE carbon SET $2=$3" || RET=1 ;;
    *)   RET=1 ;;
    esac

    if [ "${RET}" = 1 ]; then
        fn_echo_fail "carbon[$1]: ${BASH_SOURCE[1]##*/}|${BASH_LINENO[0]}| ${FUNCNAME[1]}"
        exit 1 
    fi
}

function fn_timestamp_market()
{
    DATETIME=(`$W3M -dump ${url_sh000001} | awk -F',' '{print $(NF-2), $(NF-1)}'`)
    OPENDATE=${DATETIME[0]}
    OPENTIME=${DATETIME[1]}
    if [ -z "$OPENDATE" ]; then
        fn_echo_fail "
        FINA UNREACHABLE!
        "
        return 1
    fi

    export DATE=`date +%Y-%m-%d`

    if [ "$unarm_close_forbid" = 'true' ] ; then
        export DATE=${OPENDATE}
        return 0
    fi

    if [ "$DATE" != "$OPENDATE" ]; then
        echo "
        Error: market is close
        " && return 1
    fi

    MAXDATE=`fn_maxdate`
    if [ "$MAXDATE" = "${OPENDATE}" ]; then
        if [ "${is_del_routine}" != 'true' ]; then
            echo "
            WARNING: $MAXDATE data exist, try up redo_hexun_day
            " && return 1
        fi
    fi
}

function fn_get_vtov()
{
    HMS=$1
    SEC_113000=41400
    SEC_093000=34200
    SEC_110000=39600
    echo "
    SELECT IF( TIME_TO_SEC('${HMS}') <= ${SEC_113000}, TIME_TO_SEC('${HMS}')-${SEC_093000}, TIME_TO_SEC('${HMS}')-${SEC_110000} )/(3600*4)
    " | mysql -N
}

function fn_maxdate()
{
    mysql -N kts <<< "SELECT max(date) from day WHERE code = 900001;"
}

function fn_get_prev()
{
    # 当END不存在时，亦正确
    sqls="SELECT date FROM day WHERE code=${CODE:-900001} and date<'$END'"
    mysql -N kts<<<"${sqls} ORDER by date DESC LIMIT ${1:-0},1"
}

function fn_get_next()
{
    sqls="SELECT date FROM day WHERE code=${CODE:-900001} and date>'$END'"
    mysql -N kts<<<"${sqls} ORDER by date ASC LIMIT 1"
}

function fn_get_date()
{
    # Usage: fn_get_date offset size
    local sta=${1:-1}
    local code=${CODE:-900001}
    [ "${sta}" -eq 0 ] && fn_echo_fail "fn_get_date sta could not be 0" && exit
    let sta--           #sta=offset-1
    sqls="
        SELECT date from day
        WHERE code=${code} and date<='${END}'
        ORDER by date DESC LIMIT ${sta},${2:-1}
    "
    #echo ${sqls}; exit
    mysql -N kts <<< "${sqls}"
}

function fn_set_END()
{
    CURR=`fn_maxdate`

    if [ -n "${END}" ]; then
        END=${END//END/${CURR}}                         # 指定为END
        PREV=`END=${END//PREV/${CURR}} fn_get_prev`     # 指定为PREV
        END=${END//PREV/${PREV}}                        # echo P:${PREV} E:${END}; exit
    elif [ -n "${iEND}" ]; then
        END=`END=${CURR} fn_get_date ${iEND} 1`         # 使用iEND时，必是从CURR倒数起
    else
        END=${END:-${CURR}}                             # 指定为CURR
    fi

    PREV=`fn_get_prev ${iPASS:-0}`                      # 指定PREV，通常用作比对日期

    #echo iEND:${iEND} END:${END} PREV:${PREV}; exit
}

function fn_get_nr_time()
{
    mysql -N kts<<<"SELECT count(DISTINCT time) FROM dorat WHERE date='${END}' && time<='${HMS:-15:30:00}'"
}

function fn_get_time()
{
    # arg1 <时间列表中的序号>，与 <SELECT lohi l> 的输出保持一致
    # arg2 LIMIT, 默认1
    NR=${1:-1}
    let sta=${NR}-1
    [ -z "${1}" ] && iASC=DESC
    odrLimit="ORDER by time ${iASC:-ASC} LIMIT ${sta},${2:-1}"
    hhmmss=`mysql -N kts<<<"SELECT DISTINCT time FROM dorat WHERE date='${END}' && time<='${HMS:-15:30:00}' ${odrLimit}"`
    if [ -z "${hhmmss}" ]; then
        fn_echo_fail "No.${NR} is EMPTY"
        exit 1
    fi
    echo ${hhmmss}
}

function fn_list_date()
{
    fn_get_date 1 ${1:-10} | cat -n
}

function fn_get_ratio_close2open()
{
    # ratio = 4小时/sum(open)，用于预测当日量比
    # 在 ./SELECT 通过变量 ratio=`fn_get_ratio_close2open`
    HMS=${HMS:-`fn_get_time 1`}
    sec_date=${END}
    sec_curr=$(date +%s -d "${END} ${HMS}")
    sec_0930=$(date +%s -d "${sec_date} 09:30:00")
    sec_1130=$(date +%s -d "${sec_date} 11:30:00")
    sec_1300=$(date +%s -d "${sec_date} 13:00:00")
    sec_1500=$(date +%s -d "${sec_date} 15:00:00")
    sec_open=0

    [ -n "$sec_curr" ]
    xt_ret $? "Table 'kts.stamp_day' doesn't exist" || return $?

    fn_echo_warn "    rat@${sec_dt[@]}" >/dev/stderr

    if [ "$sec_curr" -lt ${sec_0930} ] ; then
        sec_open=0
    elif  [ "$sec_curr" -lt ${sec_1130} ]; then
        sec_open=$(expr $sec_curr - $sec_0930)
    elif  [ "$sec_curr" -lt ${sec_1300} ]; then
        sec_open=7200
    elif  [ "$sec_curr" -lt ${sec_1500} ]; then
        sec_open=$(expr $sec_curr - $sec_1300 + 7200)
    else
        sec_open=14400
    fi


    if [ "${1}" = 'idxopen' ]; then
        let idxopen=${sec_open}/300
        let idxopen=idxopen
        tov_pcnt=$(bc -l <<<"scale=2; 1.4*${sec_open}/14400")
    else
        sec_pcnt=$(bc -l <<<"scale=4; 14400/${sec_open}")
        echo $sec_pcnt
    fi
}


# FEN=${HMS} DAY=dorat xWHERE可响应fn_yist
function fn_xtempday()
{
    local table=${TBL:-xtempday}
    local columns='*'

    if fn_iscode $1; then
        sql_fork="d.code=${1}"
    elif [ -z "$FEN" ]; then
        sql_fork="d.date='${1:-$END}'"
    elif [ -n "$FEN" ]; then
        columns='d.code,d.date,yesc,open,high,low,d.close,volume,amount'
        sql_fork="d.date='${1:-$END}' and time='${FEN}'"
    fi

    xsqls="
    $DROP ${table}; CREATE TABLE ${table} LIKE day;
    INSERT INTO ${table} 
        SELECT ${columns} from ${DAY:-day} d ${xWHERE:-WHERE} ${sql_fork} && ${iCOND:-1};
    " 
    #echo "${xsqls}"; exit 1
    mysql kts <<< "${xsqls}"
    return $?
}

function fn_xCol()
{
    [ "${#}" -eq 3 ]
    xt_ret $? "argc:${#}" || return $?

    case ${xCol:=date} in
    code)
        fn_iscode ${3}
        xt_ret $? "" || return $?
        sql_fork="${xCol}='${3}'"
        ;;
    *)  # 默认date类型
        fn_isdate ${3}
        xt_ret $? "" || return $?
        sql_fork="${xCol}='${3}'"
        ;;
    esac
    table=$2
    isqls="
    $DROP ${table}; CREATE TABLE ${table} LIKE ${1};
    INSERT INTO ${table} SELECT * from ${1} where ${sql_fork} and ${iCOND:-1};
    SELECT count(*) FROM ${table};
    "
    icount=`mysql -N kts <<< "${isqls}"`
    [ ${icount:-0} -ne 0 ]
}

function fn_create_tbl_codes()
{
    [ -z "${*}" ] && echo "
    Usage: fn_create_tbl_codes tbl_name...
    " && exit

    local i=
    for i in ${@}; do
        echo "
        DROP TABLE IF EXISTS $i;
        CREATE TABLE ${i} (
            id          INT PRIMARY key AUTO_INCREMENT NOT NULL,
            code        INT(6) ZEROFILL NOT NULL DEFAULT 0
        );
        " | mysql kts
        xt_ret $? "" || return $?
    done
}

function fn_bell()
{
    # route -p GW 即是host的IP
    # 同样接受{xRD|wolf}等作为命令
    timeout 3 nc 10.0.2.2 1234 <<<"${*:-msg.wav}"
    echo "Belling at ${BASH_SOURCE[1]##*/}|${BASH_LINENO[0]}| ${FUNCNAME[1]}" > /dev/pts/0
}

function fn_beep()
{
    local i
    for (( i=0; i<${BEEPS:-2}; i+=1 )); do
        echo -ne '\a' > /dev/pts/0; sleep .17
    done
    # fn_echo_succ自带了NL
    echo -ne "${date_T}.${PREFIX:-${FUNCNAME[1]}}\n${@}" > /dev/pts/0
}

function fn_cp_tbl()
{
    [ 2 != "$#" ] && echo "Error: we need 2 table name" && exit

    echo "    INSERT INTO $2 SELECT * FROM $1 ${COND0}"

    echo "
    DROP TABLE IF EXISTS $2;
    CREATE TABLE $2 LIKE $1;
    INSERT INTO $2 SELECT * FROM $1 ${COND0};
    " | mysql kts
}

date_F=`date +%F`
date_T=`date +%T`
echo "${date_F}.${date_T} ${BASH_SOURCE[1]} ${@}" >> /var/dbank.trace

[ "${BASH_SOURCE##*/}" != "${0##*/}" ] && return 0

fn_rank_by_nmc()
{
    echo "
    SELECT * FROM cap ORDER by nmc DESC limit ${LIMIT:-48};
	" | mysql -t kts
}


function fn_4yist()
{
    # .yist.
    #
    # SELECT count(*), sum(nmc) FROM cap WHERE nmc<1000000 ;
    # SELECT count(*), sum(nmc) FROM cap WHERE nmc>=1000000 and nmc<4000000 ;
    # SELECT count(*), sum(nmc) FROM cap WHERE nmc>=4000000 ;
    #
    # +----------+-----------+
    # | count(*) | sum(nmc)  |
    # +----------+-----------+
    # |     2042 | 829104179 |
    # |      457 | 858114696 |
    # |      105 | 1584677867|
    # +----------+-----------+      刚好以5为倍数

    sql='SELECT code FROM cap WHERE nmc<1000000'
    mysql -N  kts <<< "${sql} ORDER by code" > .yist.lt100
    sql='SELECT code FROM cap WHERE nmc>=1000000 and nmc<4000000'
    mysql -N  kts <<< "${sql} ORDER by code" > .yist.lt400
    sql='SELECT code FROM cap WHERE nmc>=4000000 and nmc<9990000'
    mysql -N  kts <<< "${sql} ORDER by code" > .yist.lt999
    sql='SELECT code FROM cap WHERE nmc>=9990000'
    mysql -N  kts <<< "${sql} ORDER by code" > .yist.ge999

    sql='SELECT code FROM cap ORDER by nmc DESC LIMIT 0,40'
    mysql -N  kts <<< "${sql}" > .yist.lv1_40
    sql='SELECT code FROM cap ORDER by nmc DESC LIMIT 40,80'
    mysql -N  kts <<< "${sql}" > .yist.lv2_80
    sql='SELECT code FROM cap ORDER by nmc DESC LIMIT 120,400'
    mysql -N  kts <<< "${sql}" > .yist.lv3_400
    sql='SELECT code FROM cap ORDER by nmc DESC LIMIT 520,2400'
    mysql -N  kts <<< "${sql}" > .yist.lv4_24k

    echo "up .yist files succ"
    return $?
}


function fn_sqls()
{
    sqls_curr="
    SELECT ROUND(sum(nmc)/(10000*10000),2),
           ROUND(sum(cap)/(10000*10000),2) FROM $TBL WHERE 1  ${inLIST}  INTO @nmc_Wanyi, @cap_Wanyi;
    SELECT ROUND(sum(nmc)/(10000*10000),2) FROM $TBL WHERE code>400000 ${inLIST} INTO @nmc_sh;
    SELECT count(code)                     FROM $TBL WHERE code>400000 ${inLIST} INTO @N_sh;
    SELECT ROUND(sum(nmc)/(10000*10000),2) FROM $TBL WHERE code<100000 ${inLIST} INTO @nmc_sz;
    SELECT count(code)                     FROM $TBL WHERE code<100000 ${inLIST} INTO @N_sz;
    SELECT ROUND(sum(nmc)/(10000*10000),2) FROM $TBL WHERE code>100000 and code<400000 ${inLIST} INTO @nmc_cyb;
    SELECT count(code)                     FROM $TBL WHERE code>100000 and code<400000 ${inLIST} INTO @N_cyb;
    SELECT max(date), @cap_Wanyi, @nmc_Wanyi, @nmc_sh,@N_sh, @nmc_sz,@N_sz, @nmc_cyb,@N_cyb FROM cap;
    "

    if [ "${inLIST}" = '' ]; then
        echo "redo"
        sqls_curr="
    --  DROP TABLE IF EXISTS currency;
        CREATE TABLE IF NOT EXISTS currency (
            date date PRIMARY key,
            cap_Wanyi DECIMAL(10,2),
            nmc_Wanyi DECIMAL(10,2),
            nmc_sh DECIMAL(10,2),
            nmc_sz DECIMAL(10,2),
            nmc_cyb DECIMAL(10,2),
            INDEX(date)
        );
        ${sqls_curr}
        replace into currency SELECT max(date), @cap_Wanyi, @nmc_Wanyi, @nmc_sh, @nmc_sz, @nmc_cyb FROM cap;
        "
    fi
}

fn_group_nmc_layout()
{
    # cat $sn_cap_nmc nmc_WanYi
    fn_yist
    TBL=${TBL:-cap}

    fn_sqls
    mysql -t kts <<< "$sqls_curr"

    mysql -N  kts <<< "SELECT * FROM cap;" | awk 'BEGIN {
        list="5000 1000 800 400 200 100 80 50 40 30 20 10 5 0";
        arr_size=split(list, arr_list, " ");
    } {
        count++;
        nmc=$6/10000
        for(k=1; k<=arr_size; k++) {
            if (nmc > arr_list[k]) {
                arr_count[k] = arr_count[k]+1; break;
            }
        }
    } END {
        printf "    %d支股票市值分布\n", count
        for(k=1; k<=arr_size; k++) {
            printf "    大于%s亿:\t %d\n", arr_list[k], arr_count[k];
        }

        printf "    分析可见：   市值%%60分布主要在10~100亿\n";
        printf "    mysql -N kts <<<\"SELECT code FROM cap WHERE nmc>100000 and nmc<990000\" | xargs up 7\n";
    }'

}

fn_test()
{
    fn_get_vtov 14:00:00
}

function main()
{
    list=(
        fn_group_nmc_layout
        fn_rank_by_nmc
        fn_4yist
        fn_test
    )

    match_word=(`echo ${list[@]}| xargs -n1 | cat -n | grep  "\<$1\>"`)

    if [ -z "${match_word[0]}" ] ; then
        echo "available list:"
        echo ${list[@]} | xargs -n 1 | cat -n | sed 's/^/   /g'
        exit 0
    fi

    ${match_word[1]}
}

main $@
