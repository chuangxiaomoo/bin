#!/bin/bash -
#-----------------------------------------------------------------------------
#          FILE: pgen
#   DESCRIPTION: Generate ${reffile} for ctags 
#        AUTHOR: moo (God helps those who help themselves) 
#       CREATED: 2018-03-31
#      REVISION: 1.0 
#-----------------------------------------------------------------------------

function xt_ret()
{
    [ "${1}" = "0" ] && return 0
    printf "${BASH_SOURCE[1]##*/}%-6s" "|${BASH_LINENO[0]}|"    # no FUNCNAME print
    FG=31 BG=40
    echo -e "\E[${FG};${BG}m${@:2}"
    echo -ne "\E[0m"
    return 1
}

function fn_usage()
{
    cat <<-HERE
    Usage: 
        pgen    , rebuild .py.pathes
        pgen -i , vi .py.pathes, then rebuild
        pgen -r , remove db files

    Configuration
        .py.pathes, include path or exclude pathes, line start with '-' is exclude_path
	HERE

    exit 0
}

function fn_main()
{
    pylang=(
        '*.py'
    )

    reffile=.py.tags
    pyfiles=.py.files
   pypathes=.py.pathes
    exclude='(||)'  # grep -E -v "${exclude}"
   namepatt="-iname '*.py' -print"

    if [ -f ${reffile} ] && lsof ${reffile} >& /dev/null; then
        echo "
        -----------------------------------------------------

        Another cscope is running! Please exit it first...

        -----------------------------------------------------
        "
        sleep 1 && exit
    fi

    case "$1" in
        -h|--help|h)        fn_usage                            ;;
        -i|--interactive)   vi ${pypathes}                      ;;
        -r|--remove)
            echo "------------------------------------"
            echo "RM .py.* but keep ${pypathes}"
            rm -f ${reffile} ${pyfiles}
            exit 0                                              ;;
        *)  ;;
    esac

    local idx
    for (( idx=0; idx<${#pylang[@]}; idx+=1 )); do
        namepatt="${namepatt} -o -iname '${pylang[$idx]}' -print"
    done

    [ ! -f "$pypathes" ] && > ${pypathes} && vi ${pypathes}

    # exclude line start with '-'
    exclude_path=`grep "^-" $pypathes | sed 's/^- *//g'`

    if [ -n "$exclude_path" ]; then
        for x_path in $exclude_path; do
            # -path -prune must begin with '/' './' '../' and 
            #               not end with '/'
            x_path=${x_path%/}
            if [ "${x_path:0:1}" != '/' ] && [ "${x_path:0:3}" != '../' ]; then
                x_path=./${x_path#./}
            fi
            [ ! -e "$x_path" ] && echo $x_path not exist && exit 1
            echo "skip path $x_path"
            exclude_opt="$exclude_opt -path '$x_path' -prune -o"
        done
    fi

   #     find [path1] [path2] [path3] -name <name>
   #echo find . $exclude_opt $namepatt 
    eval find . $exclude_opt $namepatt > $pyfiles
    xt_ret $? "" || return $?

    while read srcpath; do
        [ -z "$srcpath" ] && continue
        [ "${srcpath:0:1}" == '-' ] && continue

        # 应用于文件夹与文件在同一目录的情况，如 http下 httpd*.c onvif: 
        # Format: pathname -maxdepth 1
        [ ! -d "${srcpath%% *}" ] && echo "$srcpath: No such directory" && exit 0
        eval find ${srcpath} ${exclude_opt} $namepatt >> $pyfiles
    done < $pypathes

    sort -u $pyfiles -o $pyfiles
    echo "building ctags db success."

    ctags -L ${pyfiles}  -o ${reffile} --language-force=python
}

fn_main $@
