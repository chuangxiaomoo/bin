#! /bin/bash

ARCHIVE=~/bin/.m1doc/
cd ${ARCHIVE}
 . ${ARCHIVE}.pri.bashrc

function fn_agile()                     { 
function fn_manifesto()                 { cat agile_manifesto ;}
function fn_base()                      { cat agile_base rdm ;}
function fn_26_hints()                  { cat agile_26_hints ;}
    local opts=(
        manifesto           # 应运而生
        base
        26_hints
    )
    fn_print $@
}
function fn_adobepdf()                  { cat adobepdf ;}
function fn_asm()                       { cat asm ;}
function fn_awk()                       { cat awk ;}
function fn_sed()                       { cat sed expect ;}
function fn_elf()                       { cat elf ;}
function fn_gprof()                     { cat gprof ;}
function fn_oprofile()                  { cat oprofile ;}
function fn_gcov()                      { cat gcov ;}
function fn_glibc()                     { cat glibc ;}
function fn_info()                      { cat info ;}
function fn_j2box()                     { cat /root/bin/j2box ;}
function fn_lcov()                      { cat lcov ;}
function fn_pinfo()                     { cat pinfo ;}
function fn_puTTY()                     { cat puTTY ;}
function fn_secureCRT()                 { cat secureCRT ;}
function fn_sourceinsight()             { cat sourceinsight ;}
function fn_sloccount()                 { cat sloccount ;}
function fn_tmux()                      { cat tmux ;}
function fn_uboot()                     { cat uboot ;}
function fn_vmware()                    { cat vmware ;}
function fn_yum()                       { cat yum ;}
function fn_tcpdump()                   { cat tcpdump ;}

function fn_wireshark()                 {
function fn_base()                      { cat wireshark_base ;}
function fn_filter()                    { cat wireshark_filter ;}
    local opts=(
        base
        filter              # 规则类似 tcpdump
    )
    fn_print $@
}

function fn_python()                    { ls  python;
function fn_base()                      { cat python_base ;}
function fn_pydoc()                     { cat python_pydoc ;}
function fn_huawei()                    { cat python_huawei ;}
    local opts=(
        pydoc
        base
        huawei              # 未整理
    )
    fn_print $@
}

function fn_ruby()                      { 
function fn_install()                   { cat ruby_install ;}
function fn_base()                      { cat ruby_base ;}
function fn_grammer()                   { cat ruby_grammer ;}
function fn_guide1()                    { cat ruby_guide1 ;}
function fn_guide2()                    { cat ruby_guide2 ;}
function fn_operator()                  { cat ruby_operator ;}
function fn_block()                     { cat ruby_block ;}
function fn__percent()                  { cat ruby__percent ;}
function fn__dollor()                   { cat ruby__dollor ;}
    local opts=(
        install
        base                # 手册 在Ruby中，解决一个问题会有多种方法
        operator            # + - * % 
        _percent            # %
        _dollor             # $
        grammer             # 语法
        guide1              # 教程1：基础概念
        guide2              # 教程2：iterate
        block               # loop while if else case
    )
    fn_print $@
}

function fn_regex()                     { cat regex ;}
function fn_grep()                      { cat grep ;}
function fn_find()                      { cat find ;}

function fn_google()                    { cat google google_keywords ;}
function fn_chrome()                    { cat chrome ;}

function fn_software()                   {
function fn_fundamental()               { cat software_fundamental ;}
function fn_guru()                      { cat software_guru ;}
function fn_01_社会学()                 { cat software_01_社会学 ;}
function fn_02_工程学()                 { cat software_02_工程学 ;}
function fn_03_软件过程改进建议()       { cat software_03_软件过程改进建议 ;}
    local opts=(
        fundamental
        01_社会学
        02_工程学
        guru                            # 编程大师
        03_软件过程改进建议
    )
    fn_print $@
}

function fn_gcc()                       {
function fn_fundamental()               { cat gcc_fundamental ;}
function fn_01_preprocess()             { cat gcc_01_preprocess ;}
function fn_02_header_file_include()    { cat gcc_02_header_file_include ;}
function fn_03_ld_wrap()                { cat gcc_03_ld_wrap ;}
function fn_ec_闭包()                   { cat gcc_ec_闭包 ;}
function fn_macro()                     { cat gcc_macro ;}

    local opts=(
        fundamental
        01_preprocess                   # gcc -E
        02_header_file_include          # 包含顺序及头文件依赖
        03_ld_wrap
        ec_闭包
        macro                           # 宏.
    )
    fn_print $@
}
function fn_make() {
function fn_link()                      { cat make_link ;}
function fn_base()                      { cat make_base ;}
function fn_func()                      { cat make_func ;}
function fn_skeleton()                  { cat make_skeleton ;}
function fn_var_cmdline()               { cat make_var_cmdline ;}
function fn_var_debug()                 { cat make_var_debug ;}
function fn_var_inner()                 { cat make_var_inner ;}
function fn_lib_dynamic()               { cat make_lib_dynamic ;}
function fn_lib_static()                { cat make_lib_static ;}
function fn_shell()                     { cat make_shell ;}
function fn_make-C()                    { cat make_make-C ;}

    local opts=(
        base
        func
        skeleton
        shell
        make-C

        lib_dynamic
        lib_static

        var_cmdline
        var_debug
        var_inner
    )
    fn_print $@
}

function fn_virtualbox()                { cat virtualbox vmware ;}

function fn_linux()                     { 
function fn_cron()                      { cat linux_cron ;}
function fn_fundamental()               { cat linux_fundamental ;}
function fn_kernel()                    { cat linux_kernel ;}
function fn_ldd3()                      { cat linux_ldd3 ;}
function fn_boot()                      { cat linux_boot ;}
function fn_time管理()                  { cat linux_time管理 ;}
function fn_IPC()                       { cat linux_IPC ;}
function fn_proc()                      { cat linux_proc ;}
function fn_free_buffer_cache()         { cat linux_free_buffer_cache ;}
function fn_udev()                      { cat linux_udev ;}
function fn_mtd()                       { cat linux_mtd ;}
function fn_ubifs()                     { cat linux_ubifs ;}
function fn_lockfile()                  { cat linux_lockfile ;}
function fn_memory()                    { cat linux_memory ;}
function fn_aout()                      { cat linux_aout ;}
    local opts=(
        aout                            # a.out目标文件格式 & 程序员自我修养
        fundamental
        kernel
        memory                          # 减少内存使用
        cron
        ldd3                            # Linux Device Driver Edition3
        IPC
        boot
        mtd                             # ubi
        ubifs
        udev
        lockfile                        # lockfile-progs and flock
        proc                            # sys/vm
        free_buffer_cache               # 
        time管理
    )
    fn_print $@
}

#
# . busybox_tftp
function fn_busybox()                   { 
function fn_man()                       { cat busybox_man ;}
function fn_arch()                      { cat busybox_arch ;}
function fn_ftp()                       { cat busybox_ftp ;}
function fn_tftp()                      {   . busybox_tftp ;}
function fn_top()                       { cat busybox_top ;}
function fn_udhcpc()                    { cat busybox_udhcpc ;}
    local opts=(
        man
        arch
        ftp
        tftp
        top
        udhcpc
    )
    fn_print $@
}

# bash中以${!name}形式出现的变量替换，就是间接替换。
# bash首先，计算$name的值，并用它的值来替换中括号里面的值，再作一次变量替换。
function fn_bash() {
function fn_fundamental()               { cat bash_fundamental ;}
function fn_cross_compile()             { cat bash_cross_compile ;}
function fn_00_函数bg时main挂住了()     { cat bash_00_函数bg时main挂住了 ;}
function fn_01_PIPE会使变量为空()       { cat bash_01_PIPE会使变量为空 ;}
function fn_02_unquoted_star将被扩展()  { cat bash_02_unquoted_star将被扩展 ;}
function fn_03_unquot_去两边空格()      { cat bash_03_unquot_去两边空格 ;}
function fn_04_算术运算()               { cat bash_04_算术运算 ;}
function fn_05_大括号_冒号_操作符运算() { cat bash_05_大括号_冒号_操作符运算 ;}
function fn_06_将字符串拆分成数组()     { cat bash_06_将字符串拆分成数组 ;}
function fn_color()                     { cat bash_color ;}
function fn_common_sense_常识()         { cat bash_common_sense_常识 ;}
function fn_echo_last_cmd()             { cat bash_echo_last_cmd ;}
function fn_getopts()                   { cat bash_getopts ;}
function fn_kill_trap()                 { cat bash_kill_trap ;}
function fn_tcpip()                     { cat bash_tcpip ;}
function fn_readline()                  { cat bash_readline ;}
function fn_redirection()               { cat bash_redirection ;}
function fn_tmo_getopts()               { cat bash_tmo_getopts ;}
function fn_tmo_trap()                  { cat bash_tmo_trap ;}
function fn_dialog()                    { cat bash_dialog ;}
function fn_string()                    { cat bash_string ;}
function fn_array()                     { cat bash_array ;}
function fn_PIPESTATUS()                { cat bash_PIPESTATUS ;}
function fn_export()                    { cat bash_export ;}
    local opts=(
        fundamental
        cross_compile
        00_函数bg时main挂住了
        01_PIPE会使变量为空
        02_unquoted_star将被扩展        # 不引起来的 * 会被 扩展
        03_unquot_去两边空格
        04_算术运算                     # math
        05_大括号_冒号_操作符运算       # ${parameter:-word} 操作符都以 : 打头 
        06_将字符串拆分成数组           # 字串中的单个字符操作
        20_beep                         # echo -e "\a" #如果你的终端会发声的话
        color
        common_sense_常识               # try & error
        echo_last_cmd
        getopts
        kill_trap
        tcpip
        readline                        # shortcut 快捷键 -- putty下最好用
        redirection                     # stdout stderr
        string
        array
        tmo_getopts
        tmo_trap
        dialog                          # whiptail
        PIPESTATUS                      # 只可以被提取一次
        export                          # env环境变量
    )
    fn_print $@
}

#
# ATTENTION: Mark time in every case
#
function fn_case() {
function fn_fundamental()               { cat case_fundamental 
                                          cat case_100_搜索过滤 ;}
function fn_s1_SSL_CTX_free段错误()     { cat case_s1_SSL_CTX_free段错误 ;}
function fn_s2_ZXW修改ipcam_cfg段错误() { cat case_s2_ZXW修改ipcam_cfg段错误 ;}

function fn_02_文件不能删除升级失败()   { cat case_02_文件不能删除升级失败 ;}
function fn_03_FACEBOOK中无ftpclient()  { cat case_03_FACEBOOK中无ftpclient ;}
function fn_04_红外夜视只有8m()         { cat case_04_红外夜视只有8m ;}
function fn_05_告警烧加密芯片()         { cat case_05_告警烧加密芯片 ;}
function fn_06_PROFILE解析失败()        { cat case_06_PROFILE解析失败 ;}
function fn_07_multidev增加失败()       { cat case_07_multidev增加失败 ;}
function fn_08_alarm当前状态应该只读()  { cat case_08_alarm当前状态应该只读 ;}
function fn_09_4358日立机芯无自动聚焦() { cat case_09_4358日立机芯无自动聚焦 ;}
function fn_10_MAC非00打头网络故障()    { cat case_10_MAC非00打头网络故障 ;}
function fn_11_mount替换之殇()          { cat case_11_mount替换之殇 ;}
function fn_12_ini_no_sec()             { cat case_12_ini_no_sec ;}
function fn_13_No_init_found()          { cat case_13_No_init_found ;}
function fn_14_web_dont_work()          { cat case_14_web_dont_work ;}
function fn_15_multi_plt4m_多平台()     { cat case_15_multi_plt4m_多平台 ;}
function fn_16_WiFi_AP_切换卡顿()       { cat case_16_WiFi_AP_切换卡顿 ;}
function fn_17_secureCRT_F5_罢工()      { cat case_17_secureCRT_F5_罢工 ;}
function fn_18_yishi_NFS_boot_fail()    { cat case_18_yishi_NFS_boot_fail ;}
function fn_19_ssh_Permission_denied()  { cat case_19_ssh_Permission_denied ;}
function fn_20_svn_passwd_leak()        { cat case_20_svn_passwd_leak ;}
function fn_21_对讲时_PC端有_echo()     { cat case_21_对讲时_PC端有_echo ;}
function fn_22_feed_watchdog_fail()     { cat case_22_feed_watchdog_fail ;}
function fn_23_Tool_connection_fail()   { cat case_23_Tool_connection_fail ;}
function fn_24_3g_reconnect()           { cat case_24_3g_reconnect ;}
function fn_25_soap_被回复_http()       { cat case_25_soap_被回复_http ;}
function fn_26_设备CPU占用率过高()      { cat case_26_设备CPU占用率过高 ;}
function fn_27_JCP命令IGMP输出乱码()    { cat case_27_JCP命令IGMP输出乱码 ;}
function fn_28_汉字UTF8串尾乱码()       { cat case_28_汉字UTF8串尾乱码 ;}
function fn_29_设备到PC单向ping通()     { cat case_29_设备到PC单向ping通 ;}
function fn_30_ftp_ServerU_文件不完整() { cat case_30_ftp_ServerU_文件不完整 ;}
function fn_31_REBOOT_LINUX_fail()      { cat case_31_REBOOT_LINUX_fail ;}
function fn_32_IE吃掉_mousedown_click() { cat case_32_IE吃掉_mousedown_click ;}
function fn_33_云台运动步长不一致()     { cat case_33_云台运动步长不一致 ;}
function fn_34_升级中的错误处理()       { cat case_34_升级中的错误处理 ;}
function fn_35_jcp_blocked_on_conf()    { cat case_35_jcp_blocked_on_conf ;}
function fn_36_移动侦测时卡顿()         { cat case_36_移动侦测时卡顿 ;}

function fn_54_ZXWSDK告警丢失()         { cat case_54_ZXWSDK告警丢失 ;}
function fn_55_bind_失败_No_such_file() { cat case_55_bind_失败_No_such_file ;}
function fn_50_前置条件之重启()         { cat case_50_前置条件之重启 ;}
function fn_51_多行OSD出现UNKNOW()      { cat case_51_多行OSD出现UNKNOW ;}
function fn_52_TUTK_获取不到配置值()    { cat case_52_TUTK_获取不到配置值 ;}
function fn_53_平台删除对应用的影响()   { cat case_53_平台删除对应用的影响 ;}

function fn_70_merge_error()            { cat case_70_merge_error ;}
function fn_71_行淫的女人_小魔的牢骚()  { cat case_71_行淫的女人_小魔的牢骚 ;}
function fn_72_那些失败的TASK()         { cat case_72_那些失败的TASK ;}

function fn_80_西昌门禁()               { cat case_80_西昌门禁 ;}
function fn_81_代码实现_从0开始()       { cat case_81_代码实现_从0开始 ;}
function fn_82_HIK协议实现1个月后傻眼() { cat case_82_HIK协议实现1个月后傻眼 ;}

function fn_a0_vobx_tool_filename()     { cat case_a0_vobx_tool_filename ;}
function fn_a1_fork_locked()            { cat case_a1_fork_locked ;}
function fn_a2_quote_input_delay()      { cat case_a2_quote_input_delay ;}

function fn_56_ini写入时间耗时3秒()     { cat case_56_ini写入时间耗时3秒 ;}

    local opts=(
        fundamental
        s1_SSL_CTX_free段错误
        s2_ZXW修改ipcam_cfg段错误
        02_文件不能删除升级失败         # also busybox SegmentFault
        03_FACEBOOK中无ftpclient
        04_红外夜视只有8m
        05_告警烧加密芯片
        06_PROFILE解析失败
        07_multidev增加失败
        08_alarm当前状态应该只读
        09_4358日立机芯无自动聚焦
        10_MAC非00打头网络故障
        11_mount替换之殇
        12_ini_no_sec
        13_No_init_found
        14_web_dont_work
        15_multi_plt4m_多平台
        16_WiFi_AP_切换卡顿
        17_secureCRT_F5_罢工 
        18_yishi_NFS_boot_fail
        19_ssh_Permission_denied
        20_svn_passwd_leak
        21_对讲时_PC端有_echo
        22_feed_watchdog_fail
        23_Tool_connection_fail
        24_3g_reconnect
        25_soap_被回复_http
        26_设备CPU占用率过高
        27_JCP命令IGMP输出乱码
        28_汉字UTF8串尾乱码             # UTF-8 编码
        29_设备到PC单向ping通
        30_ftp_ServerU_文件不完整
        31_REBOOT_LINUX_fail
        32_IE吃掉_mousedown_click       # 执行力 怀疑精神
        33_云台运动步长不一致           # 问题：你如何知道->量化数据
        34_升级中的错误处理             # 错误处理的原则：忠实还原
        35_jcp_blocked_on_conf          # 当jcp通过conf实现时，阻塞了
        36_移动侦测时卡顿               # 测试方法论：分治

        a0_vobx_tool_filename           # 虚拟机存储映射后WINDOWS文件系统时，filename不区别大小写
        a1_fork_locked                  # fork()阻塞了

        a2_quote_input_delay            # ------------ 独孤九剑之diff VIM 引号延迟 --------------

        50_前置条件之重启               # API测试原则：配置文件相关都需要重启
        51_多行OSD出现UNKNOW            # API测试原则：条件分支，五大特性之完整性
        52_TUTK_获取不到配置值          # API测试原则：No test, no release
        53_平台删除对应用的影响         # API测试原则：一个测试套伯至少3个用例:头尾身
        54_ZXWSDK告警丢失               # API设计原则: 进程锁，勿注释代码如何运作
        55_bind_失败_No_such_file       # API设计原则: API的生命在于复用
        56_ini写入时间耗时3秒           # API设计原则: 性能测试用例

        70_merge_error                  # 朝令夕改 luo
        71_行淫的女人_小魔的牢骚        # care你的牢骚 PK产品经理 学会吐槽
        72_那些失败的TASK               # 管理总结

        80_西昌门禁                     # 软件方法论：先固化，再优化。按契约编程
        81_代码实现_从0开始             # 软件方法论：命名考虑应用场景。mxml id 动态扩展时
        82_HIK协议实现1个月后傻眼       # 软件方法论：横向考虑设计架构，纵向考虑可用性。

    )
    fn_print $@
}

function fn_socket()                    {
function fn_ip点分十进制转换()          { cat socket_ip点分十进制转换 ;}
function fn_multicast多播()             { cat socket_multicast多播 ;}
    local opts=(
        ip点分十进制转换
        multicast多播                   # unicast - multicast - broadcast
    )
    fn_print $@
}


function fn_cstd()                      {
function fn_scanf()                     { cat cstd_scanf ;}
function fn_printf()                    { cat cstd_printf ;}
function fn_bsearch()                   { cat cstd_bsearch ;}
    local opts=(
        scanf
        printf
        bsearch
        qsort
    )
    fn_print $@
}

function fn_clang() {
function fn_C调用C++链接库()            { cat clang_C调用C++链接库 ;}
function fn_cdecl()                     { cat clang_cdecl
                                          cat clang_array ;}
function fn_const()                     { cat clang_const ;}
function fn_extern()                    { cat clang_extern ;}
function fn_operator_predcedence()      { cat clang_operator_predcedence ;}
function fn_string()                    { cat clang_string ;}
function fn_strtok_r()                  { cat clang_strtok_r ;}
function fn_struct()                    { cat clang_struct ;}
function fn_typedef()                   { cat clang_typedef ;}
function fn_warning()                   { cat clang_warning ;}
function fn_pointer()                   { cat clang_pointer ;}
function fn_callback()                  { cat clang_callback ;}
function fn_linklist()                  { cat clang_linklist ;}
function fn_package()                   { cat clang_package ;}
function fn_macro()                     { cat clang_macro ;}
function fn_memorylayout()              { cat clang_memorylayout ;}
# ----- posix -------
function fn_error()                     { cat clang_error ;}
function fn_errno()                     { cat clang_errno ;}
function fn_open()                      { cat clang_open ;}
function fn_syslog()                    { cat clang_syslog ;}
function fn_time()                      { cat clang_time ;}
function fn_non_block_func()            { cat clang_non_block_func ;}
function fn_non_sig_select()            { cat clang_non_sig_select ;}
function fn_signal()                    { cat clang_signal ;}
function fn_coredump()                  { cat clang_signal ;}
function fn_tty()                       { cat clang_tty ;}
function fn_iconv()                     { cat clang_iconv ;}
function fn_md5()                       { cat clang_md5 ;}
function fn_bit()                       { cat clang_bit ;}
function fn_strncpy()                   { cat clang_strncpy ;}
function fn_snprintf()                  { cat clang_snprintf ;}
function fn_thread_lock()               { cat clang_thread_lock ;}
function fn_fwrite()                    { cat clang_fwrite ;}
function fn_getaddrinfo_a()             { cat clang_getaddrinfo_a ;}
function fn_sync()                      { cat clang_sync ;}
function fn_getopt_long()               { cat clang_getopt_long ;}
function fn_strtol()                    { cat clang_strtol ;}
function fn_atoi()                      { cat clang_atoi ;}
function fn_nonblock()                  { cat clang_nonblock ;}

    local opts=(
        C调用C++链接库
        cdecl
        const
        extern
        bit
        operator_predcedence
        pointer                 # 指针 
        callback                # 注册加回调指针实现多态or重载
        linklist                # 注册之链表
        package                 # 头文件封装
        memorylayout            # 32位LINUX系统`虚拟地址空间分布`
        string
        struct
        typedef
        thread_lock             # 
        thread_confict_malloc   # fork() and malloc() can't run together
        warning
        macro
        # ------ posix ------
        nonblock                # setjmp,longjmp和sigsetjmp,siglongjmp 
        atoi                    # atou
        md5                     # 
        strtol                  # hex work well
        iconv                   # utf-8 gbk wide-character handling ascii
        syslog
        error                   # 编译错误信息
        errno
        open
        sync                    # blocking
        fwrite                  # fprintf fsync fflush
        signal
        strncpy                 # string serial
        strtok_r
        snprintf                # more safe vs strncpy()
        coredump
        time                    # posix TZ
        tty                     # serial port
        non_block_func
        non_sig_select
        getaddrinfo_a           # getaddrinfo asynchronous 
        getopt_long
    )
    fn_print $@
}

function fn_binutils()                  { 
function fn_readelf()                   { cat binutils_readelf ;}
function fn_objdump()                   { cat binutils_objdump ;}
function fn_strip()                     { cat binutils_strip ;}
    local opts=(
        elf                     # info elf & man elf
        ar
        nm
        readelf                 # -h|--file-header | grep Mach 查看CPU架构
        ldd                     # 只是一个shell脚本，通过ld-linux.so实现
        objdump                 # 
        strip                   # 瘦身
    )
    fn_print $@
}

function fn_coreutils() {
function fn_manual()                    { cat coreutils_manual ;}
    local opts=(
        manual                          # list
    )
    fn_print $@
}

function fn_cxx() {
function fn_3000问()                    { cat cxx_3000问 ;}
function fn_fundamental()               { cat cxx_fundamental ;}
function fn_operator_predcedence()      { cat cxx_operator_predcedence ;}
function fn_op_names()                  { cat cxx_op_names ;}
function fn_const_char()                { cat cxx_const_char ;}

    local opts=(
        3000问
        fundamental
        operator_predcedence
        op_names
        const_char
    )
    fn_print $@
}

function fn_design() {
function fn_Designing_Design()          { cat design_Designing_Design ;}
function fn_pm()                        { cat design_pm ;}
function fn_config()                    { cat design_config ;}
function fn_startup()                   { cat design_startup ;}
function fn_UI()                        { cat design_UI ;}
function fn_patterns()                  { cat design_patterns ;}

    local opts=(
        Designing_Design                # 设计中的设计
        pm                              # project manager
        config                          # 配置
        startup                         # 需求分析、概要设计、详细设计析义
        patterns
        UI                              # 不要让客户思考 don't make user thingking
    )
    fn_print $@
}

function fn_gdb() {
function fn_0_haoel()                   { cat gdb_0_haoel ;}
function fn_4_查看源程序()              { cat gdb_4_查看源程序 ;}
function fn_5_查看运行时数据()          { cat gdb_5_查看运行时数据 ;}
function fn_7_改变程序的执行()          { cat gdb_7_改变程序的执行 ;}
function fn_attach()                    { cat gdb_attach ;}
function fn_breakpoints()               { cat gdb_breakpoints ;}
function fn_convention()                { cat gdb_convention ;}
function fn_most_freq_cmds()            { cat gdb_most_freq_cmds ;}
function fn_print_exp()                 { cat gdb_print_exp ;}
function fn_reverse_debug()             { cat gdb_reverse_debug ;}
function fn_run()                       { cat gdb_run ;}
function fn_SIGSEGV()                   { cat gdb_SIGSEGV ;}
function fn_source()                    { cat gdb_source ;}

    local opts=(
        0_haoel
        4_查看源程序
        5_查看运行时数据
        7_改变程序的执行
        attach
        convention
        breakpoints
        most_freq_cmds
        print_exp
        reverse_debug
        run
        SIGSEGV
        source
    )
    fn_print $@
}


function fn_git()                       { 
function fn_base()                      { cat git_base ;}
function fn_commit()                    { cat git_commit ;}
function fn_github()                    { cat git_github ;}
function fn_svndiff()                   { cat git_svndiff ;}
function fn_diff()                      { cat git_diff ;}
function fn_add()                       { cat git_add ;}
function fn_rm()                        { cat git_rm ;}
function fn_config()                    { cat git_config ;}
function fn_subconf()                   { cat git_subconf ;}
function fn_log()                       { cat git_log ;}
function fn_cat-file()                  { cat git_cat-file ;}
    local opts=(
        base                    # 入门
        add
        config                  # ln -sf ~/bin/.m1doc/git_config .gitconfig
        subconf                 # .git/config
        commit
        diff                    # 
        rm
        svndiff                 # 与svn比较
        github                  # create 或 pull 一个项目 from github.com 
        log
        cat-file
    )
    fn_print $@
}

function fn_svn() {
function fn_fundamental()               { cat svn_fundamental ;}
function fn_cleanup()                   { cat svn_cleanup ;}
function fn_lock()                      { cat svn_lock ;}
function fn_help()                      { cat svn_help ;}
function fn_merge()                     { cat svn_merge ;}
function fn_visual_svn_server()         { cat svn_visual_svn_server ;}
function fn_revision()                  { cat svn_revision ;}
function fn_stat()                      { cat svn_stat ;}
function fn_diff()                      { cat svn_diff ;}
function fn_revert()                    { cat svn_revert 
                                          cat svn_training ;}
function fn_add()                       { cat svn_add ;}
function fn_log()                       { cat svn_log ;}
function fn_resolve()                   { cat svn_resolve ;}
function fn_relocate()                  { cat svn_relocate ;}
    local opts=(
        fundamental
        add
        lock
        cleanup
        revision
        stat
        diff
        revert
        resolve
        relocate
        help
        log
        merge
        visual_svn_server               # Visual SVN Server
    )
    fn_print $@
}

function fn_vim() {
function fn_hex()                       { cat vim_hex ;}
function fn_fundamental()               { cat vim_fundamental ;}
function fn_align()                     { cat vim_align ;}
function fn_hotkey()                    { cat vim_hotkey ;}
function fn_install()                   { cat vim_install ;}
function fn_plugin()                    { cat vim_plugin ;}
function fn_clang_complete()            { cat vim_clang_complete ;}
function fn_NERDtree()                  { cat vim_NERDtree ;}
function fn_diff()                      { cat vim_diff ;}
function fn_quickfix()                  { cat vim_quickfix ;}
function fn_hilight()                   { cat vim_hilight ;}

    local opts=(
        fundamental
        hex
        diff
        align
        clang_complete
        hotkey
        install
        plugin
        quickfix
        NERDtree
        hilight
    )
    fn_print $@
}

function fn_w3m() {
function fn_dump()                      { cat w3m_dump ;}
function fn_hotkey()                    { cat w3m_hotkey ;}

    local opts=(
        dump
        hotkey
    )
    fn_print $@
}

function fn_cmd()                       {
function fn_Essential()                 { cat cmd_Essential ;}
function fn_arping()                    { cat cmd_arping ;}
function fn_tee()                       { cat cmd_tee ;}
function fn_fdisk()                     { cat cmd_fdisk ;}
function fn_date()                      { cat cmd_date ;}
function fn_dd()                        { cat cmd_dd ;}
function fn_iperf()                     { cat cmd_iperf ;}
function fn_himm()                      { cat cmd_himm ;}
function fn_ifconfig()                  { cat cmd_ifconfig ;}
function fn_ln()                        { cat cmd_ln ;}
function fn_mount()                     { cat cmd_mount ;}
function fn_patch()                     { cat cmd_patch ;}
function fn_route()                     { cat cmd_route ;}
function fn_strace()                    { cat cmd_strace ;}
function fn_sort()                      { cat cmd_sort ;}
function fn_rar()                       { cat cmd_tar ;}
function fn_tar()                       { cat cmd_tar ;}
function fn_zip()                       { cat cmd_tar ;}
function fn_xargs()                     { cat cmd_xargs ;}
function fn_sysv-rc-conf()              { cat cmd_rcconf ;}
function fn_rcconf()                    { cat cmd_rcconf ;}
function fn_top()                       { cat cmd_top;}
function fn_lsof()                      { cat cmd_lsof ;}
function fn_tr()                        { cat cmd_tr ;}
function fn_dialog()                    { cat cmd_dialog ;}
function fn_hexdump()                   { cat cmd_hexdump ;}
function fn_cpio()                      { cat cmd_cpio ;}
function fn_head()                      { cat cmd_tail ;}
function fn_tail()                      { cat cmd_tail ;}
function fn_mktemp()                    { cat cmd_mktemp ;}
function fn_kill()                      { cat cmd_kill ;}
function fn_install()                   { cat cmd_install ;}
function fn_calltree()                  { cat cmd_calltree ;}
function fn_nc()                        { cat cmd_nc ;}
function fn_ps()                        { cat cmd_ps ;}
function fn_timeout()                   { cat cmd_timeout ;}
    local opts=(
        Essential
        arping                  # arp -D 检测IP冲突 iputils
        calltree
        date
        dd
        dialog
        easy_install            # 由PEAK(Python Enterprise Application Kit)开发的setupTOOLS包里带的一个命令
        fdisk
        himm
        hexdump                 # xxd od
        ifconfig
        install
        iperf
        ln
        lsof
        mount
        mktemp                  # mount_as_tmpfs : 将一个目录mount为tmpfs
        kill                    # kill -0
        patch
        rar
        rcconf                  # 默认启动方式 /etc/init/*.conf
        sysv-rc-conf
        route
        sort
        strace
        head                    # 
        sleep                   # sleep 1.5h # 1.5 is ok, and m for min, and h for hour
        screen                  # 让任务启动为bg_task，不以终端为父进程
        tail
        tee
        tr
        tar
        top
        xargs
        zip
        cpio                    # 与tar类似的打包格式cpio，结合压缩命令gzip zcat
        usb-creator-gtk         # startup-disk-creator 制作启动盘
        nc
        ps
    )
    # 每天一个linux命令，还有其它非常有价值的东西
    # www.cnblogs.com/peida/tag/linux命令
    fn_print $@
}

function fn_bat()                       {
function fn_manul()                     { cat bat_manul ;}
function fn_examples()                  { cat bat_examples ;}
function fn_fundamental()               { cat bat_fundamental ;}
    local opts=(
        fundamental
        manul
        examples
    )
    fn_print $@
}

function fn_win()                       {
function fn_win7()                      { cat windows_win7 
                                          cat foxmail ;}
function fn_syscmd()                    { cat windows_syscmd ;}
function fn_02_清晰显示()               { cat windows_02_清晰显示 ;}
function fn_03_看雪()                   { cat windows_03_看雪 ;}
function fn_excel()                     { cat windows_excel ;}
function fn_word()                      { cat windows_word ;}
function fn_visio()                     { cat win_visio ;}
function fn_mpp()                       { cat windows_mpp ;}
function fn_beyondcompare3()            { cat windows_beyondcompare3 ;}
function fn_rightclick()                { cat windows_rightclick ;}
function fn_U盘DOS启动盘制作工具()      { cat windows_U盘DOS启动盘制作工具 ;}
function fn_regedit()                   { cat win_regedit ;}
function fn_qmacro()                    { cat win_qmacro ;}
    local opts=(
        syscmd                  # usb systeminfo printer viso
        02_清晰显示
        03_看雪                 # encrypt 加密解密
        win7                    # 快捷键
        rightclick              # 添加右键编辑 GVIM bc3
        excel
        word                    # office
        visio
        mpp                     # msproject task
        beyondcompare3          # BC3 bc3
        大拿万能老板键          # 大拿软件系列 boss
        qmacro                  # 按键精灵 
        Mobi阅读器              # mobipocket_reader
        修复网络链接无法关闭    # 在任务管理器中关闭及重新开启 explorer.exe
        U盘DOS启动盘制作工具    # MS-DOS DOS 
        regedit                 # 注册表命令
    )
    fn_print $@
}

function fn_msys()                      { cat msys ;}
function fn_cygwin()                    {
function fn_install()                   { cat cygwin_install ;}
function fn_config()                    { cat cygwin_config ;}
    local opts=(
        install
        config
    )
    fn_print $@
}

function fn_curl()                      {
function fn_manual()                    { cat curl_manual ;}
function fn_examples()                  { cat curl_examples ;}
    local opts=(
        manual
        examples
    )
    fn_print $@
}

# cat http ;
function fn_http()                      {
function fn_base()                      { cat http_base ;}
function fn_method()                    { cat http_method ;}
function fn_boa()                       { cat http_boa ;}
    local opts=(
        base                            # URL特殊字符 REST
        method                          # get post put del cgi-bin
        boa
    )
    fn_print $@
}

function fn_circuit()                   {
function fn_01_三极管的下拉电阻()       { cat circuit_01_三极管的下拉电阻 ;}
function fn_11_色环电阻识别()           { cat circuit_11_色环电阻识别 ;}
    local opts=(
        01_三极管的下拉电阻
        11_色环电阻识别
    )
    fn_print $@
}

function fn_vs()                        { cat vs ;}
function fn_bc()                        { cat bc ;}
function fn_url()                       { cat url ;} # blog

function fn_perl()                      { 
function fn_gate_入门()                 { cat perl_gate_入门 ;}
function fn_pod()                       { cat perl_pod ;}
    local opts=(
        gate_入门
        pod
        excel2txt                       # 转换工具，很棒 GOOGLE安装这
    )
    fn_print $@
}

function fn_opera()                     { cat opera ;}
function fn_1Line()                     { cat 1Line ;}
function fn_graphviz()                  { cat graphviz ;}
function fn_gnuplot()                   { cat gnuplot ;}
function fn_firefox()                   { cat firefox ;}
function fn_firebug()                   { cat firebug ;}
function fn_figlet()                    { cat figlet ;}

function fn_services()                  {
function fn_nfs()                       { cat services_nfs ;}
function fn_samba()                     { cat services_samba 
                                          cat services_pppoe ;}
function fn_ftpd()                      { cat services_ftpd android_ftpput ;}
function fn_vsftpd()                    { cat services_vsftpd ;}
function fn_ntp()                       { cat services_ntp ;}
function fn_syslogd()                   { cat services_syslogd ;}
function fn_tftpd()                     { cat services_tftpd ;}
    local opts=(                        # etc
        nfs
        ntp
        samba
        ftpd                            # in.ftpd
        tftpd
        vsftpd
        syslogd
    )
    fn_print $@
}

function fn_surveil()                   {
function fn_video()                     { cat surveil_video ;}
function fn_video_resolution()          { cat surveil_video_resolution ;}
function fn_ptz()                       { cat surveil_ptz ;}
function fn_ac_音频()                   { cat surveil_ac_音频 ;}
function fn_op_光学知识()               { cat surveil_op_光学知识 ;}
function fn_jc_捷高Style()              { cat surveil_jc_捷高Style ;}
function fn_term()                      { cat surveil_term ;}
    local opts=(
        ac_音频
        op_光学知识
        jc_捷高Style
        video
        video_resolution                # 尺寸
        term                            # 常用参数
        ptz
    )
    fn_print $@
}

function fn_h264()                      { cat h264_tree
                                          cat h264_base
                                          cat h264_case
                                          cat h264_frame_sps_pps_I_B_P_IDR
                                          cat h264_profile
                                          cat h264_luo
                                          cat h264_codec
                                          cat h264_assess
                                          cat h264_rtp
                                          cat h264_rtmp
                                          cat h264_ffmpeg
                                        }

function fn_jco()                       { 
function fn_pcb()                       { cat jco_pcb ;}
function fn_delay_service()             { cat jco_delay_service ;}
function fn_msg()                       { cat jco_msg
                                              jco_event_task.i ;}
function fn_platform()                  { cat jco_platform ;}
function fn_alarm_design()              { cat jco_alarm_design ;}
function fn_alarm_software()            { cat jco_alarm_software ;}
function fn_alarm_hardware()            { cat jco_alarm_hardware sdcard_mbr ;}
function fn_alarm_motion_detc()         { cat jco_alarm_motion_detc ;}
function fn_capture()                   { cat jco_capture ;}
function fn_jcp()                       { cat jco_jcp ;}
function fn_encode_para()               { cat jco_encode_para ;}
function fn_record()                    { cat jco_record ;}
function fn_prerecord()                 { cat jco_prerecord ;}
function fn_password()                  { cat jco_password ;}
function fn_zxw()                       { cat jco_zxw ;}
function fn_3g()                        { cat jco_3g ;}
function fn_time()                      { cat jco_time ;}
function fn_httpd_n_onvif()             { cat jco_httpd_n_onvif ;}
function fn_ptz20()                     { cat jco_ptz20 ;}
function fn_ir()                        { cat jco_ir ;}
function fn_upgrade_prog_bar()          { cat jco_upgrade_prog_bar ;}
function fn_pioneer()                   { cat jco_pioneer ;}
function fn_dome()                      { cat jco_dome ;}

    local opts=(
        alarm_design
        alarm_hardware
        alarm_software
        alarm_motion_detc
        capture
        dome                # 球机
        delay_service
        encode_para         # devvecfg
        httpd_n_onvif       # 融合方案
        upgrade_prog_bar    # 升级进度方案
        jcp
        msg
        password
        platform
        ptz20
        pioneer             # 开拓者
        zxw
        record
        prerecord
        3g
        ir                  # infrared
        time                # data ntp timecfg related
    )
    fn_print $@
}

function fn_ideas()                     { cat ideas ;}

function fn_test()                      {
function fn_guru()                      { cat test_guru ;}
function fn_fundamental()               { cat test_fundamental ;}
function fn_gtest()                     { cat test_gtest ;}
function fn_webpage()                   { cat test_webpage ;}
function fn_web_howto()                 { cat test_web_howto ;}

function fn_01_用例设计原则()           { cat test_01_用例设计原则 ;}
function fn_02_梦想与实现()             { cat test_02_梦想与实现 ;}
function fn_03_五个要点()               { cat test_03_五个要点 ;}
function fn_04_集成测试()               { cat test_04_集成测试 ;}
function fn_11_测试工程师如何提BUG()    { cat test_11_测试工程师如何提BUG ;}
    local opts=(
        guru
        gtest
        fundamental                     # 测试就是写方程
        webpage
        web_howto                       # WEB测试学习指南

        01_用例设计原则
        02_梦想与实现
        03_五个要点                     # 测试的第一原则：思维很混乱时查看
        04_集成测试                     # 
        11_测试工程师如何提BUG
    )
    fn_print $@
}


function fn_codingstyle()               { cat codingstyle_base
                                          cat codingstyle_kernel 
                                          cat codingstyle_qt
                                          cat codingstyle_rule      # 关键在映射规则
                                          cat codingstyle_cxx
                                          cat tips_4_reading_code
                                          cat tips_4_reading_cxx
}

function fn_coolshell()                 {
    coolshell_什么样分工才是好的
    return $?
}

function fn_Principle()                 {
    cat Priciple_jco
    cat Priciple_coding
    cat Priciple_howto_assess
    cat Priciple_系统架构
    cat Priciple_RnD_efficiency
}

function fn_codetool()                  {
function fn_splint()                    { cat codetool_splint ;}
function fn_cppcheck()                  { cat codetool_cppcheck ;}
function fn_calltree()                  { cat codetool_calltree ;}
    local opts=(
        fundamental
        splint
        cppcheck            # my rules 军规
        calltree            # g p r o f 可以生成更棒的图
    )
    fn_print $@
}

function fn_CC()                        {
function fn_01_圈复杂度及其计算()       { cat CC_01_圈复杂度及其计算 ;}
function fn_SourceMonitor()             { cat CC_SourceMonitor ;}
function fn_hfcca()                     { cat CC_hfcca ;}
function fn_cppncss()                   { cat CC_cppncss ;}
    local opts=(
        01_圈复杂度及其计算
        SourceMonitor
        hfcca
        cppncss             # only a toy
    )
    fn_print $@
}

function fn_apt-get()                   {
function fn_source()                    { cat apt-get_source ;}
function fn_command()                   { cat apt-get_command ;}
    local opts=(
        source
        command
    )
    fn_print $@
}
function fn_java()                      { cat java ;}
function fn_scp()                       { cat ssh ;}
function fn_ssh()                       { cat ssh ;}
function fn_libevent()                  { cat libevent ;}
function fn_in_event()                  { cat in_event ;}
function fn_live555()                   { cat live555 ;}
function fn_time_call_engine()          { cat time_call_engine ;}
function fn_hudson()                    { cat hudson ;}
function fn_vlc()                       { cat vlc ;}
function fn_framework()                 { cat framework ;}
function fn_refactoring()               { cat refactoring ;}

function fn_postgresql()                { cat postgresql ;}

function fn_mysql()                     { 
function fn_base()                      { cat mysql_base ;}
function fn_extend()                    { cat mysql_extend ;}
function fn_complete()                  { cat mysql_complete ;}
function fn_troubleshooting()           { cat mysql_troubleshooting ;}
function fn_migrate()                   { cat mysql_migrate ;}
    local opts=(
        base                # 安装及startup on Linux
        extend              # sql 的扩展及命令行shell
        complete            # 语句大全
        migrate             # 
        troubleshooting
    )
    fn_print $@
}

function fn_sql()                       {
function fn_kts()                       { cat sql_kts ;}
function fn_min()                       { cat sql_min ;}
function fn_base()                      { cat sql_base ;}
function fn_misc()                      { cat sql_misc ;}       # 重要技巧
function fn_datatype()                  { cat sql_datatype ;}

function fn_show()                      { cat sql_show ;}
function fn_create()                    { cat sql_create ;}
function fn_alter()                     { cat sql_alter ;}
function fn_delete()                    { cat sql_delete ;}
function fn_update()                    { cat sql_update ;}
function fn_select()                    { cat sql_select ;}
function fn_nest_select()               { cat sql_nest_select ;}
function fn_insert()                    { cat sql_insert ;}
function fn_describe()                  { cat sql_describe ;}
function fn_load()                      { cat sql_load ;}
function fn_drop()                      { cat sql_drop ;}
function fn_join()                      { cat sql_join ;}
function fn_function()                  { cat sql_function ;}   # ? FUNCTIONS
function fn_execute()                   { cat sql_execute ;}
function fn_procedure()                 { cat sql_procedure ;}  # sql_loop
function fn_operator()                  { cat sql_operator ;}
function fn_optimize()                  { cat sql_optimize ;}
function fn_array()                     { cat sql_array ;}
function fn_tbl_create()                { cat sql_tbl_create ;}
function fn_tbl_temp()                  { cat sql_tbl_temp ;}
function fn_index()                     { cat sql_index ;}
function fn_order()                     { cat sql_order ;}
function fn_dump()                      { cat sql_dump ;}
function fn_condition()                 { cat sql_condition ;}
function fn_group_by_having()           { cat sql_group_by_having ;}
function fn_cp()                        { cat sql_cp ;}
function fn_where_in()                  { cat sql_where_in sql_like ;}
function fn_limit()                     { cat sql_limit ;}
function fn_variable()                  { cat sql_variable ;}
function fn_truncate()                  { cat sql_truncate ;}
function fn_reclaim_space()             { cat sql_reclaim_space ;}
    local opts=(
        kts
        min
        base
        datatype            # int char data time
        # ----- BASE
        create
        describe
        drop                # 删除索引、表和数据库
        delete              # 删除表中的行
        alter               # 修改表结构：添加、修改或删除列
        insert              # 
        update
        select
        limit               # 取最后10条记录：tail & head -n
        nest_select         # 这个哥们的blog很清晰
        show
        load
        where_in            # where in
        # ----- SQL 高级教程
        variable
        condition           # if
        cp                  # 复制表数据or结构(copy)
        dump                # mysqldump
        group_by_having     # 
        index               # id与insert的先后顺序有关，与index(key)无关
        execute             # prepare
        join                # 两个或多个表查询连结
        function            # 常用函数
        procedure           # 存储过程 loop
        operator
        optimize            # 优化
        order
        truncate            # 
        array
        tbl_create          # 以表为操作
        tbl_temp            # 临时表 内存表(HEAP) 
        reclaim_space       # InnoDB
    )
    fn_print $@
}

function fn_xml()                       {
function fn_base()                      { cat xml_base ;}
function fn_api.c()                     { cat xml_api.c ;}
function fn_api.h()                     { cat xml_api.h ;}
function fn_xsd()                       { cat xml_xsd ;}
function fn_parser()                    { cat xml_parser ;}
function fn_xpath()                     { cat xml_xpath ;}
    local opts=(
        base
        api.c 
        api.h
        parser              # xpath xslt 
        xpath               # perl
        xsd                 # XML Schema xml schema
    )
    fn_print $@
}

function fn_mxml()                      { fn_xml $@ ;}

function fn_json()                      { cat json ;}

function fn_markdown()                  { cat markdown markdown_here ;}

function fn_algo()                      {
function fn_tree()                      { cat algo_tree ;}
    local opts=(
        tree
        link
        queue
    )
    fn_print $@
}

function fn_report()                    { 
function fn_球机不能控制()              { cat report_球机不能控制 ;}
function fn_可观可控可溯设计()          { cat report_可观可控可溯设计 ;}
    local opts=(
        球机不能控制                    # 固始平安城市项目球机不能控制
        可观可控可溯设计
    )
    fn_print $@
}

function fn_jimxl()                     {
function fn_base()                      { cat jimxl_base ;}
function fn_nvr()                       { cat jimxl_nvr ;}
function fn_goyo()                      { cat jimxl_goyo;}
    local opts=(
        base
        goyo
        nvr                             # nvr 交接
    )
    fn_print $@
}

function fn_alibaba()                   { cat alibaba ;}
function fn_begin()                     { 
function fn_language()                  { cat begin_language ;}
function fn_melody()                    { cat begin_melody ;}
function fn_tool()                      { cat begin_tool ;}
function fn_task()                      { cat begin_task ;}
    local opts=(
        language                        # 新编程语言
        melody                          # 新曲子 -- 一架三角钢琴
        tool                            # 新工具
        task                            # 新任务
    )
    fn_print $@
}

#
# ------------------- 你如何Hold住全场？-------------------------
#
function fn_nxp()                       { 
function fn_requirement_analysis()      { cat nxp_requirement_analysis ;}
function fn_time()                      { cat nxp_time ;}
function fn_hold()                      { cat nxp_hold ;}
function fn_heartbeat()                 { cat nxp_heartbeat ;}
function fn_base()                      { cat nxp_base ;}
function fn_training()                  { cat nxp_training ;}
function fn_arch()                      { cat nxp_arch ;}
function fn_lib()                       { cat nxp_lib ;}
function fn_thread()                    { cat nxp_thread ;}
function fn_process()                   { cat nxp_process ;}
function fn_signal()                    { cat nxp_signal ;}
function fn_ipc()                       { cat nxp_ipc ;}
function fn_log()                       { cat nxp_log ;}
function fn_config()                    { cat nxp_config ;}
function fn_upgrade()                   { cat nxp_upgrade ;}
function fn_testing()                   { cat nxp_testing ;}

function fn_alarm_link()                { cat nxp_alarm_link ;}

function fn_delay_exec()                { cat nxp_delay_exec ;}
function fn_cmdlineparser()             { cat nxp_cmdlineparser ;}
function fn_jcp()                       { cat nxp_jcp ;}
function fn_svc()                       { cat nxp_svc ;}
    local opts=(
        # ----- system fundamental ----
        hold                            # C/S 架构
        base                            # `捋`整体功能：查询和中断 ---> 即视频和告警
        requirement_analysis
        training                        # 如何做培训？
        arch                            # browser/server, nxp is a server
        language                        # C/C++ BASH JavaScript Asp HTML5
        lib                             # C/C++ -------- utils ----------
        process
        thread
        ipc                             # inter-process-communication
        signal                          # 信号处理
        log
        heartbeat                       # 心跳
        config
        upgrade
        protocol                        # client与server的通信协议
        client                          # browser
        testing
        time
        # ----- web func delimeter ----
        alarm_link
        # ----- function delimeter ----
        delay_exec
        cmdlineparser
        jcp                             # xml, jcp 等只是protocol的不同实现
        svc
    )
    fn_print $@
}

function fn_hotspot()                   { cat hotspot ;}

function fn_hisi()                      { cat hisi ;}
function fn_cloud()                     { cat cloud ;}

function fn_web()                       {
function fn_quick_start_guide()         { cat web_quick_start_guide ;}
function fn_jQuery()                    { cat web_jQuery ;}
function fn_node()                      { cat web_node ;}
function fn_coffee()                    { cat web_coffee ;}
    local opts=(
        quick_start_guide
        jQuery
        node
        coffee
    )
    fn_print $@
}

function fn_network()                   { 
function fn_tcp.ip()                    { cat cat network_OSI七层与TCP.IP五层网络架构详解
                                          cat network_集线器、交换机、路由器、网桥、网关之间的区别 ;}
function fn_bonding()                   { cat network_bonding ;}
function fn_WiFi()                      { cat network_WiFi ;}
function fn_00_故障排查()               { cat network_00_故障排查 ;}
function fn_netcat()                    { cat network_netcat ;}
function fn_nc()                        { cat network_netcat ;}
function fn_xinetd()                    { cat network_xinetd ;}
    local opts=(
        00_故障排查                     # ether mac ip
        tcp.ip
        netcat
        nc
        xinetd                          # 服务
        bonding                         # 负载均衡
        WiFi
    )
    fn_print $@
}

function fn_tools() {
    local opts=(
        SVN WBS RDM Valgrind SourceMonitor
    )
}

function fn_main() {
    local ARGC=${#}
    local LASTARG=${!#}
    local opts=(
        1Line
        alibaba                 # taobao
        apt-get
        agile                   # project 做项目，带团队
        adobepdf
        asm
        awk
        bash
        bat
        bc
        binutils
        busybox
        cstd
        clang
        cxx
        algo                    # algorithm: link queue tree
        case
        circuit
        cmd
        codetool
        CC
        codingstyle
        google
        chrome                  # vpn
        coreutils
        curl
        cygwin
        msys
        design
        elf
        framework
        find
        begin
        figlet                  # text logo The name FIG is an acronym for "Frank (Sheeran), Ian (Chai), and Glenn (Chappell) who collaborated in the development of the FIGlet
        firebug
        firefox
        gcc
        gcov
        gdb
        glibc
        gprof
        oprofile
        graphviz
        gnuplot                 # 线状 IBM stock chart
        grep
        http                    # boa GET POST
        hudson
        mp4                     # GOOGLE `mp4 sample` to get sample file
        hotspot                 # wifi便携热点设置
        ideas                   # innovate 创新
        info
        j2box
        java
        jco
        jimxl
        kernel
        lcov
        libevent
        live555                 # 
        minigui
        in_event                # 基于进程内的事件通知
        time_call_engine
        linux
        hisi                    # nvr
        nxp
        network
        make
        pandoc
        markdown                # README.md xianglei
        opera
        perl
        pinfo
        software
        puTTY
        ruby
        python
        regex
        refactoring
        report
        secureCRT
        sed
        services
        sloccount
        sourceinsight
        scp
        splint
        sql
        socket
        postgresql              # PostgreSQL
        mysql
        ssh
        surveil
        svn
        git
        tcpdump
        test
        tmux
        uboot
        ubuntu
        url
        vim
        vlc
        vs
        vmware
        virtualbox              # usb nat vbox
        web                     # WEB W3School
        w3m
        win
        wireshark
        xml
        mxml                    # 
        json
        yum
        wbs                     # WBS任务分解，与 RDM 协同办公
        cloud
        mindmap
        blockchain
        Programmer-Competency-Matrix.md
    )
    fn_print $@
}

#
# 我们在做同样的事，只是方式不同 -- 哥们的 wiki
# www.noah.org/wiki/Category:Engineering
#
fn_main $@
