# tao_design

人，当感知到：

1. 自己不再是一个人的时候(成为一个父亲，成为一个领导)
2. 自己只是重复过去的生活(人需要在时间上活出不一样的自我)

那么，他便要开始设计。设计，即是成为那个会切香肠的人。

# 现状(为什么说起来容易做起来难？为什么想一出是一出?)

1. 心理学上人性的最佳策略是生存、靠谱、能用(satisficing)，而非最佳(optimizing)
2. 举孝廉、九品中正、科举(关注过程正义)。相信人有能力做好，但不相信人性会在无监督之下做好。

最近的几件事，以前回顾自大学以来的种种，我需要再进一步：

*1.三娃*

1. 作业已经1个星期了，但其连我分解过的打包和升级，分解出数据与方法，还是答完。
2. 周末说好的，把打包和升级做完，最终还是一声不吭，就直接下班了。

*2.肖昌富*

1. 大学时的他，临毕业时，搜集了10G的学习资料，可成绩却只是平平。
2. 在流和音视频的学习上，搜集过很多资料，但至今仍然没有学好。

*3.zhangxiaomoo*

主要表现在，对下属要求过高，要不是对最后的结果负责。

1. 要求其多看书，掌握相关理论。
2. 要求其做全栈工程师，掌握每一个环节。
3. 要求其写足够漂亮的代码。

*4.股票*

1. 已经炒股10年了，写过很多的笔记。
2. 公式算法也写了很多
3. 但是，连最基本的计划都不会做，在股票大跌时就急于补仓，一点防御的能力都没有。
4. 基本上，都是低水平的重复。

# 人都是被反馈喂养出来的

参考IT界最成功游戏的反向设计：

* 第一，认真设计你的环境；
* 第二，寻求外部监督，求“绑架”；
* 第三，获得不确定的反馈；
* 第四，选择一个绵延不绝的职业阶梯(香肠战术)。

我应该怎么做？

*1.三娃*

1. xml_shuttle 还是很成功的
2. 前期灌输太多的理念与概念(说教)，这是不对的，会令人反感。
3. 先固化，再优化。应该先改变行为，再改变思想。

一个有效的系统是这样的：

1. 起点：一个只有uboot,kernel,busybox,不使用sch,event库的最小系统
2. 终点：一个有各种JCP,conf,网络，告警,升级……等功能的最简小系统
3. 阶梯：控制好`技能挑战比`阶梯设计
4. 验收：应该尽量多的工程，计算题设计，而非主观题设计。
         实现xml_shuttle替换代码库中的/ipc/bin/xml_shuttle，并进行升级。
5. 作品：进行测试，从MVP向产品级的设计出发

关于代码风格与命名：

1. 基础模型
2. 词频统计

*2.肖昌富*

不成为资料奴的秘密：

1. 从最简系统做起。`逆向工程`，与工作相关。
2. 关联到绵绵不绝的阶梯

*3.zhangxiaomoo*

1.
2.
3.

*4.股票*

1. 每日功课列表。
2. `技能挑战比`，先定一个小目标，每个月+5%，就有10000+的收入。

# **别让女人动脑子**

人活一世，就是在不断解题，选择题、计算题和主观题。

尽量替她做，少给她选择，多让她作“好”、“可以”的回答，

比如不要问：“你吃意面还是披萨”这样的蠢话，尽量说，“我们吃披萨好么？”

这样做的好处有两个：

1. 能让对方觉得你体贴，
2. 为了让对方尽量省力，如果思维一直处于省力的环境下，相对容易进入到系统1工作的范畴。

还是那句话，别让女人动脑子。

再比如，要确认一个女孩子是否喜欢自己，要用积极的语言。

语言残障人士，可以写张纸：“你喜欢我吗，咱们交往吧！”递给她，看她啥反应，保证比任何人教你的办法都快速有效。

