# introspector

1 以终为始
2 积极主动
3 要事第一
4 双赢思维
5 先理解别人，再争取别人的理解
6 协作增效 -- 第三种选择
7 刻意练习，不断更新
8 请教达人，知识迁移(google)

# 2017-03-01 有线中继Wifi_DHCP策略 

1 关键因素：子网中有两台DHCP服务器(路由+NVR)或者(NVR+NVR)，会导致IP分配失败。

# 2017-03-08 无光敏IRCUT切换算法 

1 目标并不清晰()，时间过长，并没有及时沟通。
2 目标下，诸多因素：EV,expo,ISO,gain(isp_gain sensor_gain),bri并没有考虑周全，
  完全可以并行去做的事情，被无知地串行化了。
3 因为Wifi_DHCP的_情绪失落_，一心想着，扳一局回来，全然不顾_先固化再优化_的原则。
  尽管外部环境下，王总说了，不必考虑被罩在地上，衣服捂住的场景。
  其中_测试数据的采集_非常关键，随意地放置于办公室、会议室桌面，而不是真实地从
  吸顶环境中采集。加之，发送邮件时完全是未经整理的裸数据，被领导批了。
4 最后的结果是：领导指导，重新吸顶采集数据，EV,gain两项数据即可完成线性处理。
  与之前想_一鸣惊人_相比，差距很大。
5 要事第一，80/20原理是普适的。

情绪：
思考过程：有线中继会议上，做一个"小众产品"被批，希望做一个绝对适应各场景的特性出来。

# 2017-03-14 双赢思维

chenyl调节声音
写封邮件，单独做一个包，最后包还有问题(搜索不到有线IP)
把人拉过来一起调，有问题则改。

# 2017-03-16 以终为始 自上而下(Bottom to top)

放慢速度，先把脉络理清楚，而后下手。
1 写出所有interface，db.h
2 写好测试用例 producer.c customer.c 
3 进行实现：db.c

# 2017-03-18 感知差异 感知不爽 请教达人

    noremap ttp     mA:r!cat /dev/shm/xm<CR>
    vmap    tty     "yy:!> /dev/shm/xm<CR><CR>:vs /dev/shm/xm<CR>"yp:wq!<CR>

突然之间，感觉tty好慢，有点不爽(not elegant)。
google后，发现:w可以直接写文件。几年来的心头之痛，就这么解了。

# week.2017-03-19 小魔的困境

1 被模仿者的困境，基础服务的打磨者，JBL放弃专业市场，进军消费类音响取得巨大的成就。
  考虑到传播价值。但这一块被忽略。
  _策略_：转战消费市场。
2 翻看过往的记录，再怎么努力，也认为产出不高。
  我并不着急邀功，而是悄无声息把东西做出来(xml_shuttle ccli)
  站在领导的角度：“改变自己，是改变他人的唯一途径”，打工者的角度，这有些不合理。
  _策略_：高调做事。
3 资源受限制，被打扰切Contex成本高，_节奏_被打乱。
  _策略_：提前做规划，并行处理阻塞节点，_预约思维_去推进。
4 心理素质：太在意领导对自己的看法
  只顾一隅而无全局，没有自己的节奏。像曾子一样，go悄无声息地。
  _策略_：近距离观察记录leader.behavior，掌握领导的节奏。
5 工作框架梳理模板


# 2017-03-20 考虑到所有的因素 vs 有罪推定

* 串口打印 = DB9串口线 + 调试板 + 4pin连接线

原始假设："DB9串口线"不会坏
人证物证：一一进行举证
事实真相："DB9串口线"坏了
过程耗时：3 hour

* id加解密 = win7加密 + win7写记录 + linux读记录 + linux解密

原始假设："win7解密"OK，即"linux解密"OK
人证物证：一一进行举证
事实真相："linux解密"interface因为char short 因alignment致sizeof()有差异
过程耗时：3 hour

结构体跨平台: "win7解密" != "linux解密"

# 2017-03-21 假设验证 vs 一面之词 vs 人证物证

原始假设：一面之词：假设设计的clean_light_ctrl()是唯一的控制接口，其实只是一厢情愿。
人证物证：计算机不会说假话。在最底层进行把控。
是否被其它应用调用？在底层调用之中加行打印DBG()即可。

    clean_light_ctrl(LED_BLUE_ON); break;
        led_ctrl(g_led_blue_addr,LEN_ON); 
            DBG("level\n")

# 2017-03-22 事实 尊重事实 环境与应用 第一现场 让听得见炮声的人决策

任务目标：在测试时，按钮按下，只报语音，不执行对码删文件功能
产品经理：[恢复出厂默认 vs 对码](要区别对待)，但事实是: 产线设备上电，config.xml不存在会自动恢复出厂默认。
炮声士兵：对码删文件是最后一步，后续没有在网页上保存配置，不需要“恢复出厂”

ircut-algorithem
  吊顶
  不是放置于桌面
  应用的第一法则是(20/80原理)：最常用的场景

# 2017-03-23 x-y-问题 需求本质

理解挖掘<根本需求>，延时处理，No hasty conclusion.
多个产品，使用多个包，且不能互升(*此need是干扰项*)。

需求的本质是*特性化*，而不是多个包，
而特性化的途径可以是多个：
  0 工厂工具jcpcmd
  1 uboot
  2 config
  3 sensor-auto-recoganize

# 2017-03-24 How to talk with boss(salary)？

介绍自己，暴露信息(价值)：
    顾客都会侃价，但是上来开口谈钱是大忌，更多应该关注价值。
    从生肖上拉近距离，比我大两轮
    做了哪些东西：关注_传递价值_。

告知自己的期望：我要供一套房。
了解老板的期望：老板说要我的状态？

对事实进行确认：是不是有感情的？对我的了解到底有多少？
要达成共识的概念：
    企业的目标：永续经营
    顾主顾员关系_共赢_，不要太高的薪水，因为会降低竞争力。不能太低，太低总是会被填平的。
    安全感：把一部分交给team

# 2017-03-29 自上而下 vs 自下而上

applog分解：

1 初始化
2 执行
3 sync = 时间到 + 条数满

结论：不正常工作，分解后，在每一层_关键点_都加上打印，是最快的方法。

# 2017-03-29 我们所使用的语言限制了我们的思维

目标：只mount磁盘的第一个分区。

clang:    strrch(path, '/'), strstr(popen("grep mmblk"))
shell:    basename path | grep /proc/partion
english:  当前路径是否是第一个分区，如果是，即mount，否则umount

你必须首先熟悉你的工具(language)，才能有效地使用它。上面的例子，_自己硬生生实现了一遍basename()_ 

    char *basename(char *path);

(“name a statue of someone standing with a raised arm while looking into the distance”)

* 使用C++的第一原则是什么？

将你的（pongba按：与语言无关的）设计理念（_概念_）直接映射为C++中的类或模板。

也即是我前一阵子文章中建议的“_脱离语言思考，使用语言实现_”。脱离语言思考的好处是显而易见的：
可以避免受到语言细节作为既有框架的干扰，_避免过早被实现细节缠住_，于是便容易找到最直观的解决方案，
即便后来发现语言成了绊脚石，也可以选择换语言或者明确地知道自己做了什么折衷。

* High to Low

1 先使用高级语言，如自然语言，将目标与需求写下来。
2 Shell思考，再使用clang的库，最后才考虑用Clang自己实现细节。

    RunCmdRusult(const char *cmd, char *buf, int len)

是popen()的封装，这是连接Shell和Clang的重要工具。

# 2017-03-30 黄金思维圈(why).世界是基本元素的组合

bootargs=feature=1

所有鱼眼产品统一使用一个包。为什么？
站在全产业链(link = 研发 + 生产 = code + npack.sh + tool.jcpcmd)的角度，在[工厂侧](tool.jcpcmd)确定特性，
极大简化了整个流程。系统思考者，想到了一幅完整的生产图，而孤立思考者，只想到了一个单点。

# 2017-03-31 如何面对面沟通？快速获取信息？

如何获取对象(object)的属性，如何描述？



# 2017-04-04 你不知道并不可怕，可怕的是你不知道你不知道

* 不知道系统的缺陷，你会在这些缺陷上不断耗费时间

1 svn(192.168.2.250)  必须直连
2 google              直连|路由
3 danale              必须路由

一根网线，同时满足(1)和(3)，是不可能的事，必须要放弃一个。放弃"不常用的svn"是更好的选择。
一根网线，只是假设而已，可以用路由通过无线连接到Bobo的路由，实现两条硬件链路解决。

* EV值判断Lux的缺陷

EV与Lux并不线性。

# 2017-04-12 应对(评估)复杂的世界 "~/fc/ircut.i"

* 复杂性与不确定性

  真实世界，并不会马上给你响应，而是可能会有一定的延时。
  一个事件现象，导致其的原因(element)可能不只一个，因果并非一一对应的关系。

* 应对复杂性

  对现象的原因进行逐层分解。
  对每次分解进行量化并再次分解。

  白天
  黑夜
    近距离
    Moderate
    远距离

  找数据相关性：利用初始切换时EV来表征距离

* 应对不确定性

  macd, 对数据进行平滑
  accu, 使用积分收集跨度数据，寻到*临界点*。

* U are the Next Master

  逐级分解的现实方法论：
  使用 line 而非 tree 的表现形式来对*分解*进行实现。
  嵌套层次降低，最终将降低思考的复杂度。

# 2017-04-13 虚拟世界 vs 物理世界 假设 怀疑

事件：
1 黑白模式，桌底闪屏。                        结果：红外灯本身在闪。
2 工厂生产，红外灯常亮。                      结果：adc＜60，BOM没有更新
3 画面模糊。同批两台200W设备，一清晰一模糊。  结果：锁焦没有锁好，去胶后调整OK。

得到：
1 我们是做物理产品，而非虚拟产品的公司。*怀疑物理环境*，是必备的素质。
2 不二过：不要*盲目忙碌*地排查问题，更要思考如何避免下次不要再犯同样的错误。

# 2017-04-13 安全意识 “普遍联系”和“永恒发展”地看待问题

0 背景：Dana员工出差到我司
1 安全意识，应该给大拿一个无 /etc/passwd 字段的包
2 联系发展：走之前，应该询问同事、上司：chenby,zhao.是否还有相关问题需要询问

