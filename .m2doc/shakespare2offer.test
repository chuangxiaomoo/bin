# 修炼自己的二向箔

1 真正从客户需求的角度去思考。以**竞品功能体验**为出发点。不要争吵，一旦争吵，你便已经失去了说服TA的最后机会。从更高的维度，指引当前的行动。
2 先做好焦点分离，但最终，还是要**聚集到价值**上来。
3 我司的测试员: a. 推动产品落地 b. 检验开发成果

# Understanding testing

[如何测试代码](https://www.jianshu.com/p/20368731055a)

测试，是软件中任一一段代码的固有组成，**唯有测试，方证完成**。

单元测试成本低廉，因此应该成为测试工作中最大的组成部分。编写和运行单元测试都很便宜。因为它只查看代码的特定部分。集成测试则相反，它们包含的代码更大。

测试，即对 Output 的验证，如果你的代码*难以测试*，那么只有两种可能：

1. 代码设计(Process)

代码很难测试，可能是你的代码没有设计好。“好的设计”的定义是什么，这是一个大问题，但这里要强调的一句话是一个很好的经验法则，也是大多数人所赞同的，那就是，**好的代码会分离关注点**。有经验的程序员限制功能体以便于只做一件逻辑上的事情就是这个原因。

2. 目标对齐(Input)

代码很难测试，可能要么是因为有太多的事情要继续，要么是因为有太多的依赖（或两者皆有）。考虑将此视为协调利益的一个问题：

当编写未经测试的代码时，在速度（或懒惰）和关注点分离之间存在着利益冲突，并且短期内你的代码是如何被组织的并没有那么重要。
当代码必须测试时，你的目标更一致，因为对于写得好的代码，更易于写测试！

*更优雅地交付(协作)*

1. 像消费者一样思考(Input)

当你第一次编写测试时，你首先要设计代码的API。测试让你进入代码消费模式，在这种模式下，你的代码需要面对其他东西的接口。设计API，而不那么关注内部运作将导致一个更佳的API设计，这会导致模块的更易消耗，从而促进项目代码的更干净。

深刻理解**客户的需求，兄弟模块(APP)的需求**。

2. 利益捆绑与利益驱动(谁驱动谁)

a. 如果测试部“只管测了”，没有推动项目的落地(交付)，那么项目将永远交付不了。“今天晚上东西完不成，大家都不要走。”如此才有凝聚力。
b. 为什么要“测试驱动”，为什么莱茵河治理委员会的秘书长是荷兰，因为荷兰最深受其害。 
   HW的测试华为的测试会比开发更懂业务，比市场更懂技术，所以测试在华为，更长远的发展方向，可以是，PM做项目管理，SE做需求分析，SA做市场技术，Marketing做市场，Sales做销售。
   H3com的Marketing比研发强势，因为通宵奋战写标书。前线不稳，后方哪里有肉吃。

# 测试的益处

1 你知道所有bug的共同点吗？那就是它们通过了所有的测试。因此，测试可以优化测试流程本身。

2 也曾看到过乌七八糟的代码，但不敢去清理干净？我在这种情况下要做的第一件事是创建测试来找出代码要做什么(**逆向工程**)。测试可以锁定功能，用一种很好的方式，使得我们能够专注于“大扫除”，而不是担心破坏什么东西。

3 正确的代码比不正确的代码更有价值。一切帮助你的代码比以前更正确的东西都值得看一看，就这么简单。**发布正确的代码**随着时间的推移会构建起信任，而信任是一笔宝贵的财富。

# 什么是好的测试

1 好的测试往往是简单的。它不会尝试一气呵成面面俱到。它的名字反映了它要的目的，并且名称应该精简成一句话。例如，名称不应该是“it works”，而是“it returns 0 for negative values”。

2 测试读起来应该像一个小故事，遵循AAA体系： Arrange、Act、Assert。设置东西，做出声明，并且断言声明做了它应该做的。

3 知道测试什么是关键，知道要测试什么涉及到要了解什么重要，什么不重要，而要知道这些并不是一件随随便便就能做到的事情。这里有一个技巧，**尽可能采用最高级别的测试**，以便于在实现上覆盖范围和灵活性。——Brian Lonsdorf，《JavaScript Air 004》所以，基本上：**不要测试内部的东西，这只会成为你的阻碍**。如果你真的觉得你应该测试内部的东西，那么你最好分离成一个新的模块，使之成为外部的东西。

# 编码与测试关系处理(鱼与熊掌不可得兼)

不要在试图解决问题的同时，设计一个很好的解决方案。来自于 Ian Cooper 关于 TDD 演讲中的秘诀是：

> 编写红色测试。
> 解决问题，尽快让它变绿。
> 设计一个很好的解决方案，重构成你为之骄傲的一个东西。

这里要掌握的一个重要内容是，在你的大脑中要分离关注点。不要试图同时完成步骤2和步骤3。

**编程的主要限制**之一是你的大脑一次能思考多少，并且在你敲代码时，你需要思考得越少，你写的代码越好。

在解决问题时，不要去想代码实际上应该如何。复制粘贴代码，写低效的循环，重复内容，不论是什么只要能尽快让测试变绿就去做。然后再考虑如何改进。

分离关注点是首先要测试的原因之一，这种方法有助于实践中行为。当你不择手段地想要快速达成一个解决方案时，你不必去考虑它看上去怎么样或者运行起来快不快。当你进行到完善设计和改善解决方案的时候，你就不必担心解决方法行不通了。


