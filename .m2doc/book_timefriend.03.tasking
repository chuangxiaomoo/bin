# 管理

Why: 人生的目的就是要尽可能多地体验生命的多样性。

What and How: 管理即对组织**目标和资源(时间+金钱)**进行分解、先之后之串之并之、聚合，`少入多出`地达成既定的组织目标的过程。

# 约束

1 时间是核心约束，每个人都只有24h。
  金钱可以买除了自己时间之外的所有资源，包括他人的时间。
  因此，你不可能事事躬亲，`替手`的集成度越高，事业越大。

2 没有开始之前，
  心存侥幸，总是错误估计任务所需时间，心里想着“时间还多的是么！”
  只要开始做事，
  便有来自内部的恐惧：面临做错、做不好的风险；
  同时来自外部的恐惧：过分在意外界的评价。

3 Fight and Flee，大脑并不擅长处理近300年来的工作，大脑有逃避的天性。
  在逃避的过程中，注意力会被科技企业诱惑，猎杀，以致沉迷。
  如同因果关系中`预言`的不确定性，
  `直面困难的勇气`和`反沉迷能力`是最大的不确定性。

[^反沉迷利器：有的时候，我们会发现自己玩某个游戏上瘾了，明知道它占用了很多时间（这是客气的说法，不客气的说法是浪费了很多生命）却忍不住继续玩……解决方案是找个作弊器。使用作弊器，实际上等同于打破游戏设计者所设计得“验收机制”，使其无效。遇到此类情况的读者不妨试试看。]

# PLAN(P-D-C-A)

Plan, 特别是长期计划，是需要通过长期实践才能习得的能力。

所以，大多数情况下，我的建议是这样的：如果你想改变你自己，或者你目前的处境并不令人满意，那就一切从简——找一个你觉得该给你带来改变的行动，然后去做就是了。不要怕碰壁，不要怕失败，那是必须经历的一个过程。

Just do it!

# 数据结构

对物理世界的抽象。

# 顺序 Sequential

运用资源(金钱、工具、下属……)，通过能量的做功(电能、化石能、热能)，在接口明确的情况下，人可以拥有并行能力。

通过并行串行的组合，`找寻关键路径`是提高管理水平的关键。

# 分支 Selection

`人员少，时间紧，任务重`。分辨熟悉与不熟悉的任务，诚然面对不可知性及潜在困难。并找出关键路径。

switch case 制作列表。

# 循环 Repetition

重复的工作交给机器做，相似的工作并行做。

# 函数 Function

将 control structures 组成的 Flow of control 打包成一个函数。函数的积累，甚至还可以写成一个 Class。

封闭: 父子无关系
继承: 子承父的特性(纵向)
多态: 父访问子的特性(横向)

# 信号 SEGV

在电力供应的情况下，程序可以无限循环执行。但是，在商业社会，机会会因为一次演示失败，或者是延迟交付而消失。

1 对函数内部的异常进行处理(预演)，
2 对返回值进行验收(阶段测试)。

# 库 Lib

将相互关联的 Function 再打包成一个库，或是通过命令 option 打包成一个命令工具。

# 上下文切换 Context switch

1 单线程更加高效
2 进入心流需要时间
3 防打扰的能力：借鉴异步 IO 库，更高效地利用 CPU 资源，减少上下文切换的损耗。

