# _essence

# 定义

摘自《论证是一门学问》：

当一个词语的含义存在争议时，你可以区分出三个相关的范畴。第一个范畴包括这个词语明显适用的事物。第二个范畴包括这个词明显不适用的事物。在两者之间是那些地位不明确的事物——包括存在争议的地方。你的任务是给出一个定义，使之能够：

1. 包括这个词语显然适用的一切事物；

2. 排除这个词语显然不适用的一切事物；

3. 在两者之间画一条尽可能清楚的界限，并解释为什么这条线画在这，而不是其他地方。

例如，请思考“鸟”如何定义。是啊，究竞什么是鸟呢？蝙蝠是鸟吗？

为了符合第1个要求，从基本归类(属)出发常常会有所帮助。对于鸟来说，最自然的分类应该是动物类。为了符合第2个和第3个要求，我们接下来需要具体说明，鸟如何有别于其他动物(种差)。所以我们的问题是：与其他动物相比，鸟类——所有鸟类，而且只有鸟类——具有哪些特征？

这个问题看起来简单，实则不然。例如，我们不能把界限画在飞行上，因为鸵鸟和企鹅不会飞(所以这个拟定的定义不能覆盖所有鸟类，违背了第1个要求)，而大黄蜂和蚊子可以飞(所以这个拟定的定义包括了一些非鸟类的动物，违背了第2个要求)。

<结果，所有鸟类，且只有鸟类具有的特征是拥有羽毛>。企鹅和鸵鸟有羽毛，尽管它们不会飞——它们仍然是鸟类。但飞行的昆虫不是，蝙蝠(如果你想知道的话)也不是。

# 概念和方法论

你看，这么厚厚一本书，其实就那么几个概念；讲一个概念就要花费一个章节的篇幅，从结构上来看，其实讲的都一样，无非是一个接一个的概念，

    要说清楚它是什么，
    它不是什么，
    它和别的概念有什么异同；

然后就是与它相关的方法论，比如，

    使用的时候需要注意什么，
    怎样使用是正确的，
    怎样使用是错误的，容易发生错误的地方是什么……

这些都弄明白了，一个概念就算是学透了，这些概念都弄明白了，这本书算是看懂了，就这么简单。

说到底，这也是程序的本质：

    程序 = 数据结构 + 算法
    OO   = data + method

# 编程1.0 -- 语言

编程语言技术是对底层设备的封装，然而封装总是会出现漏洞的。
大脑计算能力的延伸，即线性系统(简单系统)

# 编程2.0 -- 程序

1. 程序

微观视域 = 数据     + 操作 
中观视域 = 数据结构 + 算法
宏观视域 = 对象     + 消息

2. 媒介即信息

就是每个部分独立变化。举个简单的例子，画一个三角形和画一个文字，在DX和OpenGL下面用的是截然不同的方法（不仅仅是函数名不一样）。但是你哪一天你发现，你爱用DX还是OpenGL，丝毫不影响你如何画三角形还是文字，爱画什么画什么，那么你画的东西跟你画的手段就解耦了。这个解耦的方法就是在中间插入一层interface。

孔子曰，软件的所有问题都可以通过增加一层interface来解决。你的团队越大，需求变化越快，你越要保证程序员之间的依赖关系越少，你的软件解耦的就越好，interface就越多，关系就越复杂（跟乱不一样），应付变化就越容易，钱赚的就越多，越稳定。


# Linux

一切皆文件

method: open close read write

