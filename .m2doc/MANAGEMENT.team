# 一个中层管理者的套路(2019-09-08)

电脑游戏《双点医院》的经典情节：“赚钱的医院突然巨额亏损，症状是：各科室人满为患” 。新人的解决方法是：建立更多的科室，招更多的医生、护士。新招的医生和护士是新手，效率低，于是堵塞更严重。根本原因是：那些难治的病占用工作人员太多的时间，将那些难治疗的病人(不到总病人的10%)请回去，很快就扭亏为盈。对应到软件开发中，就是不到10%的需求，让整个团队疲于奔命，还亏钱。

放到现实中，这个问题各科室主任和各工种主任都无法解决。如果医院有技术总监的话，归技术总监解决。绝大部分医院没技术总监，所以只能正副院长解决，如果院长们是技术型、管理型、市场型，没有财务型，那就无解。

参考[公司的现状](#greed)，所有人都只是盲人摸象，没有一个人能对整个产品交期给出一个准确的确认。中层人员`只有研发经理是100%投入`，其它都是兼顾者。


| NO. | 层次    | 角色                                            | **管理即连接**                 |
| :-- | :------ | :------                                         | :----                          |
| 1   | 高      | 总监+秘书                                       | 周报月报                       |
| 2   | 中      | *研发经理*+测试经理+中研主管+产品经理+Marketing | 产品列表+市场反馈表+研发计划表 |
| 3   | 基      | 研发工程师+测试工程师                           | 任务跟踪表(RDM)+缺陷跟踪表     |

管理即权衡:**执行规则**

1. Mon: 接收产品经理、测试、市场的需求输入，协调中研规划排期(一周工时有限)
2. Tue: 内部任务分解
3. Wed: Coding、Fielding、指导、跟踪，并制作进度条。
4. Thu: 雨露均沾，`以包为本，本固邦宁`
5. Fri: 总结一周，并周报

# 中层管理者的API

[](+/以包为本，本固邦宁 ~/gitee/team/Principles/README.md)

# 贯彻执行二大方针

> 复利性
> 杠杆性

饿死师傅会降低复利特性，[如何避免教会徒弟、饿死师傅？](https://www.zhihu.com/question/20177893)

1. 徒弟人可以走，价值要留在内部。
2. 师傅本身要有雷锋的笔记，时刻保持竞争力。
3. 构建命运共同体，复利上升，持续发展是王道。
4. 师傅要站在更高的维度(资源、规则、格局)上进行升维改造。

# PDCA.2019-09-05

公司目标: Money
团队目标: 成为 Money 赚取的`手段`

团队现状: 当前无人知晓
现状量化: 认识自己，来自于与外界的碰撞，`反馈`是最本质的途径。每个产品收集一张问题表，标明当前的工作重心。(回收Testing放弃的`定价权`)

验收工具: 每周二或周四节奏出包，`连接`目标与现状
每日例会: 保证方向的正确性，进行`目标对齐`

经理职责: 经划分边界，理联通组装。一开一合之道也。
共享文档: 计划与执行分离(专门以区别与计划的管理者分离)

<a name="greed"/>**管理者无知的贪婪与恐惧**

> 研发发布的包，如4G，测试可能要过一周才开始测试。
> 经过测试的包，如FISHEYE-3，工厂并不一定使用。
> 一个周末不在，总监就有论调：你们的人员工作不饱满。

这些现象，即组织活动不协调的表现。

# 公司设置什么样的收益函数，员工就会最大化它

[降低内部交易成本](+/期望值最大化 ~/bin/.m2doc/ss_018)

1 体现组织牵引，配备跨全流程的系统工程师.(华为系统工程师任职资格管理制度)
  汉德公式(Burden＜PL)
  潜在的工作到底由谁来做?
2 忙碌不等于效率
3 不能老是打断别人，打断别人只说明一点，*你没有任何计划性，团队没有协调性*
4 **不可能三角**：中心化，效率(时间)，信息安全，不可能同时达到。

# 由和尚分粥想到的高效团队协作方案

a 100个和尚每次1人分粥
b 每20个一组，每次1人分粥，分粥者5人
c 不止单纯分粥，共有3菜1汤1粥，如何分配？
d JCO福利（资源不稀缺），因此，只要维护一个队列FIFO即可。

# 团队(个体)的未来

1. 内部交易成本最低（流动）
2. 持续学习进步应对外部交易

1 对于低技能工种（每天最后吃粥，会心生报怨），分粥工作可由内部一人循环执行
2 单一资源分配，团队超过100人，可另组一队，可以很好的复制
3 多资源分配（核心资源不能分），多人掌管便会形成交易壁垒。
  机器是核心资源，人工三班倒。
  军哥是核心资源，不属于IPC，也不属于NVR。
4 多面手是降低**内部交易成本**的关键。
  汤可有可无，菜供不应求，豆腐，可菜可汤，可荤可素，非常好的食材。
5 一个人分粥如何，当由其它人的投诉量化加总而来。
  由他人的利益自动形成监督。（自动申请一个**360°沟通协作调查**）
6 润滑剂垂直整合（P2P交付）
  你无法教授一个人**责任心**
  关键路径法（最短工期法），婆子、孩子就是人生的关键结点，且有时间窗口。
7 进入“不完全竞争状态”成为觅价者（price searcher），才是出路。
  只有提供差异化的服务(对相关技能设置准入障碍)，才有可能有更好的价格。
  *差异化服务与多面手，是实现价值的两个不同的方向*
8 底层逻辑上，我们先是个商人，然后才是程序员
9 有钱人真正烦的是无聊的灵魂

# 领导力

> “办大事者，以多选替手为第一义。” -- 曾国藩

很多人读过[《技术领导之路》](https://book.douban.com/subject/4187478/)之后跟我说：“我觉得这本书写得很好，我也承认作者说的很有道理。但是，这和中国的现实不搭配。我努力去激励了(Motivation)、去组织了(Organization)、去创新(Innovation)了，却好像对牛弹琴，我领导的人似乎无动于衷。还不如安心当个包工头省心省力”。是的，我承认现实中确实有这样那样的困境，但我也认为这不是安心放弃成为优秀的技术领导的理由，因为有个重点书里没有写到，那就是想要打造好的技术团队，**必须对招进来的人有足够高的要求**。实际上，在《极客与团队》之类讲述技术团队管理的书籍里都强调了这一点：如果期望打造有战斗力的团队，必须保证大家形成一致的工作习惯和价值观；对这种工作习惯和价值观持续产生负面影响的“害群之马”，是应当坚决予以淘汰和替换的。

1 身教胜于言传
2 授人以鱼不如授人以渔
3 传播正能量
4 元方法：写日记。开启反思之门。
5 模型：世界过于复杂，人脑计算能力有限，只能付诸模型抽象简化。技术管理作为技术（工程学）和管理（自然科学）的横切点，自然免不了各种各样的模型。

# 资源.信任.不可篡改的数据库

建立信任可降低沟通成本。

> 信任机制 = 不可篡改的数据库 + 有限次重复博弈

但凡博弈的规则，都是针对**贪婪和恐惧**这一对人性的弱点而设计的。顶尖的存在只有20%(5%)。

0 来自历史的经验(秦始皇帝统一六国)
1 情绪会让你在错误的形势下什么都敢做
2 情绪会让你在正确的形势下什么都不敢做

从不可篡改的数据库 -> 输入处理函数(**方法论**|流程) -> 熨平情绪的波动 -> 人生巅峰

顶点软件(-5%&&超跌)，就应该补仓1/3

# TDD数据量化

模块  功能  详细说明  优先级  责任人  状态  Bug等级 验收标准  预计完成时间  前置条件  操作步骤  测试备注(必现？)

1. sum(优先级×count(责任人)) = 个人的权重 = **个人贡献值**
2. 解决核心问题: 及早解决关键路径上的Bug，关注可工作的系统，而非等到deadline定版时才反馈有问题。
3. 加入时间因素，一级功能24h之内要解决
4. 变化动作分类，无非{add,del,update}
5. 资源消耗分类: 过早优化(产品经理，客户没有提需求，你急着改啥呢)

