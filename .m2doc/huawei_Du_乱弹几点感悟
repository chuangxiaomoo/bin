# Du_乱弹几点感悟


## 软件设计

1 Fred Brooks在他的短文《No Silver Bullets》（没有银弹）中确立了如何发现杰
  出的软件设计者的三步规划： 

  尽早系统地识别出最好的设计者群体。 
  指派一个事业上的导师负责有潜质的对象的发展，小心地帮他保持职业生涯的履历。 
  让成长中的设计师们有机会互相影响，互相激励。 

2 看历史的时候，不要只是关注精彩的情节，同时应该当时历史的环境，背景。
  到底应该怎样为自己提供或是创造这样一个环境。
  统计学的世界 《散步者的随想》 卢梭 《资本论》 
  《DOOM启示录》 《敏捷软件开发--原理、模式和实践》（ASD书） 

4 我觉得我司也没有倾向于前者。不信的话可以在研发区随便揪住一个程序员当场问
  问，看他是否了解编译器如何对代码进行优化，O1，O2，O3的区别是什么，如何有效地
  利用cache和指令预取，如何防止支持乱序指令的CPU执行错误代码，多核条件下各种同
  步技术的适用场景，中断和异常的区别等等。你觉得能答出来的会有几个呢？ 


## 思考

  1.
  编码同任何其它的工作一样，都需要经过系统、科学的训练才能具备上岗的资格。但是
  我不知道为什么，在这样一个如此需要专业从业人员的领域，我们绝大多数人居然都是
  靠自学成长起来的。我自己也是如此，因此我走了很多弯路，但也正是如此，反而激励
  我产生了很多属于自己的思考。

  2.
  设计要考虑的东西很多，通常软件设计会借助很多现成的哲学思想，套用一些经典的模
  式，遵循久经考验的原则。于是，有很多设计师认为好的设计是和实现语言无关的，设
  计属于更高层次的抽象，是劳心者所做的事情。至于怎么实现，用什么语言实现，则是
  编码的那伙劳力者需要考虑的。设计师应该忘掉具体的语言。对此，我的意见是：这是
  典型的权贵精英主义，是对夜以继日辛苦编码的兄弟们的背叛。


## 乱弹几点感悟

  1.
  如果需要在代码上附加注释，才能把代码的意图说清楚，这样的设计就有可能存在弊端
  。注释的确很重要，有时也必须存在，但是适当地应用自然匹配原则就能尽量减少使用
  注释的必要性。每当你考虑使用注释时，不妨先想想是否还有其它的设计方案。

  2.
  在阅读别人的代码之前，先想想如果让自己来设计，会怎么做呢？代码描述的是解决问
  题的知识，所谓知识，其实是人脑对外界的解释。每个人都有不同的解释习惯，这在心
  理学上被称为“心理模式”。这些模式有好有坏，有对有错，模式之间的碰撞可以产生灵
  感的火花。倘若直接套用别人的模式，等于你无意中封闭了自己头顶的天空。

  3.
  易用性、艺术性和可靠性虽不能完美结合，但至少可以做到和谐统一。不追求代码之美
  ，就不是好的程序员。

  4.
  如果设计或者实现有错误，那么错误就一定会被发现。切记代码是严谨无歧义的，不要
  以“人都会犯错误”来原谅自己，任何时候都不要抱侥幸心理。

  5.
  如果用户向你抱怨产品不好用，那么不要怪他们太笨，因为这十有八九是我们的设计出
  了问题。哪怕是用户没有看或者没有看懂说明书，我们也应该反思应该有什么办法可以
  促使用户主动去看一份通俗易懂的说明书。

  6.
  计算机是逻辑代数的产物，程序设计是逻辑思维的产物。而逻辑，是哲学的重要分支，
  而哲学，是所有现代学科的渊源。跳出你手中厚厚的C++、Java吧，涉猎更多的书籍，
  锻炼思维，开拓视野。

  7.
  不要拘泥于某种高级编程语言，也不要盲目崇拜高深的算法，最重要的知识往往是最基
  本的，也是最容易被人忽视的。你能融会贯通一样，便受益终身。要记住，大道至简。

  8.
  计算机知识是非常系统的，别把自己困在孤岛上。程序员多学点硬件知识，对提高能力
  有事半功倍之效。当你懂了CPU为什么这样设计，指令集为什么这样安排的时候，神马
  内核，神马C语言，神马汇编，神马嵌入式，一切都是浮云。

  9.
  和身边的同事学习，是最快的提升个人素质的方式。每个人的思想都有闪光的一面，学
  到了，你就比别人多了一个闪光点。

  10.
  养成提笔总结的习惯，我一直非常崇拜能写书的人，因为他们的知识包罗万象。我们不
  当作家，但写文章要求的是思维的缜密，逻辑的严谨。能顺畅地写出来，才真正证明你
  懂了。

  11.
  最快的学习方法是“快速原型法”，但最系统的学习方法是看书。 

