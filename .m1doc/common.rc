#! /bin/bash
#
# Use relative path for portable code, 
# but as a /root/bin/foo.sh and [ $PWD = /root/bin ], Please don't run .sh like 
# <bash ./foo.sh> or <bash foo.sh> but ./foo.sh , or checkproc can't check
#
# shopt -s gnu_errfmt 
SUCCESS=0
FAILURE=1

SRC_RELA=`dirname $0`
if [[ ${SRC_RELA} != /* ]] && [ "${SRC_RELA}" != '.' ]; then
    echo "${SRC_NAME} can't run in ${SRC_RELA}"
    exit 1
fi

cd ${SRC_RELA}

SRC_PATH=${PWD}
SRC_BASE=`basename $0 .sh`
SRC_NAME=`basename $0`
SRC_FULL=$SRC_PATH/$SRC_NAME
SRC_MODL=`basename $SRC_PATH`
#
if [ -n "$FIX" ]; then
    PALL=/dev/shm/${0##*/}
    PSHM=$PALL/fix

elif [ -z "$PSHM" ] ; then
    # rm -rf /home/shm/${0##*/}.*  # del history
    SHM_RESERVER=3
    PALL=/dev/shm/${0##*/}
    PSHM=$PALL/$$

    mkdir -p $PALL

    if [ "`ls $PALL | wc -l`" -ge $SHM_RESERVER ] ; then
        redundent_pids=`ls -t $PALL  | sed -n "$SHM_RESERVER,\\\$p" `
        for pid in $redundent_pids; do
            [ $pid == fix ] && continue
            ps -e | awk '{print $1}' | grep -w $pid >& /dev/null
            if [ "$?" -ne 0 ] ; then
                rm -rf $PALL/$pid
            fi
        done
    fi

fi

# put mkdir after clean redundent shm 
export PSHM
mkdir -p $PSHM

#
# common function defination
#
LOG_CMD=echo
# PS8, prompt string at
PS8="eval echo \${BASH_SOURCE##*/}\|\$LINENO\|: "

#--- FUNCTION --------------------------------------------------------------
# NAME: log
# PARAMETERS: $@ the message will be log
# $1, when -f, cat the file
# DESCRIPTION: LOG_CMD can be assign if you will, LOG_CMD='logger -s -t tag'
#-----------------------------------------------------------------------------
function log()
{
    if [ "${LOG_CMD}" = "logger" ]; then
        $LOG_CMD $@
        return
    fi 

    if [[ "$2" == "-f" ]]; then
        ${LOG_CMD} `date '+%b %2d %T'` $$ $1 ----------FILE $2 begin---------
        cat $3
        ${LOG_CMD} `date '+%b %2d %T'` $$ $1 ----------FILE $2 end ---------
    else
        ${LOG_CMD} $@
    fi

    return 0
}

# $1 $?
# $2 `$PS8`
# $3 err messages
# xert $? `$PS8` || return $?
function xert()
{
    if [ -n "$CLEAN" ]; then
        eval $CLEAN
    fi

    [ "${1}" -eq 0 ] && return ${1}

    log ${@:2} || return $?

    return ${1}
}

# echo yellow
function fn_echo_warn()
{
    FG=33 BG=40
    TEXT="$@"
    echo -e "\E[${FG};${BG}m${TEXT}"
    echo -ne "\E[0m"
    return 0
}

# echo gree 
function fn_echo_succ()
{
    FG=32 BG=40
    TEXT="$@"
    echo -e "\E[${FG};${BG}m${TEXT}"
    echo -ne "\E[0m"
    return 0
}

#echo red
function fn_echo_fail()
{
    FG=31 BG=40
    TEXT="$@"
    echo -e "\E[${FG};${BG}m${TEXT}"
    echo -ne "\E[0m"
    return 0
}


function runcmd()
{

    return 0
}
function postproc()
{

    return 0
}

#
# para file process
# local ${paralist[@]} in the fn_main()
#
function fn_chk_conf_file()
{
    local CONFIG_FILE=$1

    if [ ! -f "$CONFIG_FILE" ]; then
        log "The config file <${CONFIG_FILE}> not exsit"
        return 1
    fi

    dos2unix "${CONFIG_FILE}"

    if [ $? != 0 ]; then
        log "dos2unix ${CONFIG_FILE} fail"
        return 1
    fi
    sed -i 's/= */=/g' ${TMP_CONF}
    if [ $? != 0 ]; then
        log "sed -i ${CONFIG_FILE} fail"
        return 1
    fi 

    return 0;
}

function fn_get_value()
{
    local file=$1
    local key=$2

    cat $file | grep -m1 "^${key}=" | awk 'BEGIN {FS="="}{print $2}'
}

function fn_fill_paralist()
{
    local f=$1
    local k v # key value
    local ret=0

    for k in ${@:2} ; do
        v=`fn_get_value "${f}" "${k}"`
        eval "$k=$v"

        if [ "${v}" = "" -o "${v}" = "NULL" ]; then
            log "${k}=\<$v\>"
            let ret++
            continue
        fi

        eval "$k=$v"
    done

    return $ret
}

function fn_fill_paralist_index()
{
    local f=$1
    local index=$2
    local k v # key value
    local ret=0

    for k in ${@:3} ; do
        v=`fn_get_value "${f}" "${k}_${index}"`
        if [ "${v}" = "" -o "${v}" = "NULL" ]; then
            log "${k}_${index}=\<$v\>"
            let ret++
            continue
        fi

        eval "$k=$v"
    done
    return $ret
}

function fn_create_result_file()
{
    mkdir -p ${1%/*}
    > $1
    return $1
}

#
# non-common function defination
# tail, head, tee, wc, sort, split
#
function fn_pkill_children()
{
    local papa=$1

    # must declare child as a local
    local child
    local children

    children=`ps -e -opid,ppid | grep "$papa$" | awk '{print $1}'`
    for child in $children; do
        fn_pkill_children $child
        kill -9 $child
    done
    return 0;
}


function fn_pkill_tree()
{
    fn_pkill_children $1
    kill -9 $1
}


function fn_get_total_mem()
{
    # use default: free -m
    free ${1:--m} | awk '/Mem:/ {print $2}'
    return 0
}

function fn_get_swap_mem()
{
    # use default: free -m
    free ${1:--m} | awk '/Swap:/ {print $2}'
    return 0
}

function fn_validate_ip()
{
    echo $1 | awk -F. ' {
    if ((NF != 4) ||
        ($0 ~ / / ) ||
        ($1 > 255 || $1<0) ||
        ($2 > 255 || $2 < 0) ||
        ($3 > 255 || $3 < 0) ||
        ($4 > 255 || $4 < 0 )) {
        exit 1
        } else {
            exit 0
        }
     }'

     return $?
}


# exec with log
function run()
{
    echo $@
    $@
    return $?
}

function fn_get_if_ip()
{
    # if $1 not empty, it is interface name
    ifconfig $1 | grep "inet addr" | cut -d : -f 2 | cut -d ' ' -f 1
}


function fn_get_using_port_pid()
{
    local port=$1 # port number or service name
    local ip=${2:+@${2}}
    local protocol=TCP

    lsof -i${protocol}${ip}:${port} | awk '{if ($2 !~ /PID/) print $2}'
}
function fn_extract_file()
{
    local cmprfile=$1 # head.mil.tail.tar
    local filepath_in_cmpr=$2
    local change_to_dir=$3

    local cmprtype=${cmprfile##*.}
    local xtcmd=

    # tar zxf ${tarfile} -C ${change_to_dir} ${filepath_in_tar}
    # unzip ${zipfile} ${filepath_in_zip} -d ${change_to_dir}

    case $cmprtype in
    tar)
        xtcmd="tar xf ${cmprfile} -C ${change_to_dir} ${filepath_in_cmpr}"
        ;;
    tgz|gz)
        xtcmd="tar zxf ${cmprfile} -C ${change_to_dir} ${filepath_in_cmpr}"
        ;;
    zip)
        xtcmd="unzip ${cmprfile} ${filepath_in_cmpr} -d ${change_to_dir}"
        ;;
    *)
        return 1
        ;;
    esac

    $xtcmd

    return $?
}

function fn_create_tar_bz2()
{
    local tarfile=$1
    local files_from=$2
    local files_xclu=$3

    tar jcfpPTX $tarfile $files_from $files_xclu --ignore-failed-read --atime-preserve

    return $?
}


function fn_isdigit()
{
    [[ "$@" =~ [0-9]+ ]]
    return $?
}

# ini parser
function fn_ini_get()
{
    if [ "$#" -lt 3 ] ; then
        echo "Usage: fn_get_ini file sect key"
        return 1
    fi

    local file=$1
    local sect=$2
    local key=$3
    local val=

    val=`sed -n  -e 's/;.*//g' -e 's///g' -e "/^\[$sect\]/,/\[/p" $file | \
        grep -w "$key" |  awk -F'=' '{print $2}'`


    if [ "$?" -ne 0 ] ; then
        return 1
    fi

    echo $val
}

function fn_ini_set()
{
    if [ "$#" -lt 4 ] ; then
        echo "Usage: fn_set_ini file sect key val"
        return 1
    fi

    local file=$1
    local sect=$2
    local key=$3
    local val=$4

    LANG=GB2312 sed -i "/\[$sect\]/,/\[/s/\<$key\>.*/$key = $val/" $file
    return $?
}


[ "${BASH_SOURCE##*/}" != "${0##*/}" ] && return 0
# [ "${BASH_SOURCE##*/}" != "${0##*/}" ] && echo ". ${BASH_SOURCE} over" && return 0

# exit 

fn_main $@ | tee -a $logfile
ret=$PIPESTATUS[0]
check_log_file_size
exit $ret


if [[ "${@}" != *_mulit_sh_* ]] &&
    (checkproc ${SRC_NAME} || checkproc ${SRC_FULL}); then
echo "Run one instance at once"
exit 1
fi

LOG_PATH=${SRC_PATH%/*}/logs/${SRC_MODL}
LOG_FILE=${LOG_PATH}/${SRC_BASE}.log

# for multi instance
SHM_PATH=/dev/shm/xtmp
TMP_PATH=$SHM_PATH/$SRC_BASE
TMP_PROC=$TMP_PATH/$$
TMP_BUFF=$TMP_PROC/console.buffer
TMP_CONF=$TMP_PROC/conf

mkdir -p ${TMP_PROC}
mkdir -p ${LOG_PATH}
test -f ${LOG_FILE} || > ${LOG_FILE}
> ${TMP_BUFF}

# trace
if ! echo $0 | grep -E \
    '(getNTPServerState|getIPByNIC|diskArray.sh|checkAr|checkst|checkIn)'; then
printf "%s %s %-50s %s\n" `date "+[%F %T]"` $0 ${LOG_FILE} >> /var/bash.trc
[ "`du -m /var/bash.trc | awk '{ print $1 }'`" -gt 1 ] && \
    sed -i 1,2000d /var/bash.trc
fi

