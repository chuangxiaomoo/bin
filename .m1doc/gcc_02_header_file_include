# 02_header_file_inc_path 

# 头文件包含建议 2014-04-19

  1. 不要在 <.h> 中包含 <.h>

  这也是为何 `man 3 printf` 会指示你包含一个头文件
  2014-04-19 `logapi.h` `debug.h`, `条目2`处理起来非常复杂。

  2. 不要试图强制<.h>的包含顺序，有1的情况下，事情变得太复杂

  #ifdef _DEBUG_H
  #error "#include <debug.h> must pose after #include <logapi.h>"
  #endif

  3. 用另一个宏来明令集成

  > DBG() log_recored() 可能产生嵌套，不能自动集成
  > 用另一个宏来明令集成，缺少 log_record()，gcc会自动提示。
  # define INTEGRATE_LOG_IN_DEBUG

# 搜索路径

  http://stackoverflow.com/questions/344317/where-does-gcc-look-for-c-and-c-header-files

  C++

      `gcc -print-prog-name=cc1plus` -v

  C
                 `gcc -print-prog-name=cc1` -v

      /* arm_v5t_le */
      `arm_v5t_le-gcc -print-prog-name=cc1` -v
       arm_v5t_le-gcc -print-search-dirs


# 头文件搜索顺序

  header files search sequence
  1. 当前工作路径. 
  2. -I 指定路径 
  3. 系统默认 /usr/include 

  注意：/usr/include 只是被默认加到-I的后面，很人性化的东东，
  #include "head.h"       依次搜索    1 2 3
  #include <head.h>         只搜索      2 3


# -M 形成依赖文件
  > -M  包含系统头文件
  > -MM 不包含系统头文件
  > gcc -MM jco_update.c 

  jco_update.o: upgrade/jco_update.c \
    upgrade/jco_update.h /opt/s/n/libs/utils/inc/utils.h \
    /opt/s/n/libs/include/debug.h /opt/s/n/apis/inc/logapi.h 


# -D 形成依赖文件 .d
  > gcc -MM jco_update.c -o upgrade/jco_update.d

  upgrade/jco_update.d: upgrade/jco_update.c \
    upgrade/jco_update.h /opt/s/n/libs/utils/inc/utils.h \
    /opt/s/n/libs/include/debug.h /opt/s/n/apis/inc/logapi.h 

# dep

%.d:%.cpp
	@set -e; rm -f $@; \
	$(XX) -MM $(CPPFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# -E 查找精确依赖，还是用预处理输出

  > 如：第一次被包含的位置

