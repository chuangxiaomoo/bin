# 使用 strace 窥探一切 coreutils 的行为

    strace readlink -f /bin/sh
    ssize_t readlink(const char *path, char *buf, size_t bufsiz);

# DESCRIPTION

  strace -f -t -T -s 128  command
  strace -f -t -T -s 1024 command
  strace -f -t -T -s 1024 -e trace=mmap2,munmap,mremap,brk,sbrk command
  strace -f -t -T -s 1024 -p yourpid  2>&1 | tee /tmp/sshd_debug 
  strace    -t -T -s 1024 -p 1252   > /tmp/sshd_debug 2>&1    # single-thread

    -f  Trace child processes from fork()
    -T  Show the time spent in system calls.
    -t  Prefix each line of the trace with the time of day.
    -s  strsize  Specify the maximum string size to print (default is 32).
    -o  file
    -p  pid  **可多次调用以调试指定线程 /proc/pid/task/LWP**  LWP = syscall(SYS_gettid);
___________________
    -tt ms 秒时间戳
    -d  调试信息
    -v  verbose mode

# EXAMPLE

  [](https://blog.csdn.net/chen8238065/article/details/53338715)

  1.跟踪nginx, 看其启动时都访问了哪些文件
  strace -tt -T -f -e trace=file -o /data/log/strace.log -s 1024 2>&1 ./nginx

  2.定位程序异常退出
  strace -ttf -T -p 10893 -o tmp -e trace=process 2>&1

  3.程序启动加载文件
  strace -e open,acces ./sh 2>&1 | grep fileName

  4.查询程序耗时
  strace -c -p 11084

  5.查看所有的系统调用
  trace -T -tt -f -s 3000 -o tmp1.out ./tmp.sh | while read line ; do echo $line | sed ‘/”/,/”/s#x#\\x#g’ |xargs -0 printf ;done

  6.链接服务器失败
  strace -e poll,select,connect,recvfrom,sendto nc www.baidu.com 80

  7.使用strace踪端口bind()失败，setsockopt(REUSE)是否被调用。

  8.内存分配跟踪
  -e trace=mmap2,munmap,mremap command

# CPU 高

W312 CPU 高时，top 显示 sys 较高。

```txt
2022/09/20-21:16:11CPU: 22.2% usr 77.7% sys  0.0% nic  0.0% idle  0.0% io  0.0% irq  0.0% sirq
[09-20  17：09：52]CPU: 30.2% usr 68.3% sys  0.0% nic  0.0% idle  0.3% io  0.0% irq  1.1% sirq
[09-20  08：38：56]CPU: 19.8% usr 79.3% sys  0.0% nic  0.0% idle  0.1% io  0.0% irq  0.5% sirq
```

## What 系统调用

1. 系统调用，是硬件资源的统一接口。

## Why 为什么需要系统调用

1. 系统调用可以为用户空间提供访问硬件资源的统一接口，以至于应用程序不必去关注具体的硬件访问操作。比如，读写文件时，应用程序不用去管磁盘类型，甚至于不用关心是哪种文件系统。
2. 系统调用可以对系统进行保护，保证系统的稳定和安全。系统调用的存在规定了用户进程进入内核的具体方式，换句话说，用户访问内核的路径是事先规定好的，只能从规定位置进入内核，而不准许肆意跳入内核。有了这样的进入内核的统一访问路径限制才能保证内核的安全。

我们可以形象地描述这种机制：作为一个游客，你可以买票要求进入野生动物园，但你必须老老实实地坐在观光车上，按照规定的路线观光游览。当然，不准下车，因为那样太危险，不是让你丢掉小命，就是让你吓坏了野生动物。

## How 系统调用不是完全串行的

1. 第一种方式是通过C库函数，包括系统调用在C库中的封装函数和其他普通函数。
2. 第二种方式是使用`_syscall`宏，或 `syscall(__NR_gettid)`，系统调用表 sys_call_table 存储了所有系统调用对应的服务例程的函数地址。

用户进程用`标准C调用序列`来调用这些函数。

系统调用通过软中断0x80陷入内核，跳转到系统调用处理程序system_call函数，并执行相应的`服务例程`，但由于是代表用户进程，所以这个执行过程并不属于中断上下文，而是处于进程上下文。因此，系统调用执行过程中，可以访问用户进程的许多信息，`可以被其他进程抢占`（因为新的进程可能使用相同的系统调用，所以必须保证系统调用可重入），可以休眠（比如在系统调用阻塞时或显式调用schedule函数时）。

