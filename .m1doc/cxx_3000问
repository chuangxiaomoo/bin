/* 3000问 */








. 学语言不要迷失于细节

. free的参数可以是0指针

    man 3 free
    free(NULL); /* No operation is performed */ 


. delete可以删除0指针，但不能重复delete

    http://www.cppblog.com/qiaodong/archive/2006/11/09/14908.html
    http://hi.baidu.com/piaoliuxing126/item/a4ca595045674ddfd58bac03

    int main(int argc, char* argv[])
    {
        int *p;
        p = new int;
        delete p;
        delete p; //该语句出错，应该删除或者注释
        return 0;
    }

    int main(int argc, char* argv[])
    {
        int *p;
        p = new int;
        delete p;
        p = NULL;
        delete p; // 不出错，"delete 后 p = NULL;" 是个好习惯
        return 0;
    }
   ┌──────────────────────────────────────────────────────────────────────────┐
   │为什么没有让delete后的指针自动清零？                                      │
   │http://www.programfan.com/blog/article.asp?id=33976                       │
   │                                                                          │
   │原因是：                                                                  │
   │delete操作符并没有要求它的操作数必须是个左值，所以p=0这样的操作未必合法。 │
   └──────────────────────────────────────────────────────────────────────────┘

. c/c++中malloc/free和new/delete的区别 

    相同点：都可用于申请动态内存和释放内存

    不同点：操作对象(非内部类型、数组)与用法

    1. malloc与free是c/c++语言的标准库函数，new/delete是c++的运算符. 

        他们都可以申请动态内存和释放动态内存
        malloc/free要库文件支持，new/delete则不要。

    2. 操作对象

        对于非内部数据类型（比如用户自定义的类）而言，只用malloc/free无法满足要求。
        因为类的对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数

        new operator 由两步构成，分别是 operator new 和 construct

            operator new对应于malloc，但operator new可以重载，
            可以自定义内存分配策略，甚至不做内存分配，甚至分配到非内存设备上。
            而malloc无能为力。
            new将调用constructor，而malloc不能；
            delete将调用destructor，而free不能

    3. new是类型安全的，而malloc不是，比如：

       ┌────────────────────────────────────────────────────────────┐
       │int* p = new float[2];              // 编译时指出错误       │
       │int* p = malloc(2*sizeof(float));   // 编译时无法指出错误   │
       └────────────────────────────────────────────────────────────┘


    4. new自动计算所需分配的空间大小，而malloc需要显示给出
       new自动返回相应类型的指针，而malloc需要强制转换

       ┌────────────────────────────────────────────────────────────┐
       │int *p1 = (int *)malloc(sizeof(int) * length);              │
       │int *p2 = new int[length];                                  │
       └────────────────────────────────────────────────────────────┘

        因此c++需要一个能完成动态内存分配和初始化工作的运算符new，
        以及一个能完成清理与释放内存工作的运算符delete。

    5. 如果用new 创建对象数组，那么只能使用对象的无参数构造函数。

       ┌────────────────────────────────────────────────────────────────────────┐
       │Obj *objects = new Obj[100];       // 创建100 个动态对象                │
       │                                                                        │
       │不能写成                                                                │
       │Obj *objects = new Obj[100](1);    // 创建100 个动态对象的同时赋初值1   │
       └────────────────────────────────────────────────────────────────────────┘

       ┌────────────────────────────────────────────────────────────────────────┐
       │在用delete 释放对象数组时，留意不要丢了符号‘[]’。例如                   │
       │                                                                        │
       │delete []objects; // 正确的用法                                         │
       │delete objects;   // 错误的用法                                         │
       │                                                                        │
       │后者相当于delete objects[0]，漏掉了另外99 个对象。                      │
       └────────────────────────────────────────────────────────────────────────┘

. 引用与指针比较
    http://blog.csdn.net/listening_music/article/details/6921608

    0.

    都是地址的概念；
    指针指向一块内存，它的内容是所指内存的地址；而引用则是某块内存的别名。

    1. 

    ref 从一而终 初始化及使用时如变量 (没有int& const a这种形式)
    ptr 见异思迁

    struct ref_test { int mygod; };				

    int main(int argc, char *argv[]) {
        ref_test ref = {0};
        ref_test &r_ref = ref;

        cout << "my god\n" << r_ref.mygod << endl;
        return 0;
    }

    2. 

    const修饰引用   -- 操作常量
    参数is引用      -- 如同指针
    返回值is引用    -- 函数的调用也可以被赋值

    3. 

    从编译的角度来阐述它们之间的区别：程序在编译时分别将指针和引用添加到符号表上
    ，符号表上记录的是变量名及变量所对应地址。指针变量在符号表上对应的地址值为指
    针变量的地址值，而引用在符号表上对应的地址值为引用对象的地址值。符号表生成后
    就不会再改，因此指针可以改变其指向的对象（指针变量中的值可以改），而引用对象
    则不能修改。

    类型安全(使用指针之前必须做判空操作，而引用就不必。) 
