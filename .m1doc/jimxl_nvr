# 0 NVR的一些功课

## 准备工作

    git
    ruby + rails
    nodejs + coffeescript + scc/html5 + QT + Extjs
    mysql
    json: http://www.json.org/json-zh.html
    redmine: 项目管理软件 http://192.168.2.92:3000/

## UI体验

  1. 日志 -2013 弹出终端，密码：!@Cj-18F! 
  2. 两个视频输出 VGA SDMA
  3. 抓拍时须要先暂停
  4. NVR自身有4路IO报警
  5. UI中应用到按键，类似 MapReduce编程模型

  6. 报警的设置，等价于基本规则与高级规则的逻辑或
      来源管理  把当前设备贴标签
      类型管理  据场景制作标签

# 1 环境

## 安装OS 

 **login**

    安装虚拟机时使用64位机
    ubuntu 用户root  密码：D8b!5A@a
    UI界面 用户admin 密码：123456

 **安装ssh**

    cd /root/
    dpkg -i openssh-server_5.8p1-7ubuntu1_amd64.deb

 **自已做.deb**

    apt-get时会将.deb保存在/var/临时目录中，将其拷贝出即可。

## 网络配置

  DNS

    # cat /etc/resolv.conf 

    # Generated by NetworkManager
    nameserver 8.8.8.8
    nameserver 8.8.4.4

  添加桥接网卡

## 配置新用户，并使能sudo

  root用户不能提交代码到git服务器，因此新建一个用户于打包，一个用于开发。

    # adduser zhangj
    # cat /etc/sudoers
    # User privilege specification
    root    ALL=(ALL:ALL) ALL
    zhangj  ALL=(ALL:ALL) ALL


## git clone

  **git clone时间花费较长，可同时做下步的apt-get update**

  不要输入密码的秘密
    gitlab里面【点击头像，myprofile】里面添加id_rsa.pub用来导出nvr项目

    5  ssh-keygen 
    6  cat ~/.ssh/id_rsa.pub 

  代码服务器 http://192.168.2.92:3100/

    git clone git@192.168.2.92:nvr.git

  git一次colne下所有分支在.git，
  使用checkout在不同的分支切换，使用branch查看当前分支

  git 使用

    242  git branch
    243  git branch -r 
    244  git remote -v
    245  git pull             # 类似svn update
    247  git pull origin
    248  git checkout qtav_sh_platform
    249  git branch
    250  git checkout master
    251  git branch
    252  git status

  git commit只是先提交到本地。git push才是提交到remote.

## apt-get 安装所有依赖的包(include curl)

    apt-get update
    cd nvr/resource/deb/  
    dpkg -i *.deb 

## Install rvm

    297  \curl -sSL https://get.rvm.io | bash -s stable
    299  source /etc/profile.d/rvm.sh
    301  vim.tiny /etc/profile
         append the line below:
              source /etc/profile.d/rvm.sh
    300  rvm list

## Install Ruby 2.0

    303  rvm list
    304  rvm install 2.0.0
    307  rvm list
    308  which ruby
    309  ruby -v
    310  rvm alias create default ruby-2.0.0-p353
    311  rvm list
    312  which ruby
    313  rvm use  ruby-2.0.0-p353
    314  rvm list
    315  which ruby

## 安装nvr依赖的ruby包

    325  cd /root/nvr/
    327  ls vendor/
    329  gem install vendor/bundler-1.3.5.gem --no-ri --no-rdoc --local
    330  gem install vendor/thor-0.18.1.gem --no-ri --no-rdoc --local
    333  cat Gemfile
    337  bundle install --path vendor --local
    338  bundle list

## 安装nvr初始化配置文件

    342  cat config/nvr.ini.bak config/nvr.ini
    343  cp config/nvr.ini.bak config/nvr.ini

    [database]
    host = 127.0.0.1        # mysql IP
    port = 3306             # mysql port
    username = root             
    password = beijing
    database = nvr

    [message]
    tcp_port = 5678         # mid port
    websocket_port = 5679   # mid web  port 两种访问方法
    ip = 127.0.0.1          # mid 服务 IP

    [model]
    name = JG-871283        # 设备型号 8[nvr] 7[i7-cpu] 128[128路] 3[3u机箱]


## 环境搭建确认

  如果执行命令345有如下输出，则表明环境已经搭建成功。可以开始打包及相应
  的开发。

    345  bundle exec thor list

    output:
      app
      ---
      nvr app:install [PATH]  # 安装项目到[PATH]目录

      builder
      -------
      nvr builder:gtk:service NAME   # 创建gtk服务
      nvr builder:gtk:test NAME      # 创建gtk测试

# 2 NVR 开发

## NVR 开发框架thor

  thor在整个NVR运转中的位置，做为一个手工调试工具

    Thor is a simple and efficient tool for building self-documenting 
    command line utilities

## thor帮助命令的编写

    352  vim.tiny thor/service.rb 
    353  bin/nvr serivce:ruby:list --help
    354  bin/nvr serivce:ruby:start --help
    355  bin/nvr serivce:ruby:start 
    356  bin/nvr serivce:ruby
    357  bin/nvr serivce:ruby:
    358  bin/nvr service:ruby:start --help
    359  bin/nvr service:ruby:start 
    360  bin/nvr service:ruby:help
    361  bin/nvr service:ruby:help start
    362  history

## 创建数据库表和导入初始化数据

  **bin/nvr是thor的链接**

    361  bin/nvr db:migrate
      error:
          thor/db.rb|10| system('ruby bin/migrator.rb') 

    362  vim.tiny nvr.thor 
    363  cat nvr.thor 
    364  vim.tiny thor/db.rb 
    365  vim.tiny bin/start.rb 
    366  vim.tiny thor/db.rb 
    367  git status
    368  git checkout *
    369  git status
    372  ruby bin/migrator.rb 
    373  cat ~/.nvr_db_version 
    376  bin/nvr list
    377  bin/nvr db:load_data
    378  mysql -u root -p

##  启动中间件 

    381  bin/nvr service:ruby:start message_transmit

## 一次git提交经历

    383  cd thor/
    384  ls
    385  vi db.rb 
          thor/db.rb|10| system('ruby bin/migrator.rb') 
    386  ls
    387  git status 
    388  git add .
    389  git commit -m "add ruby parse"

  第一次运行时添加帐户。在gitLab *->* GITLABAdmin area *->* Users *->* New User， 
  在project *->* nvr 加入项目。

    390  git config --global user.name "zhangj"
    391  git config --global user.email zhangj@cnjabsco.com
    392  git commit --amend --reset-author
    393  git push 


# 3 打包升级

##  0. 打包准备

  保证/opt/目录下具备以下目录：
  ffmpeg  portaudio  qt4  qt5  qt5_build_version  ruby2

##  1. 打包过程

  打包命令

    cd nvr
    bin/package.rb
    cp nvr.tar.gz nvr_produce.tar.gz

  一些问题：

    不要在 NVR-DEV 用户上打包，打包脚本会删除vendor下的内容，建议使用root
    用户git colne再打包。
    具体打包过程，参考两个主要的文件：bin/install.rb bin/install_nvr.rb

    可以忽略这个打包错误提示：
    cp: cannot stat `/root/nvr/lib/qt/nvr_lib_files': No such file or directory

    如何选择不同的分支？
    先手动切分支，打当前分支
    
## 2. 制作安装盘

  * 通过ubuntu的startup disk creator工具，先格式化u盘，然后在source disc
    image(.iso)选择nvr定制系统的iso文件，点击make startup disk开始制作安装盘
    参考
    http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-ubuntu

  * 将 nvr_produce.tar.gz 拷贝到U盘根目录

  * 为兼容旧版本升级，在U盘根目录新建一个空文件 QtSDK.tar.gz


## 3. 第一次部署设备

  * 插入用 startup-disk-creator 制作好的U盘，电重启NVR，del进入bios
  * 进入 bios boot 页，选择从U盘启动
  * OS安装成功后，系统会提示重启
  * 点击"RESTART NOW"确认后，再进入bios boot页，选择从电子硬盘启动
  * 有时会检测不到U盘，重新拔插u盘，重启即可。
  * 系统重启会安装NVR，保证U盘中有 nvr_produce.tar.gz

## 4. 出厂后升级

  主菜单 *->*  系统 *->* 升级 *->* 选择u盘中的升级包。

  防断电处理升级目录 ：/opt/NVR /var/NVR_package


## 5. 升级FAQ  

  只有1.2.6后的版本才可以出厂后在界面升级，否则要用usb重新部署。


# 4 NVR架构

## 设计哲学

  1. 一切皆服务
  2. 服务的控制是父类完成的，业务是子类处理的
  3. 服务器是跟语言无关的

  http://192.168.2.92:3000/projects/net-video-recorder/wiki/系统架构

  架构没有层次之分，全部通过中间件通信。

## nvr程序的启动入口

  vim.tiny bin/start.rb
  bin/start_nvr.rb

## 升级流程，升级的入口

  在 bin/start.rb 中进行判断，如果 bin/update.rb 存在，
  启动 bin/start_update.rb 等开始升级。

## 一些约定

  元编程（会写程序的程序）

  约定优于配置（减少灵活性，带来高效，Hibernate）

    1. C-A-T 在X-window打开一个终端
    2. wiki 没有层次结构的链接

    4. 代码风格：类大写、实例小写
    5. xml爷节点命名为复数，如users，子节点命令为单数user

  http://www.lovelucy.info/convention-over-configuration.html

  ruby 文档
  http://apidock.com/ruby
  MapReduce编程模型

## 数据库

    http://www.cnblogs.com/langtianya/archive/2013/03/11/2954832.html
    数据库实体间有三种对应关系：一对一，一对多，多对多。
    夫妻、父子、学生选课
    
    MVC框架
    MVC开始是存在于桌面程序中的，M是指业务模型，V是指用户界面，C则是控制器，
    使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现
    形式。比如一批统计数据可以分别用柱状图、饼图来表示。C存在的目的则是确保M
    和V的同步，一旦M改变，V应该同步更新。

    通过一个解析层，数据形式在 mysql xml json 流转

## qt公共库文件走读

    cd nvr/lib/qt　                 #  库之QT

    vim.tiny config.h               # 配置类，获取本地的文件里面的配置
    vim.tiny appcommon.h            # 一些公用宏的定义
    vim.tiny xmlhelper.h            # xml的一组帮助函数
    vim.tiny messages.h             # 所有消息的头文件
    vim.tiny message.h              # 消息的父类
    vim.tiny remotecallmessage.h    # 远程调用消息
    vim.tiny noticemessage.h        # 通知消息
    vim.tiny service.h              # 服务
    vim.tiny statemachine.h         # 状态机
    vim.tiny tcpmessageconnection.h # tcp连接处理类
    vim.tiny service.cpp            # 服务的父类 

## QT服务

    root@ubuntu:~/project/nvr/services/qt# ls

    primary_video_player    主播放器  
    secondary_video_player  辅屏播放器   
    ui_framework            启动webkit的ui，用于显示网页做的页面

## FAQ

  * 电子盘初始化步骤
    直接安装即可，无需要format

  * 硬盘预分配，分块机制

    全部分配，UI入口：磁盘管理-》参数设置（先设置参数，再初始化）

    1. 每块磁盘在接入nvr后，都需要初始化后才能正常使用

    2. 假如磁盘分配策略为大文件60%（512M），小文件30%（32M），自由文件10%，那
       么磁盘初始化的时候会将该块磁盘上的所有空间占用，表现为60%是单个文件大小
       为512M的空文件，30%是单个文件大小为32M的空文件，剩下10的空间是留给截图所
       用，这每一个文件都在数据库中对应有一条数据库记录，存在NvrFile表中；

    
  * qt播放器的流程、机制、原理

    1. 播放器启动时，同其他服务，先向中间件注册，然后向配置服务取配置，再根据取
       回来的max_player大小，创建同个数的player

    2. 向流服务取回所有流地址，并跟player绑定，播放

    3. 当流掉线，上线时，会通知播放器，然后更新相应的player

    4. 在回放界面，界面通过发送remotecall消息，控制播放器，消息入口在
       execMessage函数中。

  * UI

    UI 由两层组成，底层是由QT写成的，上层是用JS叠上去的。
    能不能像网页一样，从UI界面得到QT模块？

  * 修改NVR的IP后，看不到视频 (修改IP后需要重启服务)

        ps -ef |  grep video  # kill
        xdpyinfo              # 查看终端
        export DISPLAY=:0.0 
        vlc
        gst-launch 

## TODO List

  * 安装过程中的细节找carrie
  * /opt/下的库源码版本?
  * 调QT播放的一些特性，cache100 ms， 500ms ，音视频同步

## 添加服务HelloWorld?


# 关于如何高效交接的一些思考

  * 找到入口，先从宏观上把握，把架子先搭起来，而后再塞砖头
  * 准备一些问题？发现问题，解决问题走一遍

