#! /usr/bin/env ruby

# 第十四章  控制语句

  在ruby中，除了nil和false是假外，其他所有的都是真。nil也是一个真实的对象，你可以
  调用nil的方法，也可以为nil定义新的方法。
  下面讲一下ruby的控制语句。
  ruby规范说明，if和while语句不需要括起来。
  下面的例子用的是if else end语句。
  下面的例子用到了elsif：

## while 

    # In Ruby, nil and false evaluate to false,   
    # everything else (including true, 0) means true   
    # nil is an actual object   
    # if else end 
    var = 5 
    if var > 4 
        puts "Variable is greater than 4"   
        puts "I can have multiple statements here"   
        if var == 5 
            puts "Nested if else possible" 
        else 
            puts "Too cool" 
        end 
    else 
        puts "Variable is not greater than 5"   
        puts "I can have multiple statements here"   
    end 

## if else

    # elseif example 
    # Original example 
    puts "Hello, what\'s your name?"   
    STDOUT.flush 
    name = gets.chomp 
    puts 'Hello, ' + name + '.'  
    if name == 'Satish' 
        puts 'What a nice name!!'  
    else 
        if name == 'Sunil' 
            puts 'Another nice name!' 
        end 
    end 


  在条件判断语句中，可以使用一些常用的关系运算符，比如，==, != >=, <=, >, <。
  ruby还有一种条件判断语句，unless end。除非unless后面跟的条件为真，才会运行unless end
  间的程序，否则跳过。
  这段程序的意思是除非数组ARGV的元素个数为2个（也就是程序的2个参数都给定），才
  会运行程序块中的语句。
  exit是ruby内核内置方法，意思是退出当前应用程序，并返回给操作系统一个值。
  循环语句的使用像下面这样：

## elseif

    # Modified example with elseif  
    puts "Hello, what\'s your name?"  
    STDOUT.flush 
    name = gets.chomp 
    puts 'Hello, ' + name + '.'  
    if name == 'Satish' 
        puts 'What a nice name!!'  
    elsif name == 'Sunil' 
        puts 'Another nice name!' 
    end 


    # Further modified 
    puts "Hello, what\'s your name?"  
    STDOUT.flush 
    name = gets.chomp 
    puts 'Hello, ' + name + '.'  

    # || is the logical or operator  
    if name == 'Satish' || name == 'Sunil'  
        puts 'What a nice name!!'   
    end 

## unless    

    unless ARGV.length == 2 
        puts "Usage: program.rb 23 45" 
        exit 
    end 

## while    

    # Loops 
    var = 0 
    while var < 10   
        puts var.to_s 
        var += 1 
    end 

## case    
    year = 2000 
    leap = case 
           when year % 400 == 0: true 
           when year % 100 == 0: false 
           else year % 4 == 0 
           end 
    puts leap 
    # output is: true 

