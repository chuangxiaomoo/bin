# 设计 = 如何处理冲突

  [TaoUnixP](+/More.of.the.Unix.philosophy ~/bin/.m2doc/TaoUnixProgramming.md)
  [设计法则](http://blog.chinaunix.net/uid-26729065-id-3562261.html)

  1 KISS.不重不漏
  2 简单功能模块化
  3 组合

  三个层次: 单细胞 -> 功能细胞.纵向发展.接口 -> 横向发展.组合 -> 进入轮回

# [对设计的误解](https://blog.youxu.info/2013/03/03/unix-haters-2/)

以王垠说的 TeX 为例。写出《计算机程序设计艺术》的 Knuth 到底知不知道程序语言设计的基本原则我们可以不加讨论。了解一点字体设计和排版的都知道，计算机排版问题是个复杂的问题。的确，软件工具的设计目标，是把复杂的问题简化。然而，大多数人不知道的是，简化问题是一个两步过程。第一步，我们需要把现实的问题映射到一个领域模型。第二步，是把这个模型简化到我们人可以处理的地步。很多时候这两步合并起来了，让我们觉得这两步好像是一步，并且认为所有的设计，都应该朝简化的方向走。这是一个对设计的错误认识。

其实，TeX 本身也是一个由繁到简的软件系统。它把所有排版中的问题，都提炼成了一些控制原语。有了这些控制原语，针对特定领域做优化就不是问题了。现在通用的科学出版排版工具 LaTeX, 正是这样的一种优化。这是有心设计的结果。我们抱怨 TeX 复杂，其实是抱怨排版本身复杂。Windows 系统上有许多排版软件，可以毫不客气地说，没有一个可以达到 TeX 所能到达的精确控制。以此责怪 UNIX 下的软件工具是魔鬼棋，就类似于责怪 Photoshop 为啥不象 Paint 那样简单一样，有选择性地忽视了两者所要解决地问题不一样。

[军刀工具](https://blog.youxu.info/2012/02/02/software-tools-1)的特点如下：

* 面向特定领域，覆盖该领域大部分问题
* 由领域专家设计，使用者需要了解该领域的基本知识才能熟练运用工具
* 内部由众多小模块组成，对外提供一致，简单的控制界面
* 常常具有强大的插件系统，以方便用户扩展现有系统

