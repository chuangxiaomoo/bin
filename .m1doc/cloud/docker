# docker install

```bash
# 默认安装的就是 docker-ce 版本
cd ~/docker/; curl -sSL https://get.docker.com | bash
# uninstall
dpkg -l | grep docker
```

**Management Commands & Commands**

| NO. | 命令                           |                   |
| :-- | :------                        | :------           |
| 1   | docker                         | docker help 入口  |
| 2   | docker COMMAND --help          | 单命令 help  入口 |
| 3   | docker help COMMAND            |                   |
| 4   | man docker run                 |                   |
| 5   | man docker-run                 |                   |

# Docker 中的三个概念：镜像，容器，仓库

1、镜像（image）：Docker 镜像就是一个只读的模板，镜像可以用来创建 Docker 容器。Docker 提供了一个很简单的机制来创建镜像或者更新现有的镜像，用户甚至可以直接从其他人那里下载一个已经做好的镜像来直接使用。

2、容器（ Container）：**容器是从镜像创建的运行实例**。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看做是一个简易版的 Linux 环境，Docker 利用容器来运行应用。镜像是只读的，容器在启动的时候创建一层可写层作为最上层。

3、仓库：仓库是集中存放镜像文件的场所，仓库注册服务器（Registry）上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。目前，最大的公开仓库是 Docker Hub，存放了数量庞大的镜像供用户下载。

4、**网络**：内部也有自己的一套网络管理，省时省力。

# docker 节点级

docker 一级命令的很多内容，都与 `docker container` 相同功用

| NO. | Operate                        |                    |
| :-- | :------                        | :------            |
| 1   | docker images                  | 查看当前存在的镜像 |
| 2   | docker ps                      |                    |
| 3   | docker inspect container/image | 端口绑定、映射等   |
|     |                                |                    |

* docker inspect dfa44b48f039  | grep -w -A5 -E -i '(IPAddress|PortBindings)'

# docker 内容级 nginx: 使用的最多的就是容器的操作

docker container 子命令

| NO. | cmd                                    | Operate                      |
| :-- | :------                                | :------                      |
| 1   | docker run                             | create                       |
| 2   | rm                                     | del                          |
| 3   | start stop restart                     |                              |
| 4   | ls / ls -all                           | 同 docker ps                 |
| 5   | docker exec -it 7c5a2350c4cb /bin/bash | 也可以实现 attach            |
| 6   | cp                                     | 详见 man docker-container-cp |
|     |                                        |                              |

```bash
docker  search centos                                         #搜索容器
docker  pull centos                                           #下载容器
docker  run centos /bin/echo 'hello world'                    #运行一条命令后直接退出

docker  run --name mydocker -it centos /bin/bash              #进入docker容器
docker  run -d --name mynginx --rm -p 8080:80 nginx           #启动nginx镜像，没有会自动pull
        -t    选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上，
        -i    则让容器的标准输入保持打开。
       --name 使用一个自定义的名字
       --rm   退出时删除容器
        -d    后台运行
        -p    将 HOST 本地 8080 端口映射到容器内部的 80 端口

docker  stop    bfd094233f96                                  #停止一个容器，根据容器 id 进行删除
docker  rm      bfd094233f96                                  #删除一个容器
docker  attach  d20f3dc6cd92                                  #进入一个正在运行的容器

# attach 命令不太好用，建议使用 fn_attach NAME 以下命令进入容器：
fn_attach() {
  PID=`docker inspect --format "{{.State.Pid}}" ${1:-mynginx}`
  nsenter --target $PID --mount --uts --ipc --net --pid
}
```
