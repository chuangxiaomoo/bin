# free_buffer_cache

total = free + app + slab + pageTables + buff + cached
[Linux Used内存到底哪里去了？](http://blog.yufeng.info/archives/2456)
[Linux下谁在消耗我们的cache](http://blog.yufeng.info/archives/688)

# free

  root@Moo64:~# free
               total       used       free     shared    buffers     cached
  Mem:       1025048     299936     725112          0      28248      84368
  -/+ buffers/cache:     187320    `837728`
  Swap:       522236        672     521564

  `837728` = 725112 +  28248 +  84368
  `837728` 是真正可用的内存

  在arm上，没有下列的行，cache的值需要用 top 或 cat /proc/meminfo 来查看。
               total       used       free     shared    buffers
  -/+ buffers/cache:     187320    `837728`

# 块设备 VS 字符设备

|                       |                                                |
|      字符设备         |                      块设备                    |
+-----------------------+------------------------------------------------+
|        1byte          |  块，硬件块各有不同，但是内核都使用512byte描述 |
|      顺序访问         |                     随机访问                   |
| 没有缓存，实时操作    |               有缓存，不是实时操作             |
|一般提供接口给应用层   |           块设备一般提供接口给文件系统         |
|  是被用户程序调用     |                由文件系统程序调用              |
|                       |                                                |

因此，大量写串口时，会严重拖慢系统的性能。以及在格式化磁盘时不要刷新进度。
此外，大多数情况下，磁盘控制器都是直接使用DMA方式进行数据传送。块设备IO调度，使用`电梯算法`。

# Buffer（缓冲）和Cache（缓存）的区别

  [cache](https://feichashao.com/dirty_ratio_and_dirty_background_ratio/)
  [b-c-diff](http://zhumeng8337797.blog.163.com/blog/static/100768914201110244740147/)
  [浅谈Linux内存管理机制](http://www.linuxeye.com/Linux/1932.html)
  [buffer cache与page cache的主要区别 from Robert Love](linux_meminfo_buffer_cache)

  buffers是用来缓冲[块设备](随机存储+缓冲)做的，它只记录文件系统的元数据（metadata）以及 tracking in-flight pages，

    find /* -name  *.conf

  cached 是用来给文件做缓冲。如果有多个进程都要访问某个文件，于是该文件便被cache`以方便下次快速访问`，提高系统性能。

    vi large_file

  更通俗一点说：buffers主要用来存放目录里面有什么内容，文件的属性以及权限等等。而cached直接用来记忆我们打开过的文件和程序。
  用上述命令查看or编辑文件，感受第二次操作的速度。

  [Redhat解说](https://stackoverflow.com/questions/6345020/what-is-the-difference-between-buffer-vs-cache-memory-in-linux)
  Example: When there is a request of any data which is present in the page cache, 
  first the kernel checks the data in the buffers which contain the metadata which points to the actual files/data contained in the page caches. 
  Once from the metadata the actual block address of the file is known, it is picked up by the kernel for processing.

# Drop|禁用cache，更多请参考[man proc]

  > sync; echo 3 > /proc/sys/vm/drop_caches
  > arm-linux

@begin=sh@
  echo 100 > /proc/sys/vm/dirty_expire_centisecs
  echo 100 > /proc/sys/vm/dirty_writeback_centisecs   # this reduce to 1 second the flush from the RAM to disk

  use echo 1 > /proc/sys/vm/drop_caches;              # to free pagecache, 
  use echo 2 > /proc/sys/vm/drop_caches;              # to free dentries and inodes, 
  use echo 3 > /proc/sys/vm/drop_caches;              # to free pagecache, dentries and inodes, 
@end=sh@

# sd卡 cache

[](https://unix.stackexchange.com/questions/152066/what-is-being-cached)

# sd卡 buffer 保证数据的 原子性 一致性 可靠性

-o sync
两次rename
delay 2s 写入
fdatasync 不写 metadata 提高速度
[](http://www.lxway.com/920109562.htm)
[](http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/)

