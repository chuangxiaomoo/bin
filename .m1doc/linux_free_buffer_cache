# free_buffer_cache

# free

  root@Moo64:~# free
               total       used       free     shared    buffers     cached
  Mem:       1025048     299936     725112          0      28248      84368
  -/+ buffers/cache:     187320    `837728`
  Swap:       522236        672     521564

  `837728` = 725112 +  28248 +  84368
  `837728` 是真正可用的内存

  在arm上，没有下列的行，cache的值需要用 top 或 cat /proc/meminfo 来查看。
               total       used       free     shared    buffers
  -/+ buffers/cache:     187320    `837728`

# Buffer（缓冲）和Cache（缓存）的区别

  [b-c-diff](http://zhumeng8337797.blog.163.com/blog/static/100768914201110244740147/)

  简单来说，buffer是即将要被写入磁盘的，而cache是被从磁盘中读出来的。


  buffer是由各种进程分配的，被用在如输入队列等方面。一个简单的例子如某个进程
  要求有多个字段读入，在所有字段被读入完整之前，进程把先前读入的字段放在
  buffer中保存。如read()时一次多读些出来...

  cache经常被用在磁盘的I/O请求上，如果有多个进程都要访问某个文件，于是该文件
  便被做成cache`以方便下次被访问`，这样可提高系统性能。

# Page cache & buffer cache

  [有关cache](https://feichashao.com/dirty_ratio_and_dirty_background_ratio/)
  Page cache实际上是针对文件系统的，是文件的缓存，在文件层面上的数据会缓存到
  page cache。文件的逻辑层需要映射到实际的物理磁盘，这种映射关系由文件系统来
  完成。当page cache的数据需要刷新时，page cache中的数据交给`buffer cache`，
  但是这种处理在2.6版本的内核之后就变的很简单了，没有真正意义上的cache操作。

# Drop|禁用cache，更多请参考[man proc]

  > sync; echo 3 > /proc/sys/vm/drop_caches
  > arm-linux

@begin=sh@
  echo 100 > /proc/sys/vm/dirty_expire_centisecs
  echo 100 > /proc/sys/vm/dirty_writeback_centisecs   # this reduce to 1 second the flush from the RAM to disk

  use echo 1 > /proc/sys/vm/drop_caches;              # to free pagecache, 
  use echo 2 > /proc/sys/vm/drop_caches;              # to free dentries and inodes, 
  use echo 3 > /proc/sys/vm/drop_caches;              # to free pagecache, dentries and inodes, 
@end=sh@

# sd卡 cache

[](https://unix.stackexchange.com/questions/152066/what-is-being-cached)

# sd卡 buffer 保证数据的 原子性 一致性 可靠性

-o sync
两次rename
delay 2s 写入
fdatasync 不写 metadata 提高速度
[](http://www.lxway.com/920109562.htm)
[](http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/)

