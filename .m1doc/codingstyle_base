# 语法(规则)，源自教训

Coding-style类似于自然语言的语法。本质上来看，其并不是“规定你应该怎么写”，而是“尽量”“系统地”解释“人们为什么普遍这么写”。

# <Linux内核代码风格>

/usr/src/linux/include/linux/kernel.h
[CodingStyle]()
[CodingStyle.zh_CN](https://www.oschina.net/translate/linux-kernel-coding-style)

# 两大原则

**1. KISS**
**2. DRY**

好的代码肯定是可利用性高的，JCP命令中的3种参数如何进行归一设置，
如果老是这样，出错的概率大大增加了，特别是在后续维护时。

    guobiaocfg -act set -devsysname
    char _devsysname[]
    guobiao:devsysname

# 把好质量关

**1. no-warning**
gcc -Wall

**2. 检查函数返回值并打印**
if (FAIL) {
  DBG("错误原因");
}

# 从总体设计上把握

[server/client架构](nxp_hold)

# 形成映射规则(抽象)

统一命令规范(共5处)
    -- JCP命令 （与其它5项分离）

conf_get_ethcfg
    --  提交的api接口名（全小写）
        conf  + get(set) + 配置名cfg，以`_`连接，
        配置名cfg部分没有下划线
"getEthCfg"
    --  jconfig内部命令
        get(set) + 配置名cfg，以配置头字母及Cfg组成

handleEthCfg
    --  jconf入口函数
        把jconfig命令中get(set)换成handle

SysConfEthCfg
    --  配置文件访问函数
        把jconfig命令中get(set)换成SysConf

JEvent_EthCfgChg
    -- JEventType枚举成员
        把jconfig命令中get(set)换成 JEvent_，末尾再加Chg

# misc 

1. 千万不要把 bool 设计成函数参数, 定义成枚举类型是最好的选择

http://coolshell.cn/articles/5444.html

2. 一些陈皓的文章

[程序命名的一些提示](http://coolshell.cn/articles/1990.html)
[编程命名中的7+1个提示](http://coolshell.cn/articles/1038.html)

