#! /usr/bin/env ruby

# w3m -dump 'http://qianjigui.iteye.com/blog/325083'
Ruby正则表达式读书设计模式D语言

个人感觉《Ruby程序设计语言》确实是一本好书，它将Ruby的枝枝节节都点到了。

在这里，我从自己的一些心得出发，对Ruby语言的操作符做个读书笔记式的小结。


运算符一览表（注意从上到下优先级依次降低）：

┌────────┬──┬──────────────┬──┬────────────┬─────────────────────────────────┐
│        │作│              │是│            │                                 │
│        │用│              │否│            │                                 │
│        │的│              │可│            │                                 │
│运算符  │运│（左/右）结合 │以│具体操作含义│备注                             │
│        │算│律            │重│            │                                 │
│        │数│              │新│            │                                 │
│        │数│              │定│            │                                 │
│        │目│              │义│            │                                 │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │逻辑取否，位│在Ruby1.9中重新定义正号时使用 +@.│
│!   ~   │  │              │可│运算取反，算│~x=-x-1.                         │
│+       │1 │右            │以│术取正（正号│                                 │
│        │  │              │  │）          │!在Ruby1.9中可以重新定义,1.8中不 │
│        │  │              │  │            │行.                              │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │这个运算和我│                                 │
│**      │2 │右            │可│们数学上的幂│符合右结合律： x**y**z == x**    │
│        │  │              │以│运算是一致的│(y**z)                           │
│        │  │              │  │。          │                                 │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│-       │1 │右            │可│算术取负（负│在Ruby1.9中重新定义正号时使用 -@.│
│        │  │              │以│号）        │优先级和“正号”不同               │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │整数除法：取整，                 │
│        │  │              │  │            │                                 │
│        │  │              │  │            │整数/0 raise ZeroDivisionError   │
│        │  │              │  │            │                                 │
│        │  │              │  │            │正浮点数/0 =  Infinity           │
│        │  │              │  │            │                                 │
│        │  │              │  │            │负浮点数/0 =  -Infinity          │
│        │  │              │  │            │                                 │
│        │  │              │  │            │0.0/0 = NaN                      │
│        │  │              │  │            │                                 │
│        │  │              │  │算术乘法/字 │                                 │
│        │  │              │  │符串重复/数 │irb(main):001:0> a=[0]           │
│*   /   │  │              │可│组操作、除法│=> [0]                           │
│%       │2 │左            │以│（根据类型的│irb(main):002:0> a*=2            │
│        │  │              │  │不同可能会表│=> [0, 0]                        │
│        │  │              │  │现出取整的效│irb(main):003:0> a*=3            │
│        │  │              │  │果）、取余数│=> [0, 0, 0, 0, 0, 0]            │
│        │  │              │  │            │                                 │
│        │  │              │  │            │irb(main):004:0> a='.'           │
│        │  │              │  │            │=> "."                           │
│        │  │              │  │            │irb(main):005:0> a*=2            │
│        │  │              │  │            │=> ".."                          │
│        │  │              │  │            │irb(main):006:0> a*=3            │
│        │  │              │  │            │=> "......"                      │
│        │  │              │  │            │                                 │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │irb(main):001:0> a=[1,2,3]       │
│        │  │              │  │            │=> [1, 2, 3]                     │
│        │  │              │  │算术加法/字 │irb(main):002:0> b=[4]           │
│+   -   │2 │左            │可│符串连接/数 │=> [4]                           │
│        │  │              │以│组合并、算术│irb(main):003:0> c=a+b           │
│        │  │              │  │减法/数组差 │=> [1, 2, 3, 4]                  │
│        │  │              │  │            │irb(main):004:0> c-=b            │
│        │  │              │  │            │=> [1, 2, 3]                     │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │ irb(main):001:0> a='first'      │
│        │  │              │  │            │=> "first"                       │
│        │  │              │  │            │irb(main):002:0> a<<'second'     │
│        │  │              │  │            │=> "firstsecond"                 │
│        │  │              │  │            │irb(main):003:0> a               │
│        │  │              │  │ 位运算左移/│=> "firstsecond"                 │
│<<   >> │2 │左            │可│字符串添加/ │irb(main):004:0> a=[]            │
│        │  │              │以│数组添加，位│=> []                            │
│        │  │              │  │运算右移    │irb(main):005:0> a<<'one'        │
│        │  │              │  │            │=> ["one"]                       │
│        │  │              │  │            │irb(main):006:0> a<<'two'        │
│        │  │              │  │            │=> ["one", "two"]                │
│        │  │              │  │            │irb(main):007:0> a               │
│        │  │              │  │            │=> ["one", "two"]                │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │irb(main):001:0> (0b1010 &       │
│        │  │              │  │            │0b1100).to_s(2)                  │
│        │  │              │  │位运算和AND/│=> "1000"                        │
│&       │2 │左            │可│数组交      │TrueClass,FalseClass,NilClass同样│
│        │  │              │以│Intersection│定义了&,|,^.用于Boolean运算 ,但是│
│        │  │              │  │            │这并不是一个正确的方法.&&,||用于 │
│        │  │              │  │            │逻辑运算时存在短路现象，而位操作 │
│        │  │              │  │            │符没有.                          │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │irb(main):001:0> (0b1010 &       │
│        │  │              │  │            │0b1100).to_s(2)                  │
│        │  │              │  │            │=> "1000"                        │
│        │  │              │  │            │irb(main):002:0> (0b1010 |       │
│        │  │              │  │            │0b1100).to_s(2)                  │
│        │  │              │  │            │=> "1110"                        │
│        │  │              │  │            │irb(main):003:0> (0b1010 ^       │
│        │  │              │  │            │0b1100).to_s(2)                  │
│        │  │              │  │            │=> "110"                         │
│        │  │              │可│位运算或OR/ │irb(main):001:0> a=[1,2,3]       │
│|   ^   │2 │左            │以│数组并Union │=> [1, 2, 3]                     │
│        │  │              │  │，异或XOR   │irb(main):002:0> b=[2,3,4]       │
│        │  │              │  │            │=> [2, 3, 4]                     │
│        │  │              │  │            │irb(main):003:0> a+ b            │
│        │  │              │  │            │=> [1, 2, 3, 2, 3, 4]            │
│        │  │              │  │            │irb(main):004:0> a| b            │
│        │  │              │  │            │=> [1, 2, 3, 4]                  │
│        │  │              │  │            │irb(main):005:0> a- b            │
│        │  │              │  │            │=> [1]                           │
│        │  │              │  │            │irb(main):006:0> a& b            │
│        │  │              │  │            │=> [2, 3]                        │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │data大小顺序关系：数值、字符串、 │
│        │  │              │  │            │日期。类层次关系，父子关系，非父 │
│        │  │              │  │大小顺序判断│子关系                           │
│        │  │              │  │：小于/继承 │irb(main):001:0> String < Object │
│<   <=  │  │              │可│（类间关系）│=> true                          │
│>=   >  │2 │左            │以│，小于等于，│irb(main):002:0> Object>Numeric  │
│        │  │              │  │大于等于，大│=> true                          │
│        │  │              │  │于/泛化（类 │irb(main):003:0> Numeric<Integer │
│        │  │              │  │间关系）    │=> false                         │
│        │  │              │  │            │irb(main):004:0> String<Numeric  │
│        │  │              │  │            │=> nil                           │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │关于对象的相同操作：             │
│        │  │              │  │            │                                 │
│        │  │              │  │            │  • equal?   主要用于判断标识符指│
│        │  │              │  │            │    向的对象是否为同一个。对于任 │
│        │  │              │  │            │    意两个不同的实体对象，本方法 │
│        │  │              │  │            │    一定返回false。在底层实现应该│
│        │  │              │  │==以左操作数│    就是直接查看内存地址是否相同 │
│        │  │直接结合，无所│  │为基准测试相│    。在通常状况下，子类不能重写 │
│        │  │谓左右结合律。│  │等，!=返回==│    本方法。另外可以通过考察独享 │
│        │  │如果在一个表达│  │的取反值，==│    的object_id来判断是否是两个对│
│        │  │式中出现了多个│  │=主要用于   │    象。                         │
│        │  │此类符号必需使│  │case-when语 │  • ==   这是一个最常用的考察相同│
│        │  │用小括号'(',')│  │句中的匹配操│    的操作，在普通的object中，其 │
│        │  │'隔开。       │  │作，=~用于模│    行为和equal?相同。不过很多   │
│        │  │              │  │式匹配操作判│    class重定义本操作来实现其它有│
│        │  │irb           │  │断，!~是=~取│    意义的判断（字符串、数值型） │
│        │  │(main):001:0> │  │反。        │    。对于两个数组使用==，是先判 │
│        │  │true==false== │  │            │    断长度相同，然后判断每个对应 │
│        │  │false         │  │            │    位置上的==状况。而哈希表使用=│
│==   ===│  │SyntaxError:  │  │            │    =，是先判断长度，然后判断key/│
│   !=   │  │compile error │可│<=>是一个通 │    value键值对的相同情况（key采 │
│=~   !  │2 │(irb):1:      │以│用的大小判断│    用eql?方法判断，而value采用==│
│~   <=> │  │syntax error ,│  │操作，很多时│    判断）。                     │
│        │  │unexpected tEQ│  │候比较操作都│  • eql?   很多时候本方法被重写为│
│        │  │......        │  │是在本操作基│    直接调用==。                 │
│        │  │irb           │  │础上做一些修│  • ===   主要用于case-when语句中│
│        │  │(main):002:0> │  │饰。        │    的匹配判断。Range类型中用于判│
│        │  │true==false<=>│  │            │    断是否包含，而在Regexp中则用 │
│        │  │false         │  │a<=>b :值   │    于是否匹配表达式。irb        │
│        │  │SyntaxError:  │  │返回值      │    (main):001:0> (1..10)===5    │
│        │  │compile error │  │            │    => true  #范围               │
│        │  │(irb):2:      │  │  • a<b  -1 │    irb(main):002:0> /\d+/===    │
│        │  │syntax error ,│  │  • a==b 0  │    "123"                        │
│        │  │unexpected    │  │  • a>b  1  │    => true  #正则表达式         │
│        │  │tCMP          │  │  • 不能比较│    irb(main):003:0> String ===  │
│        │  │......        │  │      nil   │    "s"                          │
│        │  │              │  │            │    => true  #具体对象和类       │
│        │  │              │  │            │    irb(main):004:0> :s==="s"    │
│        │  │              │  │            │    => false  #标号类型，Ruby1.8 │
│        │  │              │  │            │    中为false，而1.9中则为ture   │
│        │  │              │  │            │  • =~   主要用于String和Regexp类│
│        │  │              │  │            │    型中的模式匹配操作。!~ 为 =~ │
│        │  │              │  │            │    取反                         │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │在Ruby的Boolean表达式中，        │
│        │  │              │  │            │expression表现出逻辑非时只有两种 │
│        │  │              │  │            │情况(false, nil)，其它任何状况下 │
│        │  │              │  │            │均为true.                        │
│        │  │              │  │            │                                 │
│        │  │              │  │            │特殊的表示:                      │
│        │  │              │  │            │                                 │
│        │  │              │不│            │irb(main):001:0> x=true          │
│&&      │2 │左            │能│逻辑与      │=> true                          │
│        │  │              │  │            │irb(main):002:0> x && p(x.to_s)  │
│        │  │              │  │            │"true"                           │
│        │  │              │  │            │=> nil                           │
│        │  │              │  │            │irb(main):003:0> x=nil           │
│        │  │              │  │            │=> nil                           │
│        │  │              │  │            │irb(main):004:0> x && p(x.to_s)  │
│        │  │              │  │            │=> nil                           │
│        │  │              │  │            │#在这里相当于 p(x.to_s) if x     │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│||      │2 │左            │不│逻辑或      │优先级低于 &&                    │
│        │  │              │能│            │                                 │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │区间包含字面量区间（1..3, 1...4）│
│        │  │              │  │            │和变量区间(x..x*x, x+1...x+x*x). │
│        │  │              │  │            │                                 │
│        │  │              │  │            │关于开闭表达式有记忆属性：       │
│        │  │              │  │            │                                 │
│        │  │              │  │            │irb(main):001:0> (1..10).each{|x|│
│        │  │              │  │            │p x if x==3.. x>=3}              │
│        │  │              │  │            │3                                │
│        │  │              │  │            │=> 1..10                         │
│        │  │              │  │            │irb(main):002:0> (1..10).each{|x|│
│        │  │              │  │            │p x if x==3... x>=3}             │
│        │  │              │  │            │3                                │
│        │  │只能是两个数据│  │            │4                                │
│        │  │。            │  │            │=> 1..10                         │
│        │  │              │  │            │                                 │
│        │  │irb           │  │            │                                 │
│        │  │(main):001:0> │  │            │                                 │
│        │  │1..2...3      │  │            │$stateTwoPoint = false           │
│        │  │SyntaxError:  │  │            │#exp1..exp2                      │
│        │  │compile error │  │            │def flipflopTwoPoint(exp1,exp2)  │
│        │  │(irb):1:      │  │            │  if !$stateTwoPoint             │
│        │  │syntax error, │不│区间/       │    result = exp1                │
│..   ...│2 │unexpected    │能│flip-flop开 │    if result                    │
│        │  │tDOT3         │  │闭表达式    │      $stateTwoPoint = ! exp2    │
│        │  │......        │  │            │    end                          │
│        │  │irb           │  │            │    result                       │
│        │  │(main):002:0> │  │            │  else                           │
│        │  │(1..2)...3    │  │            │    $stateTwoPoint = ! exp2      │
│        │  │ArgumentError:│  │            │    true                         │
│        │  │bad value for │  │            │  end                            │
│        │  │range         │  │            │end                              │
│        │  │    from      │  │            │                                 │
│        │  │(irb):2       │  │            │$stateThreePoint = false         │
│        │  │              │  │            │#exp1...exp2                     │
│        │  │              │  │            │def flipflopThreePoint(exp1,exp2)│
│        │  │              │  │            │  if !$stateThreePoint           │
│        │  │              │  │            │    $stateThreePoint = exp1      │
│        │  │              │  │            │  else                           │
│        │  │              │  │            │    $stateThreePoint = ! exp2    │
│        │  │              │  │            │    true                         │
│        │  │              │  │            │  end                            │
│        │  │              │  │            │end                              │
│        │  │              │  │            │                                 │
│        │  │              │  │            │ 以上的exp1,exp2都是逻辑表达式， │
│        │  │              │  │            │每次运行时都要重新计算。         │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │expression ? valueLeft :         │
│        │  │              │  │            │valueRight                       │
│        │  │              │  │            │                                 │
│        │  │              │  │            │if expression then               │
│        │  │              │  │            │   valueLeft                     │
│        │  │              │  │            │else                             │
│?:      │3 │右            │不│三目条件表达│   valueRight                    │
│        │  │              │能│式          │end                              │
│        │  │              │  │            │                                 │
│        │  │              │  │            │满足右结合律：                   │
│        │  │              │  │            │                                 │
│        │  │              │  │            │a ? b:c?d:e等同于 a?b : (c?d:e)  │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │Rescue 语句修饰句写道            │
│        │  │              │  │            │一个语句可以有个可选的rescue修饰 │
│        │  │              │  │            │句跟在另一个语句后面(来扩展另一个│
│        │  │              │  │            │rescue修饰句，等等)。Rescue修饰句│
│rescue  │2 │左            │不│错误恢复    │不接受异常参数，它挽救           │
│        │  │              │能│            │StandardError和它的子类。        │
│        │  │              │  │            │如果一个异常在rescue修饰句的左侧 │
│        │  │              │  │            │被引发，左侧的语句被放弃，全部行 │
│        │  │              │  │            │值是右边语句的值。               │
│        │  │              │  │            │                                 │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│=   **= │  │              │  │            │                                 │
│   *=   │  │              │  │            │                                 │
│/=   %= │  │              │  │            │                                 │
│   +=   │  │              │  │            │                                 │
│-=   <<=│2 │右            │不│赋值语句    │赋值语句                         │
│   >>=  │  │              │能│            │                                 │
│&&=   &=│  │              │  │            │                                 │
│    ||= │  │              │  │            │                                 │
│     |= │  │              │  │            │                                 │
│      ^=│  │              │  │            │                                 │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │可以看成一个  │不│测试变量和类│如果没有定义则返回nil，已经定义则│
│defined?│1 │method 方法/行│能│型等是否定义│返回字符串（情况比较复杂，在这里 │
│        │  │为            │  │            │不做讨论）                       │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│not     │1 │右            │不│逻辑非      │比!优先级低                      │
│        │  │              │能│            │                                 │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │比&&,||优先级低。即              │
│        │  │              │  │            │                                 │
│        │  │              │不│逻辑与、逻辑│defined? a and defined? b #等同于│
│and   or│2 │左            │能│或          │(defined? a) and (defined? b)    │
│        │  │              │  │            │                                 │
│        │  │              │  │            │defined? a && defined? b #等同于 │
│        │  │              │  │            │defined? ((a && (defined? b)))   │
├────────┼──┼──────────────┼──┼────────────┼─────────────────────────────────┤
│        │  │              │  │            │statement if expression #        │
│        │  │              │  │            │expression为真则执行statement    │
│        │  │              │  │            │                                 │
│        │  │特殊修饰词    │  │            │statement if expression #        │
│if      │  │              │  │            │expression为假则执行statement    │
│unless  │  │大体格式是    │不│条件/循环修 │                                 │
│while   │2 │              │能│饰语句      │statement while expression #     │
│until   │  │待执行语句    │  │            │expression为真则循环statement    │
│        │  │XXX(关键字)   │  │            │                                 │
│        │  │条件          │  │            │statement while expression #     │
│        │  │              │  │            │expression为假则循环statement    │
│        │  │              │  │            │                                 │
│        │  │              │  │            │                                 │
└────────┴──┴──────────────┴──┴────────────┴─────────────────────────────────┘

