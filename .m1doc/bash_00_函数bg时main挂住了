#!/bin/bash 

〇、tee会挂住

    function fn_main()
    {
        file=/tmp/.upStart.sh
        echo "{ echo 10 start; sleep 10; echo 10 end; }" > ${file}
        bash ${file}&
    }

    fn_main 2>&1 | tee /root/upgrade.log 

    # and upStart.sh will inherit the STDOUT fd from fn_main, 
    # tee won't quit till STDOUT closed
    

一、后台"函数"也挂住

    因为fn_sub也使用了 /var/upgrade.log

    # man bash -> [coproc](http://blog.csdn.net/laoyiin/article/details/8511570)
    # coproc会使用 built-in wait 进行等待
    # [GNU并行 parallel](http://blog.sina.com.cn/s/blog_3f7652740100y0ju.html)

    #!/bin/bash - 

    function fn_sub() {
        sleep 40
    }

    function fn_main() {
        fn_sub &
    }

    fn_main >> /var/upgrade.log  2>&1


二、后台执行文件不会挂住

    #!/bin/bash - 

    cat <<-"HERE" > /var/sub
    #!/bin/bash - 
    function fn_sub() {
        while :; do
            echo "I am going to sleep 40"
            sleep 40
        done
    }

    fn_sub
    HERE

    chmod +x /var/sub

    function fn_main() {
        /var/sub &
        bgpid=$!
        echo "I am going out with bgpid $bgpid"
    }

    fn_main >> /var/upgrade.log  2>&1


三、消失的CMD

    如果没有“#! /bin/bash -”，那么ps -ef 时，这个脚本文件的CMD列将会是其
    父进程的名字。

    cat <<-"HERE" > /var/sub
    #! /bin/bash -
	HERE
