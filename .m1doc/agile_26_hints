# 26_hints

[关于敏捷开发的26个心得](http://kb.cnblogs.com/page/72307/)

摘要：我收集各式各样的至理名言。最近我一直在研究敏捷软件开发；有收获吗？下面
就是能够指导敏捷软件开发团队的26条核心原则。

　　我收集各式各样的至理名言。最近我一直在研究敏捷软件开发；有收获吗？下面就
是能够指导敏捷软件开发团队的26条核心原则。

  • 用例一完全能够运行后再开发用例二。厨房里有一种说法正好可以印证这个问题：“
    做好一盘菜后你再做下一盘”．对于软件开发来说一个最大的问题就是人们喜欢并行
    开发多个任务。因为不可避免的，我们设计的功能中总会有一部分会被放弃砍掉，
    如果提前开发，很可能做无用功。一次只开发一个用例（或很少几个用例，这根据
    你的开发团队的大小而定）；让这个用例功能完整；让相应的测试用例都能通过；
    相应的文稳都补齐；只有在当前的用例完全开发完成后，才做为一个整体提交到版
    本库，才进行下一个用例。
  • 避免提交一个半成品。这一点大家似乎都知道，但这条原则必须列入任何一个开发
    指导里。能够听取这些忠告进行开发测试然后提交代码的程序员一定不会发生代码
    提交到版本库使整个项目无法编译码通过情况。如果系统编译失败，那一定是有人
    抄近道到了。
  • 不要在还没有任何使用案例的情况下设计通用模块。只有在你知道有具体用例的情
    况下，你才可以实现一个具体的类，而且你在该类中只应该实现当前该用例需要的
    方法。你也许会想到将来这个类会有其它的用途，你可以用注释的方式记录一下，
    但不要去实现它，只有在有了具体用例后你才可以实现它。
  • 一定不要在没有使用例的情况下往类里添加成员方法。这跟上面一条极其相似，除
    了这里针对的是数据成员。开发人员很容易想到：一个‘客户记录’里应该有‘送货地
    址’的信息，但一定不要在没有任何用例要求这个属性的时候实现这个属性。
  • 不要害怕做决定；不要害怕改变以前的决定。敏捷开发的目的是应对客户需求的不
    确定。开发前期你不可能获到全部的信息。你应该尽可能的拖延做决定的时间，但
    一旦到了你该做决定的时候，你应该当机立断，让项目向前推进。你不能说一直等
    到有了足够的信息才做决定。相反，你要依赖现有的信息作出最正确们决定。之后
    ，当有新的信息出现后，不要害怕对以前的决定作出更改。 (老辈人有的称之为触
    发器，但我称之为随环境而变)
  • 不断的了解如何改进系统。这项工作没有尽头，你应该做好思想准备，持续不断的
    寻找可以改进的地方，收集各种关于如何找到质量问题、解决质量问题的案例。
  • 审查，审查，审查。敏捷开发可以帮助我们应对需求在将来的不确定，但过去的事
    情也存在不确定性。测试工作永远不能停下来。程序每次运行的表现都要被评审和
    记录。
  • 软件的设计要以人为本，而不是系统。很多开发人员退而求其次、以技术为中心，
    让设计为技术服务。永远不要忘记软件的终极目标是什么，是帮助人们完成工作。
  • 测试是产品的一部分。许多开发人员和经理都认为产品就是你打包给客户的东西，
    其余的都不重要。其实测试也应该看作是产品的实际一部分，应该在设计时给予相
    当的重视，甚至，在很多时候，测试功能也应该同产品一起提交给客户。（后面说
    的这部分很多人都不认可，一个内置的能自我测试软件包并不会占用多少额外的资
    源，但当你需要用到它时，你会发现它的巨大价值。)
  • 先写测试用例，后写代码。测试用例可以用来精确的说明我们的设计需求。很多时
    候我们都是通过运行测试用例后发现我们的设计中存在问题。想想吧，先写测试用
    例后编码能节省多少时间。但是：写完测试用例1，然后编写用例1，完后才开始用
    例2。
  • 清理垃圾代码。很显然，又是一个尽人皆知的道理，但它也必须写入任何的开发原
    则里，因为它是如此的重要。查找垃圾代码的工作永远没有尽头，找到它，消灭它
    。要去除掉所有的不能给实际用户带来价值的代码。如果你不能指出某段代码对用
    户有什么用处，那它很可能就是没用的。
  • 培养对集成失败问题立即做出反应的习惯。你要明白，当集成构建失败时，它会影
    响项目中的每一个人，所以没有比让核心程序能正确的集成和测试通过更重要的事
    情了。我曾经见到过有的团队的集成构建中断几个月都不去管它，因为他们有其他
    的工作要做。每个人都在忍受这种情况，但没人采取措施。我们应该明白，应该广
    泛的认识到，只要做出一点点工作，整个的团队会因此得到非常大的回报。
  • 团队的每个成员都要知道客户的需求。大型复杂的项目必须要分割到几个独立的团
    队去开发，然后派发到每个开发人员的手中，但这绝对不能变成程序员可以不明白
    最终产品的使用用户的需求和目标是什么。
  • 把意义相关的东西放在一起。组织好代码，让高度相关的东西都放在一起，也就是
    放在一个类里。这是标准的面向对象设计原则里的封装的概念。理想情况下，类之
    外的程序并不需要知道类里面的工作细节。有些开发人员喜欢把代码放到好几个文
    件里，这样是为了按另一种方式组织它们：例如把相同的数据类型的放到一起，或
    按字母顺序分类。举个例子，有人会把所有的常量放在单独一个包下的一个类里，
    他们这样做毫无必要，增加了程序的复杂性。按照指导原则，它们应该按照相关性
    进行分组，从而减少复杂性。
  • 先测试后提交代码。这个准则能让你确保“永远不要让集成构建失败”的准则。
  • 过早优化是灾难之源这句话是引用Don Knuth的，今天听起来一点不错。在内核里的
    代码应该尽力的写好来避免不要的浪费，但针对高于单个方法的级别的优化应该在
    整个项目测试通过、针对最终实际用户的压力测试用例通过之后才能进行。仅仅根
    据静态的代码来判断哪些是影响整个性能最主要的问题的论断往往是错误的。相反
    ，评审整个系统的运行表现，找出真正影响性能的1%的代码，只针对这些代码做优
    化。
  • 最小化未完成的编码任务的工作包（backlog）。当开发人员开发一个设计用例时，
    有的功能会牵涉到所有修改着的但未完全开发完成、充分测试的代码。把未修改完
    成的代码保存到本地数天或数星期，这样增加了工作浪费的风险，会出现返工。想
    象有三个任务，每个估计都要一天。如果三个一起开发，并行起来每个都需要3天，
    这样一累计会有9个’单位’的风险。如果顺序的开发，一个开发完成后再开发另一个
    ，只会有3个‘单位’的风险。这个并不符合我们的直觉。我们的直觉告诉我们，当我
    们在这种情况下时，我们希望三个一起完成。但是软件不像盖房子。小的、迅速的
    、完整的任务不仅仅会降低我们的认知负荷，也减少了进行中的开发对其他人正在
    进行的开发的相互影响。
  • 不要过度功能范化。也就是我们所说的“YAGNI – You Aren’t Going to Need It”
    。程序员在编写一个类时喜欢料想：这个类可能在其它地方其它类中会有其它用途
    用．如果这些用途是被当前的用例用到，那这样思考是没错的，但常常开发人员想
    到的这些用途都是目前不存在的用途，实际上可能是永远不会用到的用途。 (This
    subject always reminds me of the classic Saturday Night Live skit about
    the product which was both a floor wax, and a dessert topping.)
  • 如果两行代码能完成就不要写成三行。简洁的代码永远都会给需要阅读这段代码的
    人带来好处。但千万不要把代码压缩的难以理解了。精简的、书写规范的代码易于
    维护和查找错误，冗长的、太多修饰的代码则相反。尽可能的简化但不要过度。
  • 永远不要按行数多少来评价代码头。编写某个任务所产生的代码行数会因程序员而
    异，因编码风格而异。代码的行数不会提供任何关于程序完成情况和代码质量的信
    息。代码质量可以相差200倍之多，这是计算代码行数的方法不能胜任的。应该计算
    功能性的用例数。
  • 我们应不断的再设计、再分析。应用这一条时你要非常的小心，因为有些代码很脆
    弱、难以维护。但不要害怕修改这些代码、让它符合真正的需求。一个数据成员以
    前是整数型的，但现在有个用例需要它是浮点型，不要害怕去改变它，只要你按步
    骤：测试，写文档，布署。
  • 删除死代码。当发现有一大段不能理解的代码时我们习惯的做法是“让死狗躺在哪”
    。比如说，我们需要往类里添加一个新方法来替换以前的旧方法，通用人们会保留
    老方法‘以防不测’。其实，我们应该花一些功夫去检查看看这个老方法是否还有用
    ，如果没有证据显示它还有用，就该删掉它。更糟糕的错误做法是把这些代码注释
    掉，留下一堆注释码。注释掉的代码一旦发现就该被删掉，不能留到测试时还有、
    甚至提交到代码库。添加代码总是容易的，删除代码总是困难的。因此，一旦发现
    有可能没用的代码，你应该花点时去确认它、删除它，这样会让代码更加可维护。
  • 不要自创新语言。程序员喜欢使用文本文件来实现功能性的趋动，这样可以使程序
    变的可配置。通过配置文件来改变软件行为所产生的后果是不过控的。 XML的诞生
    促使了一系列的特别的自定义的‘脚本语言‘的出现，人们试图通过文件的配置以让
    最终用户‘编程’来控制软件的功能、避免重新编译。这种设计上的缺陷是：软件里
    的各种操作的准确定义在脱离了具体上下文的特定实现的情况下不可能被准确的定
    义。这些各式各样的脚本型语言只是对那些对软件代码的内部工作机理有着相关的
    知识背景的人才会价值。所以，真正的最终用户是不可能知道软件的内部工作机理
    的，不可能推理出这些复杂的指令组合会产生什么样的预期结果。脚本有它的用途
    ，也不应该被抵制，但设计人员必须以非常非常安全的方式使用它们，尽可能使用
    现有的语言，必免使用新发明的语言。
  • 只有当准备好了实现和测试才去确定设计。我应该有一个总体的认识我们要做什么
    ，应该有个总体架构目标，而不是详细设计、详细的具体方法的实现，只有当开发
    迭代到一定程度后、足以让我们定下设计细节后才去把它表现成文档。详细设计只
    应该包括当前需求用例中需要覆盖的部分。软件开发中最大的浪费就是你花时间设
    计出来东西后被告知不需要了，或者是你的设计一开始就建立在错误的假设上。
  • 软件是可塑的。软件不像盖房子，我们可以轻易的改的面目全非。无数事实表明软
    件比它的规格说明书善变的多。而且，软件产品和设计之间的互动明显比规格说明
    书有效率。所以，你应该直接实现你的设计，这样客户就能很容易明白你的设计细
    节。当发现有问题、要改变设计时，修改软件要比修改文档容易的多。更重要的是
    ，当客户看到了能运行的程序后，你也就更能搞清客户的需求是什么了。
  • 对被检测到的和被报告的异常情况请多花一点时间对其进行详细描述。程序员一般
    都非常的懒，抛出异常时只描述错误的表面现象。设想如果只是作者自己会遇到这
    种错误，他会记得这种一直使用的错误描述信息是什么意思。但站在客服技术支持
    的处境，他们因为这种不准确的、不完整的错误描述浪费了大量时间。这些信息应
    该达到让一个刚走进屋里没有任何经验的人能看明白的程度。客户和客服基本都是
    对编程不懂的人。

　　上面这些条目没有特别的顺序。欢迎对这些我汇总的指导原则进行评论，也许你并
不认可其中的几条，也请发表你们意见。

　　【英文出处】：26 Hints for Agile Software Development

 
标签：程序人生敏捷开发   
« 上一篇：最臭的臭弹（Biggest Stinkers）
» 下一篇：差距在哪里，你与开发高手的距离有多远？

