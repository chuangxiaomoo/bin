用GDB调试程序（四）

查看栈信息
—————
       
查看源程序
—————

一、显示源代码

    GDB 可以打印出所调试程序的源代码，当然，在程序编译时一定要加上-g的参数，把
源程序信息编译到执行文件中。不然就看不到源程序了。当程序停下来以后，GDB会报告程
序停在了那个文件的第几行上。你可以用list命令来打印程序的源代码。还是来看一看查
看源代码的GDB命令吧。
   
    list <linenum>
        显示程序第linenum行的周围的源程序。
   
    list <function>
        显示函数名为function的函数的源程序。
       
    list
        显示当前行后面的源程序。
   
    list -
        显示当前行前面的源程序。

一般是打印当前行的上5行和下5行，如果显示函数是是上2行下8行，默认是10行，当然，
你也可以定制显示的范围，使用下面命令可以设置一次显示源程序的行数。

    set listsize <count>
        设置一次显示源代码的行数。
       
    show listsize
        查看当前listsize的设置。
       

list命令还有下面的用法：

    list <first>, <last>
        显示从first行到last行之间的源代码。
   
    list , <last>
        显示从当前行到last行之间的源代码。
       
    list +
        往后显示源代码。
       

一般来说在list后面可以跟以下这们的参数：

    <linenum>   行号。
    <+offset>   当前行号的正偏移量。
    <-offset>   当前行号的负偏移量。
    <filename:linenum>  哪个文件的哪一行。
    <function>  函数名。
    <filename:function> 哪个文件中的哪个函数。
    <*address>  程序运行时的语句在内存中的地址。
   

二、搜索源代码

不仅如此，GDB还提供了源代码搜索的命令：

    forward-search <regexp>
    search <regexp>
        向前面搜索。

    reverse-search <regexp>
        全部搜索。
       
其中，<regexp>就是正则表达式，也主一个字符串的匹配模式，关于正则表达式，我就不
在这里讲了，还请各位查看相关资料。


三、指定源文件的路径

某些时候，用-g编译过后的执行程序中只是包括了源文件的名字，没有路径名。GDB提供了
可以让你指定源文件的路径的命令，以便GDB进行搜索。

    directory <dirname ... >
    dir <dirname ... >
        加一个源文件路径到当前路径的前面。如果你要指定多个路径，UNIX下你可以使
用“:”，Windows下你可以使用“;”。
    directory
        清除所有的自定义的源文件搜索路径信息。
   
    show directories
        显示定义了的源文件搜索路径。
       

四、源代码的内存

你可以使用info line命令来查看源代码在内存中的地址。info line后面可以跟“行号”，“
函数名”，“文件名:行号”，“文件名:函数名”，这个命令会打印出所指定的源码在运行时的
内存地址，如：

        (gdb) info line tst.c:func
        Line 5 of "tst.c" starts at address 0x8048456 <func+6> and ends at
0x804845d <func+13>.

还有一个命令（disassemble）你可以查看源程序的当前执行时的机器码，这个命令会把目
前内存中的指令dump出来。如下面的示例表示查看函数func的汇编代码。

        (gdb) disassemble func
        Dump of assembler code for function func:
        0x8048450 <func>:       push   %ebp
        0x8048451 <func+1>:     mov    %esp,%ebp
        0x8048453 <func+3>:     sub    $0x18,%esp
        0x8048456 <func+6>:     movl   $0x0,0xfffffffc(%ebp)
        0x804845d <func+13>:    movl   $0x1,0xfffffff8(%ebp)
        0x8048464 <func+20>:    mov    0xfffffff8(%ebp),%eax
        0x8048467 <func+23>:    cmp    0x8(%ebp),%eax
        0x804846a <func+26>:    jle    0x8048470 <func+32>
        0x804846c <func+28>:    jmp    0x8048480 <func+48>
        0x804846e <func+30>:    mov    %esi,%esi
        0x8048470 <func+32>:    mov    0xfffffff8(%ebp),%eax
        0x8048473 <func+35>:    add    %eax,0xfffffffc(%ebp)
        0x8048476 <func+38>:    incl   0xfffffff8(%ebp)
        0x8048479 <func+41>:    jmp    0x8048464 <func+20>
        0x804847b <func+43>:    nop
        0x804847c <func+44>:    lea    0x0(%esi,1),%esi
        0x8048480 <func+48>:    mov    0xfffffffc(%ebp),%edx
        0x8048483 <func+51>:    mov    %edx,%eax
        0x8048485 <func+53>:    jmp    0x8048487 <func+55>
        0x8048487 <func+55>:    mov    %ebp,%esp
        0x8048489 <func+57>:    pop    %ebp
        0x804848a <func+58>:    ret
        End of assembler dump.

 

                                                             <-上一页  下一页->

（版权所有，转载时请注明作者和出处）

上一篇：用GDB调试程序（五）
下一篇：用GDB调试程序（七）

http://blog.csdn.net/haoel/article/details/2882
