# ./configure --build --host --target

--build=`set | awk  -F'=' '/MACHTYPE/{print $2}'`   # PC  执行
--host=`set | awk  -F'=' '/MACHTYPE/{print $2}'`    # 设备执行，host !=build 是交叉编译
--target=                                           # 一般与--host一样

1 通过--host 来猜测交叉编译器
2 --host --build 都以 `linux-gnu` 结尾，否则不被识别
  MACHTYPE=mips-unknown-linux-gnu
  MACHTYPE=i686-pc-linux-gnu
3 可以通过 `ln -sf mips-linux-uclibc-gnu-gcc mips-linux-gnu-gcc` 来使gcc命名规范

# 最简单的 cross_compile

    Usage: $0 [OPTION]... [VAR=VALUE]...
    CC=arm-linux-gcc ./configure --host=arm-linux
    一般来说，指定--host就可以了，CC会自动查找

# 如果没有 configure 如 libln.so

    make CC=arm-linux-gcc AR=arm-linux-ar
    .so 是由 gcc 链接的，但 .a 不是，所以需要同时指定 ar

# iperf 2.0.9

./configure --host=arm-buildroot-linux-uclibcgnueabihf
./configure --host=arm-buildroot-linux-uclibcgnueabi    # nvr.4

# e2fsprogs

LDFLAGS="-Wl,-gc-sections" CFLAGS="-g -O2 -ffunction-sections -fdata-sections" CC=arm-buildroot-linux-uclibcgnueabi-gcc ./configure --host=arm-linux

# parted

CC=arm-buildroot-linux-uclibcgnueabi-gcc ./configure --host=arm-linux --disable-device-mapper --without-readline

LDFLAGS="-Wl,-gc-sections" CFLAGS="-g -O2 -ffunction-sections -fdata-sections" CC=arm-buildroot-linux-uclibcgnueabi-gcc ./configure --host=arm-linux --disable-device-mapper --without-readline --enable-shared=no --disable-nls --enable-pc98=no --enable-debug=no

du -sk parted/parted
arm-buildroot-linux-uclibcgnueabi-strip parted/parted

# libnl

./configure --help
CC=arm-linux-gnueabihf-gcc ./configure --host=arm-linux-gnueabihf --prefix=/opt/mstar/313msPro/316v2apPro/drv/iw.nl1
make
make install

**如果生成 .a 给 wpa_supplicant 使用时链不过，多半是 AR的问题**

# lsof

[lsof-cross-compile](http://blog.csdn.net/orz415678659/article/details/9427385)
LSOF_CC=mips-linux-uclibc-gnu-gcc LSOF_HOST=mips-linux ./Configure  -n linux

# dosfstools

[](https://fossies.org/linux/misc/)
./configure --host=arm-buildroot-linux-uclibcgnueabihf

# libiconv

./configure --host=arm-buildroot-linux-uclibcgnueabihf

# curl

./configure --host=mips-linux CC=mips-linux-uclibc-gnu-gcc LD=mips-linux-uclibc-gnu-ld AR=mips-linux-uclibc-gnu-ar

# libiconv mips-uclibc

./configure --host=mips-linux --enable-static CC=mips-linux-uclibc-gnu-gcc LD=mips-linux-uclibc-gnu-ld AR=mips-linux-uclibc-gnu-ar RANLIB=mips-linux-uclibc-gnu-ranlib NM=mips-linux-uclibc-gnu-nm OBJDUMP=mips-linux-uclibc-gnu-objdump

./configure --host=mips-linux-gnu
xgrep 'mips-linux-gnu' | awk -F: '{print $1}' | sort -u
xgrep 'mips-linux-gnu' | awk -F: '{print $1}' | sort -u | xargs -I{} sed -i 's/mips-linux-gnu-/mips-linux-uclibc-gnu-/g' {} 
xgrep 'mips-linux-gnu' | awk -F: '{print $1}' | sort -u | xargs -I{} sed -i 's#mips-linux-gnu/bin/ld#bin/mips-linux-uclibc-gnu-ld#g' {} 
xgrep 'mips-linux-gnu' | awk -F: '{print $1}' | sort -u | xargs -I{} sed -i '/host_alias/s#mips-linux-gnu#mips-linux-uclibc-gnu#g' {} 

# 最小 ksh cross_compile

CC=arm-buildroot-linux-uclibcgnueabi-gcc ./configure \
    --host=arm-linux --disable-emacs --enable-posixly-correct

**使用vi解决历史搜索&命令补全**
0 `history文件 $HOME/.sh_history 即被视为一个文件`
1 history 上下翻页 
2 history 搜索
3 命令补全
4 文件补全

**Bug: [sleep 1&]**
[patch](https://github.com/pld-linux/pdksh/blob/master/pdksh-debian.patch)

# netcat 

# strace

./configure --host=mips-linux-gnu CC=mips-linux-uclibc-gnu-gcc
[strace-4.6](http://www.cnblogs.com/wlzxlc/archive/2012/11/20/2779886.html)

# gdb

CFLAGS=-static    \

./configure       \
--host=mips-linux-gnu       \
--build=`set | awk  -F'=' '/MACHTYPE/{print $2}'` \
CC=mips-linux-uclibc-gnu-gcc  \
AR=mips-linux-uclibc-gnu-ar   \
AR=mips-linux-uclibc-gnu-ar   \
AS=mips-linux-uclibc-gnu-as   \
LD=mips-linux-uclibc-gnu-ld   \
NM=mips-linux-uclibc-gnu-nm   \
STRIP=mips-linux-uclibc-gnu-nm-strip \
--libdir=/winc/Export/so2/termcap-1.3.1 \
--includedir=/winc/Export/so2/termcap-1.3.1 \
--without-x --disable-gdbtk --disable-tui --without-included-regex --without-included-gettext --disable-option-checking 

# gdb 依赖

编译termcap-1.3.1   `apt-get install texinfo`
./bfd/Makefile 去掉 `-Werror`
Makefile:370        `CFLAGS = -g -O2 -I/opt/src/Tools/termcap-1.3.1 -L/opt/src/Tools/termcap-1.3.1`

# gdb multi-threaded
**unable to find libthread_db matching inferior's thread library**
[](https://stackoverflow.com/questions/11585472/unable-to-debug-multi-threaded-application-with-gdb)
[](https://groups.google.com/forum/#!topic/beagleboard/X1qnTEGxL7o)
如果要调试线程，不要构建 static 原生 gdb 


# ntfs-3g

CFLAGS="-ffunction-sections -fdata-sections" \
LDFLAGS="-ldl -Wl,-gc-sections" \
./configure       \
--host=arm-linux-gnu       \
--build=`set | awk  -F'=' '/MACHTYPE/{print $2}'` \
CC=arm-buildroot-linux-uclibcgnueabi-gcc  \
AR=arm-buildroot-linux-uclibcgnueabi-ar   \
AR=arm-buildroot-linux-uclibcgnueabi-ar   \
AS=arm-buildroot-linux-uclibcgnueabi-as   \
LD=arm-buildroot-linux-uclibcgnueabi-ld   \
NM=arm-buildroot-linux-uclibcgnueabi-nm   \
STRIP=arm-buildroot-linux-uclibcgnueabi-nm-strip \
--enable-really-static  \
--disable-library \
--with-gnu-ld

*src/Makefile*
CFLAGS  += -ffunction-sections -fdata-sections
LDFLAGS += -ldl -Wl,-gc-sections

自己修改加 CFLAGS LDFLAGS -ldl 比 CFLAGS LDFLAGS --with-gnu-ld ./configure 要更少的空间

