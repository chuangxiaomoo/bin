/* 断言 */

三、布尔值检查

Fatal assertion          Nonfatal assertion       Verifies
ASSERT_TRUE(condition);  EXPECT_TRUE(condition);  condition is true
ASSERT_FALSE(condition); EXPECT_FALSE(condition); condition is false

四、数值型数据检查

Fatal assertion              Nonfatal assertion           Verifies
ASSERT_EQ(expected, actual); EXPECT_EQ(expected, actual); expected == actual
ASSERT_NE(val1, val2);       EXPECT_NE(val1, val2);       val1 != val2
ASSERT_LT(val1, val2);       EXPECT_LT(val1, val2);       val1 < val2
ASSERT_LE(val1, val2);       EXPECT_LE(val1, val2);       val1 <= val2
ASSERT_GT(val1, val2);       EXPECT_GT(val1, val2);       val1 > val2
ASSERT_GE(val1, val2);       EXPECT_GE(val1, val2);       val1 >= val2

五、字符串检查

Fatal assertion         Nonfatal assertion      Verifies
ASSERT_STREQ(           EXPECT_STREQ(           the two C strings have the
expected_str,           expected_str,           same content
actual_str);            actual_str);
ASSERT_STRNE(str1, str2 EXPECT_STRNE(str1, str2 the two C strings have
);                      );                      different content
ASSERT_STRCASEEQ(       EXPECT_STRCASEEQ(       the two C strings have the
expected_str,           expected_str,           same content, ignoring case
actual_str);            actual_str);
ASSERT_STRCASENE(str1,  EXPECT_STRCASENE(str1,  the two C strings have
str2);                  str2);                  different content, ignoring case
 

*STREQ*和*STRNE*同时支持char*和wchar_t*类型的，*STRCASEEQ*和*STRCASENE*却只接收
char*，估计是不常用吧。

六、显示返回成功或失败

直接返回成功：  SUCCEED();
Fatal assertion Nonfatal assertion
FAIL();         ADD_FAILURE();

七、异常检查
Fatal assertion          Nonfatal assertion       Verifies
ASSERT_THROW(statement,  EXPECT_THROW(statement,  statement throws an exception
exception_type);         exception_type);         of the given type
ASSERT_ANY_THROW(        EXPECT_ANY_THROW(        statement throws an exception
statement);              statement);              of any type
ASSERT_NO_THROW(         EXPECT_NO_THROW(         statement doesn't throw any
statement);              statement);              exception

八、Predicate Assertions

在使用EXPECT_TRUE或ASSERT_TRUE时，有时希望能够输出更加详细的信息，比如检查一个
函数的返回值TRUE还是FALSE时，希望能够输出传入的参数是什么，以便失败后好跟踪。因
此提供了如下的断言：

Fatal assertion            Nonfatal assertion         Verifies
ASSERT_PRED1(pred1, val1); EXPECT_PRED1(pred1, val1); pred1(val1) returns true
ASSERT_PRED2(pred2, val1,  EXPECT_PRED2(pred2, val1,  pred2(val1, val2) returns
val2);                     val2);                     true
...                        ...                        ...

 

Google人说了，他们只提供<=5个参数的，如果需要测试更多的参数，直接告诉他们。下面
看看这个东西怎么用。

bool MutuallyPrime(int m, int n)
{
    return Foo(m , n) > 1;
}

TEST(PredicateAssertionTest, Demo)
{
    int m = 5, n = 6;
    EXPECT_PRED2(MutuallyPrime, m, n);
}

 

当失败时，返回错误信息：

error: MutuallyPrime(m, n) evaluates to false, where
m evaluates to 5
n evaluates to 6

如果对这样的输出不满意的话，还可以自定义输出格式，通过如下：

Fatal assertion             Nonfatal assertion          Verifies
ASSERT_PRED_FORMAT1(        EXPECT_PRED_FORMAT1(        pred_format1(val1) is
pred_format1, val1);`       pred_format1, val1);        successful
ASSERT_PRED_FORMAT2(        EXPECT_PRED_FORMAT2(        pred_format2(val1,
pred_format2, val1, val2);  pred_format2, val1, val2);  val2) is successful
...                         ...

 

用法示例：

testing::AssertionResult AssertFoo(const char* m_expr, const char* n_expr, 
const char* k_expr, int m, int n, int k) {
    if (Foo(m, n) == k)
        return testing::AssertionSuccess();
    testing::Message msg;
    msg << m_expr << " 和 " << n_expr << " 的最大公约数应该是：" << Foo(m, n) 
<< " 而不是：" << k_expr;
    return testing::AssertionFailure(msg);
}

TEST(AssertFooTest, HandleFail)
{
    EXPECT_PRED_FORMAT3(AssertFoo, 3, 6, 2);
}

失败时，输出信息：

error: 3 和 6 的最大公约数应该是：3 而不是：2

是不是更温馨呢，呵呵。

九、浮点型检查


Fatal assertion           Nonfatal assertion        Verifies
ASSERT_FLOAT_EQ(expected, EXPECT_FLOAT_EQ(expected, the two float values are
actual);                  actual);                  almost equal
ASSERT_DOUBLE_EQ(         EXPECT_DOUBLE_EQ(         the two double values are
expected, actual);        expected, actual);        almost equal

 

对相近的两个数比较：

Fatal assertion    Nonfatal assertion Verifies
ASSERT_NEAR(val1,  EXPECT_NEAR(val1,  the difference between val1 and val2
val2, abs_error);  val2, abs_error);  doesn't exceed the given absolute error

同时，还可以使用：

EXPECT_PRED_FORMAT2(testing::FloatLE, val1, val2);
EXPECT_PRED_FORMAT2(testing::DoubleLE, val1, val2);

 

十、Windows HRESULT assertions


Fatal assertion                                   Nonfatal assertion                                Verifies
ASSERT_HRESULT_SUCCEEDED(expression);             EXPECT_HRESULT_SUCCEEDED(expression);             expression is a success HRESULT
ASSERT_HRESULT_FAILED(expression);                EXPECT_HRESULT_FAILED(expression);                expression is a failure HRESULT

 

例如：

CComPtr shell;
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L"Shell.Application"));
CComVariant empty;
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR
(url), empty, empty, empty, empty));

 

十一、类型检查

类型检查失败时，直接导致代码编不过，难得用处就在这？看下面的例子：

template <typename T> class FooType {
public:
    void Bar() { testing::StaticAssertTypeEq<int, T>(); }
};

TEST(TypeAssertionTest, Demo)
{
    FooType<bool> fooType;
    fooType.Bar();
}

十二、总结

 本篇将常用的断言都介绍了一遍，内容比较多，有些还是很有用的。要真的到写案例的时
候，也行只是一两种是最常用的，现在时知道有这么多种选择，以后才方便查询。
