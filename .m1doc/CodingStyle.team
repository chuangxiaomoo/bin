# style

      第零章：前言

  普通程序猿写代码仅机器看的懂，优秀程序员写的代码人和机器都能看懂。

  普通的代码只写一次，供自己阅读。优秀的代码被程序员仔细雕琢，传阅万次。

  在这里，我挑选Linux内核编码规范中认为最重要的几条与大家分享，希望我们的产品成功。


      第一章：缩进

  与内核CodingStyle不同的是，我们使用4空格的缩进（沿用365的规范）。


      第二章：把长的行和字符串打散

  代码风格的意义就在于使用平常使用的工具来维持代码的可读性和可维护性。

  每一行的长度的限制是80列，如果超过80列，请检查你的设计，是否产生了冗余代码？
  是否可以优化？


      第三章：Typedef

  项目中使用C/C++两种语言，建议对外出口的结构体用typedef重命名，与C++类名一样，
  首字母大写。


      第四章：注释

  自注释、文件注释、块注释优先级依次递减，尽量不要大量的语句注释。
  不要出现魔鬼数字，使用宏及枚举来代替。

      第五章：圈复杂度（CCN）

  代码规范的目的，是让阅读更加简单。而圈复杂度是一个很好的衡量标准。

  1个方法的CCN值通常意味着我们需要多少个案例来覆盖其不同的路径。

  代码质量-圈复杂度及其计算
  http://wobfei.iteye.com/blog/706875

  软件度量中的圈复杂度小结
  http://blog.csdn.net/yefengnidie/article/details/7218993


  > ----------------------------------------------------------------------- 

      第六章：大括号和空格的放置

  C语言风格中另外一个常见问题是大括号的放置。和缩进大小不同，选择或弃用某种放置策
  略并没有多少技术上的原因，不过首选的方式，就像Kernighan和Ritchie展示给我们的，是
  把起始大括号放在行尾，而把结束大括号放在行首，所以：

    if (x is true) {
      we do y
    }

  这样做的好处有：代码更加紧凑，留出更多的空行来隔开块，从而在逻辑上更加清晰。

  > ----------------------------------------------------------------------- 


