# upgrade

# --------------------  网页  -----------------------------------------
 

  * 需要重启的功能（出厂默认、升级、重启设备），所有操作都必须有警告
 
  * 设备启动需要45s（20sys + 25app），还有5秒钟供reboot命令，下列3个操作都需要50s的进度条。
 
    1. 升级
    2. 设备重启
    3. 恢复出厂默认
 
  * 升级
 
  1. 点击升级按钮后，所有按钮均禁用（也不可离开当前页面），否则会中断本次文件传输

  2. 升级包格式错，重启服务进度，25秒钟
  3. 升级成功后，重启服务进度，50秒钟
  4. 升级失败后，重启服务进度，50秒钟

  5. 升级前对升级状态进行检查，若是正在升级，升级按钮需要禁用

# --------------------  分区  -----------------------------------------

  mtd分区 -》FS -》升级包上传 -》解压 -》升级

  FLASH的速度：0.1m/s，内存的速度：0.4m/s

# up
        L1
        u-boot
        u-para
        kernel
        squash  FS
        UBI1    APP
        UBI2    conf
        UBI2    log

  1. 统一入口，根据文件是否存在进行升级
  2. 记录RELEASE信息，在入口中判断是否可以直接升级
  3. 复杂了【考虑一个新增列表，一个del列表，并附以md5值，比对增量升级】
  4. 保持一致性，最后使用链接一次性处理


# --------------------  方案  -----------------------------------------

1. 升级需求

    2. 支持设备开机自动升级（在上层升级应用程序不能正常运行时启动）。

    1. 支持通过web对设备进行升级。
    3. 升级过程有正确的进度条显示。
    4. 升级有详细日志。
    5. 升级有详细的历史版本迁移记录
    6. 支持部分升级。
    7. 升级失败时在网页进行提示，并提供升级日志下载。

    P.S. 
        1. 尽量缩短系统升级时间。
        2. 尽量简约

2. 软硬件环境    

    1. 256M 内存
    2. 128M FLASH 
    3. 按368升级方案，至少两次写FLASH（a. 文件传输 b. 解压升级包.做md5用）
    4. 368文件系统分布（bin+sbin 5M, lib 14M, apps 55M）

            304     sbin
            324     etc
            3876    bin
            5084    lib
            9636    usr
            54688   app(
                        extdrv  9M 
                        web_nu  4M 
                        osdfont 13M 
                        jco_xx  25M)

    5. 升级文件的分类
        块镜像文件  （基础升级）
        普通文件    （增量升级）
        配置文件    （动态修改及升级继承）


3. 技术点

    0. 软链接可跨文件系统，硬链接不可跨文件系统

    1. 增量文件文件夹归整
        jco_xxx一类文件为整体，统一放置文件夹，解压后mv，节约出2次cp的时间
    2. 增量文件升级在一个文件系统内，只4类文件（bin lib .ko /etc）
    3. 增量文件不在一个文件系统时 (ln -sf 解决)
    4. /etc/文件（唯一的cp处理文件）
    5. 配置文件迁移(好的方案？)

4. 升级失败的rollback() 

    1. 什么时候会失败(经过测试的包)？
        a. md5sum
        b. 断电 (开机检查升级的两个阶段
                解包校验未完成，清理
                解包校验已完成：再做一次ln -sf 或 mv)

    2. 不再是边解边覆盖，而是
        一次解压
        一次链接的形式，
        从此不再需要 rollback。

5. 进度


    需要conf_get_upgrade_progressbar()
    需要conf_set_upgrade_progressbar()的二进制封装。

    function fn_main() {
        start=5
        now=11
        circl=100
        let 'abc=100*(now-start)/circl'
        echo ${abc}
    }
    fn_main

4. 方案

    1. 去掉jco_xxx的备份(chmod -w jco_xxx 或
            以只读文件系统加载到内存执行, cp耗时15s)。
    2. 文件传输、md5校验都在内存中做
    3. 保存两份flash文件，在校验之前。


阶段：


1. 传输                 -- 兼容原来的两种传输方式
    超大文件传输        -- /proc/memeinfo
    小文件传输

2.1. 升级               -- 两步走：a. 解包md5. b.  ln
2.2. 进度
2.2. 日志 

3.1 迁移记录            -- /etc/RELEASE
3.2 结果

4.  日志下载

