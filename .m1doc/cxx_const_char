/* c_const_
 * cxx_const_char
 * c++ 的检查更为严格
 **/

    每个程序员都应该是追求完美的，但并不是去贴近标准，因为要记住：
    “标准也是在妥协下的产物，标准上允许的不一定是正确的。”

    一切向标准看齐，就是让自己不完美。
    要比标准更严格的要求自己。做一个严格的程序员，低容忍是减少错误的最佳方法。

   ┌────────────────────────────────────────────────────────────────────┐
   │ const char*, char const*, char*const的区别                         │
   │                                                                    │
   │  事实上这个概念谁都有,只是三种声明方式非常相似很容易记混。         │
   │  Bjarne在他的The C++ Programming Language里面给出过一个助记的方法：│
   │  把一个声明从右向左读。                                            │
   │                                                                    │
   │  char * const cp; // ( * 读成 pointer to )                         │
   │  cp is a const pointer to char                                     │
   │                                                                    │
   │  const char * p;                                                   │
   │  p is a pointer to const char;                                     │
   │                                                                    │
   │  char const * p;                                                   │
   │ 同上因为C++里面没有const*的运算符，所以const只能属于前面的类型。   │
   └────────────────────────────────────────────────────────────────────┘

问题1：
    char *abc = "ohMyGod";      // abc[0] = '1'; 会SIGSEGV，但C中没有warning
    char *argv_opt_long[] = {"argv0" ,"--option", "3"};
    warning: deprecated conversion from string constant to ‘char*’

    为什么呢？原来char *背后的含义是：给我个字符串，我要修改它。
    "请使用字符数组，或malloc()返回的地址"

解决方案：
    const char *, 给我个字符串，我只要读取它。
    "请使用"

    char argv_opt_long[][100] = {"argv0" ,"--option", "3"};     // 初始化数组
    const char *argv_opt_long[] = {"argv0" ,"--option", "3"};   // 只读字符串

举一反三：
    void someFunc(char *someStr);
    someFunc("I'm a string!");       // 函数调用与赋值是一样的结果

    很自然的延伸一下。 如果我既要传字面常量又要传字符串变量怎么办呢？......重载


问题2：

    int getopt_long(int argc, char * const argv[], ...); // char* const* argv

    int test_getopt_long(int argc, const char * argv[])
    {
       int c = getopt_long(argc, argv, "ho:r", long_options, &option_index);
    }
    error: invalid conversion from ‘const char**’ to ‘char* const*’

    const char**  -> point to const char*                       //
    char* const*  -> point to       char*, with qualifier const // 指针变量不能改

解决方案：
    const char * argv_opt_long[] = {"argv0" , "--option", "3"};
    int c = getopt_long(argc, (char **)argv, "ho:r", long_options, &option_index);

