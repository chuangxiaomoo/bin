# aout

[a.out目标文件格式](http://wenku.baidu.com/)

语言编译器gcc和汇编器gas编译生成的a.out格式的目标模块文件或链接生成的可执行文件含有7个部分：

a) 执行头部分(exec header)。执行文件头部分。该部分中含有一些参数（exec结构），是有关目标 文件的整体结构信息。例如代码和数据部分的长度、未初始化数据区的长度、对应源程序文件名以及目标文件创建时间等。内核使用这些参数把执行文件加载到内存中并执行，而链接程序（ld）使用这些参数将一些模块文件组合成一个可执行文件。这是目标文件唯一必要的组成部分。 
b) 代码段部分(text segment)。由编译器或汇编器生成的二进制指令代码和数据信息，含有程序执 行时被加载到内存中的指令代码和相关数据。可以以只读形式被加载。
c) 数据段部分(data segment)。由编译器或汇编器生成的二进制指令代码和数据信息，这部分含有 已经初始化过的数据，总是被加载到可读写的内存中。
d) 代码重定位部分(text relocations)。这部分含有供链接程序使用的记录数据。在组合目标模块 文件时用于定位代码段中的指针或地址。当链接程序需要改变目标代码的地址时就需要修正和维护这些地方。
e) 数据重定位部分(data relocations)。类似于代码重定位部分的作用，但是用于数据段中指针的重定位。
f) 符号表部分(simbol table)。这部分同样含有供链接程序使用的记录数据。这些记录数据保存着 模块文件中定义的全局符号以及需要从其他模块文件中输入的符号，或者是由链接器定义的符号，用于在模块文件之间对命名的变量和函数（符号）进行交叉引用。
g) 字符串表部分(string table)。该部分含有与符号名相对应的字符串。用于调试程序调试目标代 码，与链接过程无关。这些信息可包含源程序代码和行号、局部符号以及数据结构描述信息等。

# 运行时生成的段

[C语言中内存分布及程序运行中(BSS段、数据段、代码段、堆栈）](
http://my.oschina.net/pollybl1255/blog/140323/
)

堆（heap） ：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc/free等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）/释放的内存从堆中被剔除（堆被缩减）

栈(stack) ：栈又称堆栈， 存放程序的 局部变量 （但不包括static声明的变量， static 意味着 在数据段中 存放变量）。除此以外，在函数被调用时，栈用来传递参数和返回值。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。储动态内存分配,需要程序员手工分配,手工释放

# 一本手

[程序员自我修养](http://blog.chinaunix.net/uid-27018250-id-3867588.html)
