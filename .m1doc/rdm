# RULE

## 项目管理

  记得添加项目成员，这样才能可见。
  项目管理 `->` 计划管理 `->` 双击

## 规则的哲学思考

  是什么驱动全球投资者，加入到金融市场这个大游戏中来？ -- 逐利

  是否可以以研发的K线系统指标来评估当前研发能力、紧张度及走势。 -- RDM指标

  Dota、魔兽、征途，是怎样的游戏规则，可以让不同民族、不同富贵、不同智商的人
  在一个大社区里玩。（自组织、自演化）

## 考核的艺术

  * 同税收，官山海（抓大放小，使民无怨）
  * 理性人考虑边际效应（先做跟随，而不是引领）

## RDM

  **管理混乱在于方法论的缺失**
  **没有RDM，如何“如身使臂，如臂使指”。**
  **工时考评为基础，如同和尚分粥，欧洲治理莱茵河，去中心化**

### RDM任务驱动

  不以日志为驱动，而以任务及工时为驱动。关注任务的四个要素

  分解 `->` "评估" `->` 工期调整 `->` 实施 `->` 风险跟踪 `->` 结束任务 `->` 交付

  目标
  工期(附带实际工作量)
  资源
  验收标准 (功能性测试用例 非功能性测试用例)
  > ip冲突在设备上验证，而不只是在PC上验证。

### RDM运行的实践基础

  * 对中层领导的信任

  * 公平，系统客观量化，去除主观评价
        员工能力达到RDM可以进行量化的水平。如果没有达到，则给予培训。
        当大家的水平在一个基点上，但可产生竞争，团队间产生竞争。进行量化得越来越准。
        如yins自已进行测试。

  * 能力靠级

### 导向(以结果为导向，有成本意识，基础是发挥个人的自由意志)

  * 提高领导层的计划意识
  * 回收开发人员的自已下达任务的权力
  * 加强开发人员与中层领导的沟通（结果导向的实践是：上下目标对齐）

### 事务分类

  * 开发及沟通
  * 会议(周计划任务)      -- 一周一下达，一审核
  * 维护支持(周计划任务)

  * 长短期计划并存
  * 基础开发（作为长期计划，让盘子转起来，不要停，也不能停）

  2014-03-03会议作为开发的一个环节，每天进行早立会，不需要单独给其写出时间来。
  把不可计划的任务分解，使之无需要计划。

  失败的逻辑：Loser只做了能做的，而没做应该做的。

### 架构

  架构师      (Arch)
  系统分析师  (Interface or API)
  开发工程师  (Software)


### 实施细节

  回收员工`一键通`的权力：由上司派发，保证上下对齐。

  鞭子：下属必须保证每周40小时的工时。（由民间驱动政府的力量从此升起）任务最好不要跨月。

  任务的细分：一个任务必须先分解，最大时长不超16小时，若超过，则先进行分解。

  考核配额：数据指标成正态分布。老板说：“我把鞭子给你了，你自已一定要把它用好”。

### 推行中的阻力

  * 部门互评时，官官相护。部门经理评下属时，没有高低。因此，必是要进行配额才是：相对比例。


### 计划的硬伤

  答王总：预期的结果与验收标准不统一。开发工程师对验收标准模糊，但SE、架构师必须清楚？

#### 人员分配不在一个层面上

  ptz2.0 Merge
  升级进度 boa
  web2.0 开发

  这3个任务都需要 yins 参与，其工作饱和度非常之高。
  zhangj cheby 的工作不得不做了一半而流产，用张冬的话，IO成本非常之高，效率低下。


#### 估算时间

  [来自驾校的神问题及神回答](problem_ask_question)
  luo问tang: 总共还要多少时间？（而不是，整个任务的分解及安排）。

  [程序员的时间换算表](http://www.ituring.com.cn/article/8290)


  时间估算是困难的。每一个程序员都有一个现实的估计区间。低于这个区间的估计意味
  着（构建、测试、检查代码的）时间开销被低估了。超过这个区间的估计意味着这个任
  务太大而很难预估。

  对于初级开发者来说，这个区间甚至都不存在。他们忽略（构建、测试、检查代码）的
  时间开销，同时困难的任务他们却又无法预估。

  对于一个有经验的开发者，应该在0.5至24小时将事情做完。超过24小时，就需要细分
  。这项工作应该在开发者的头脑中完成，然后总和到60小时。但是即使是有经验的开发
  者也需要利用管理时间块来思考。

  同样重要的是要明白：编程经验不等同于估算经验。一个不被包含在估算流程中的开发
  者将不会擅长估算。同样，如果实际的时间花费不被测量和用于与估算比较，那么将没
  有反馈来学习。

  最后，每个程序员都应该具备估算的技能。为磨练这个技能，接手每个任务时，

  先决定你要做什么（what）、做成什么样（验收标准）、怎么做（how）？

  然后在开始之前估算任务所需时间，最后测量实际花费时间，并与估算相比较。同样比
  较你实际完成的与计划完成的。这样你将会既提高你对一个任务包含细节的理解，同样
  也提高了你的估算技能。

#### 估算总结

  只见树木，不见树木：
      忽略（构建、测试、检查代码）的时间、忽略可规模化来节省的时间。

  导向问题：
      一个无法完全量化的事一定要用量化来做，没有区别对待可能的困难及风险。
      关键：团队的高效在信息的共享，你正在踩的，是别人曾经踩过的坑（佛是过来人）。

  统筹：
      yins一人成为整个团队的瓶颈，cheby的`ptz20 Merge`未能如期交付。
      与其它部门的协作未能按接口来编程，最后的单件连接耗时过多。
      看看丰田的0仓储计划。
      依合作过的任务形成一个信用评级，并依此来响应之。

