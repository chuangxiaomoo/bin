/* time engine */

. 设计模式

    如同(酒楼迎宾 + 自助)的运转机制:

    迎宾组招揽顾客到酒楼里(register)，及欢送顾客(unregister)，
    招待组接过迎宾组的顾客，循环服务所有的顾客。

    生产者消费者模式: 
        producer:
            register_time_call_func -> jco_queue_push(fTimeCallReq)
        customer:
            JTimeCallService -> jco_queue_pop_unblock(fTimeCallReq);
    

. 找入口，找循环，每个函数只要添加一次，就不再需要我们管了

    // Live555中的自助入口 func() dofunc(void *session)是带参数的那个
    // 因为其要以delayTask在class构造函数中开始。

    每0.2s检测一次是否有客人到来，或是离开。
    循环在这里 (private 的成员函数)
    
    int init_time_call_engine(void);  // (内部服务先行，还没开门前，内部就要准备好)

            JTimeCallService::JTimeCallService
                             │
                             │ delayTask(intervalFuncHandler, this)
                             │                                     ┌─>────────────┐
                             v                                     │              │
      ┌─> JTimeCallService::intervalFuncHandler() -> doIntervalFuncHandler()──┐   │
      └───────────────────────────────────────────────────────────────────────┘   │
                                                                                  │
                addTimeCall(delayTask直接返回了) <────────────────────────────────┘
                    |
                    v
      ┌─> JTimeCall::timeCallFuncHandler() -> JTimeCall::doTimeCallFuncHandler()──┐
      └───────────────────────────────────────────────────────────────────────────┘
                                │
                                │
                                v
                        /* 完全的自助服务 */


. add remove

    int register_time_call_func(char *desc, int , JTimeCallFunc func, void *data)
    void unregister_time_call_func(JTimeCallFunc func)

    "每次都要创建一个JTimeCall实例，并推送到队列"
    addTimeCallReq() -> new JTimeCall(desc, timeinterval, func, data, 0);



. 看class的定义

    // BODY, show me the data struct. C++也同样如此, 先看数据，而不是方法。

    注意 public & private

    class JTimeCallService
    {
        public:
            JTimeCallService(TaskScheduler *schedule);
            ~JTimeCallService();

            static void  intervalFuncHandler(void *instance);
            void doIntervalFuncHandler();

        public:
            // 被register_time_call_func()调用，把函数指针加入到队列。
            int addTimeCallReq(char *desc, int timeinterval, 
                                JTimeCallFunc func, void *data);
            int removeTimeCallReq(JTimeCallFunc func);

        private:
            // 将函数指针加入到队列中
            int hasTimeCall(JTimeCall *timecall);
            int addTimeCall(JTimeCall *timecall);
            int removeTimeCall(JTimeCall *timecall);
            void clearAllTimeCall();

        private:
            TaskScheduler*          fTaskScheduler;

            enum
            {
                kIntervalTaskTimeIntervals = 200*1000
            };
            void*                   fIntervalTask;
            HashTable*              fTimeCallTable;
            queue_t *               fTimeCallReq;
    };

