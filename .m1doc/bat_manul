::
:: for 的 开关/F 是最强大的，详情参见下面链接
::
(1) http://baike.baidu.com/view/18756.htm


(2) vim设置

    将输出重定向到quickfix

    autocmd BufEnter,BufRead *.bat setlocal makeprg=\ %
    autocmd BufEnter,BufRead *.cmd setlocal makeprg=\ %

(3) 与bash比对

    item        bash        bat
    :: ---------- binutils  -----------
                cat         type 
                clear       cls
                grep        find
    :: ---------- builtin var  --------
                $PWD        %CD% 
    :: --------------------------------
    注释        #           rem :: ;
    文件调用    .           call        :: 直接调用批处理文件，相当于bash的exec
    回显信息    set +x      echo off 
                            @           :: 与echo off相象，只能影响当前行
    等待输入    read        pause       :: read -p "Enter to continue..."
    提示输入    read var -p set /p var=
    argv[0]     $0          %0          :: 命令本身 %[1-9] 表示第1-9个参数
                $?          %ERRORLEVEL%:: [ $? -eq 0 ] && echo succ 
                                        :: if ERRORLEVEL 0 @echo succ
(4) 变量 AND SET
    ::
    :: basic
    ::
    定义判断的功能是判断变量是否存在，即是否已被定义。其命令格式为：
    IF [not] DEFINED variable command1 [else command2]

    存在判断举例：

    ===============================================
    @echo off
    set var=111
    if defined var (echo var=%var%) else echo var尚未定义！
    set var=
    if defined var (echo var=%var%) else echo var尚未定义！
    pause>nul
    ===============================================

    对比可知，"set var="可以取消变量，收回变量所占据的内存空间。

    :: 相当于bash-> ()
    SET /A expression

    :: 相当于bash-> read variable -p promptString
    SET /P variable=[promptString]

    ::
    :: extend
    ::
    %windir% 变量
    %%windir%% 二次变量引用. 
        

    内置的特殊符号

    (1) 列表
        con nul aux \ / | || && ^ > < * 

    (2) 转义 
        要么你使用^作为前导字符表示.或者就只有使用双引号""
        set varname=new^&name 
        set varname="new&name" 

(5) 常用命令

    @echo off
    echo > help.txt
    for %%c in (echo cmd set rem if goto for 
        shift call type find findstr copy) do (
        echo help %%c  >> help.txt 
        help %%c >> help.txt
    )

    :: Output black line
    echo.

    :: Display TIME, whithout a <CR>
    ECHO.|TIME

(6) 流程控制 IF :: 详见help if
    IF [NOT] ERRORLEVEL number command  :: 
    IF [NOT] string1==string2 command
    IF [NOT] EXIST filename command     :: NOT相当于bash的!
    IF [/I] string1 compare-op string2 command  :: /I  不分大小写比较
    IF CMDEXTVERSION number command
    IF DEFINED variable command

    其中，比较运算符command-op可以是:

        EQU - 等于
        NEQ - 不等于
        LSS - 小于
        LEQ - 小于或等于
        GTR - 大于
        GEQ - 大于或等于

    ELSE 子句必须在 IF 之后出现在同一行上。例如:
        IF EXIST filename. (
            del filename.
        ) ELSE (
            echo filename. missing.
        )
    如果都放在同一行上，以下子句有效:
        IF EXIST filename. (del filename.) ELSE echo filename. missing

(7) 流程控制 FOR
    FOR %%variable IN (set) DO command [command-parameters]
    for %%c in (*.bat *.txt) do type %%c 

    :: 开关/L
    FOR /L %%variable IN (start,step,end) DO command
    ===============================================
    @echo off
    for /l %%i in (1,2,10) do md %%i
    pause
    ===============================================
    上例将新建5个文件夹，文件夹名称依次为1、3、5、7、9
    

    %~df0是对%0的修正，只保留了其驱动器盘符和路径，详见 for /?，下面列出部分；
    
    另外，FOR 变量参照的替换已被增强。您现在可以使用下列选项语法:

         ~I         - 删除任何引号(")，扩充 %I
         %~fI        - 将 %I 扩充到一个完全合格的路径名
         %~dI        - 仅将 %I 扩充到一个驱动器号
         %~pI        - 仅将 %I 扩充到一个路径
         %~nI        - 仅将 %I 扩充到一个文件名
         %~xI        - 仅将 %I 扩充到一个文件扩展名
         %~sI        - 扩充的路径只含有短名
         %~aI        - 将 %I 扩充到文件的文件属性
         %~tI        - 将 %I 扩充到文件的日期/时间
         %~zI        - 将 %I 扩充到文件的大小
         %~$PATH:I   - 查找列在路径环境变量的目录，并将 %I 扩充到找到的第一个完全
                       合格的名称。如果环境变量名未被定义，或者没有找到文件，此组合
                       键会扩充到空字符串

    可以组合修饰符来得到多重结果:

         %~dpI       - 仅将 %I 扩充到一个驱动器号和路径
         %~nxI       - 仅将 %I 扩充到一个文件名和扩展名
         %~fsI       - 仅将 %I 扩充到一个带有短名的完整路径名
         %~dp$PATH:i - 查找列在路径环境变量的目录，并将 %I 扩充
                       到找到的第一个驱动器号和路径。
         %~ftzaI     - 将 %I 扩充到类似输出线路的 DIR

    在以上例子中，%I 和 PATH 可用其他有效数值代替。%~ 语法用一个有效的 FOR 变量名
    终止。选取类似 %I 的大写变量名比较易读，而且避免与不分大小写的组合键混淆。


(8) 流程控制 goto
    goto end 
    :end 
    echo this is the end 

